// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Qot_GetFutureInfo.proto

#ifndef PROTOBUF_Qot_5fGetFutureInfo_2eproto__INCLUDED
#define PROTOBUF_Qot_5fGetFutureInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Common.pb.h"
#include "Qot_Common.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_Qot_5fGetFutureInfo_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsTradeTimeImpl();
void InitDefaultsTradeTime();
void InitDefaultsFutureInfoImpl();
void InitDefaultsFutureInfo();
void InitDefaultsC2SImpl();
void InitDefaultsC2S();
void InitDefaultsS2CImpl();
void InitDefaultsS2C();
void InitDefaultsRequestImpl();
void InitDefaultsRequest();
void InitDefaultsResponseImpl();
void InitDefaultsResponse();
inline void InitDefaults() {
  InitDefaultsTradeTime();
  InitDefaultsFutureInfo();
  InitDefaultsC2S();
  InitDefaultsS2C();
  InitDefaultsRequest();
  InitDefaultsResponse();
}
}  // namespace protobuf_Qot_5fGetFutureInfo_2eproto
namespace Qot_GetFutureInfo {
class C2S;
class C2SDefaultTypeInternal;
extern C2SDefaultTypeInternal _C2S_default_instance_;
class FutureInfo;
class FutureInfoDefaultTypeInternal;
extern FutureInfoDefaultTypeInternal _FutureInfo_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class S2C;
class S2CDefaultTypeInternal;
extern S2CDefaultTypeInternal _S2C_default_instance_;
class TradeTime;
class TradeTimeDefaultTypeInternal;
extern TradeTimeDefaultTypeInternal _TradeTime_default_instance_;
}  // namespace Qot_GetFutureInfo
namespace Qot_GetFutureInfo {

// ===================================================================

class TradeTime : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_GetFutureInfo.TradeTime) */ {
 public:
  TradeTime();
  virtual ~TradeTime();

  TradeTime(const TradeTime& from);

  inline TradeTime& operator=(const TradeTime& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TradeTime(TradeTime&& from) noexcept
    : TradeTime() {
    *this = ::std::move(from);
  }

  inline TradeTime& operator=(TradeTime&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TradeTime& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TradeTime* internal_default_instance() {
    return reinterpret_cast<const TradeTime*>(
               &_TradeTime_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(TradeTime* other);
  friend void swap(TradeTime& a, TradeTime& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TradeTime* New() const PROTOBUF_FINAL { return New(NULL); }

  TradeTime* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TradeTime& from);
  void MergeFrom(const TradeTime& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TradeTime* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double begin = 1;
  bool has_begin() const;
  void clear_begin();
  static const int kBeginFieldNumber = 1;
  double begin() const;
  void set_begin(double value);

  // optional double end = 2;
  bool has_end() const;
  void clear_end();
  static const int kEndFieldNumber = 2;
  double end() const;
  void set_end(double value);

  // @@protoc_insertion_point(class_scope:Qot_GetFutureInfo.TradeTime)
 private:
  void set_has_begin();
  void clear_has_begin();
  void set_has_end();
  void clear_has_end();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double begin_;
  double end_;
  friend struct ::protobuf_Qot_5fGetFutureInfo_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fGetFutureInfo_2eproto::InitDefaultsTradeTimeImpl();
};
// -------------------------------------------------------------------

class FutureInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_GetFutureInfo.FutureInfo) */ {
 public:
  FutureInfo();
  virtual ~FutureInfo();

  FutureInfo(const FutureInfo& from);

  inline FutureInfo& operator=(const FutureInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FutureInfo(FutureInfo&& from) noexcept
    : FutureInfo() {
    *this = ::std::move(from);
  }

  inline FutureInfo& operator=(FutureInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FutureInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FutureInfo* internal_default_instance() {
    return reinterpret_cast<const FutureInfo*>(
               &_FutureInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(FutureInfo* other);
  friend void swap(FutureInfo& a, FutureInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FutureInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  FutureInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FutureInfo& from);
  void MergeFrom(const FutureInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FutureInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Qot_GetFutureInfo.TradeTime tradeTime = 15;
  int tradetime_size() const;
  void clear_tradetime();
  static const int kTradeTimeFieldNumber = 15;
  const ::Qot_GetFutureInfo::TradeTime& tradetime(int index) const;
  ::Qot_GetFutureInfo::TradeTime* mutable_tradetime(int index);
  ::Qot_GetFutureInfo::TradeTime* add_tradetime();
  ::google::protobuf::RepeatedPtrField< ::Qot_GetFutureInfo::TradeTime >*
      mutable_tradetime();
  const ::google::protobuf::RepeatedPtrField< ::Qot_GetFutureInfo::TradeTime >&
      tradetime() const;

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string lastTradeTime = 3;
  bool has_lasttradetime() const;
  void clear_lasttradetime();
  static const int kLastTradeTimeFieldNumber = 3;
  const ::std::string& lasttradetime() const;
  void set_lasttradetime(const ::std::string& value);
  #if LANG_CXX11
  void set_lasttradetime(::std::string&& value);
  #endif
  void set_lasttradetime(const char* value);
  void set_lasttradetime(const char* value, size_t size);
  ::std::string* mutable_lasttradetime();
  ::std::string* release_lasttradetime();
  void set_allocated_lasttradetime(::std::string* lasttradetime);

  // required string ownerOther = 6;
  bool has_ownerother() const;
  void clear_ownerother();
  static const int kOwnerOtherFieldNumber = 6;
  const ::std::string& ownerother() const;
  void set_ownerother(const ::std::string& value);
  #if LANG_CXX11
  void set_ownerother(::std::string&& value);
  #endif
  void set_ownerother(const char* value);
  void set_ownerother(const char* value, size_t size);
  ::std::string* mutable_ownerother();
  ::std::string* release_ownerother();
  void set_allocated_ownerother(::std::string* ownerother);

  // required string exchange = 7;
  bool has_exchange() const;
  void clear_exchange();
  static const int kExchangeFieldNumber = 7;
  const ::std::string& exchange() const;
  void set_exchange(const ::std::string& value);
  #if LANG_CXX11
  void set_exchange(::std::string&& value);
  #endif
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  ::std::string* mutable_exchange();
  ::std::string* release_exchange();
  void set_allocated_exchange(::std::string* exchange);

  // required string contractType = 8;
  bool has_contracttype() const;
  void clear_contracttype();
  static const int kContractTypeFieldNumber = 8;
  const ::std::string& contracttype() const;
  void set_contracttype(const ::std::string& value);
  #if LANG_CXX11
  void set_contracttype(::std::string&& value);
  #endif
  void set_contracttype(const char* value);
  void set_contracttype(const char* value, size_t size);
  ::std::string* mutable_contracttype();
  ::std::string* release_contracttype();
  void set_allocated_contracttype(::std::string* contracttype);

  // required string contractSizeUnit = 10;
  bool has_contractsizeunit() const;
  void clear_contractsizeunit();
  static const int kContractSizeUnitFieldNumber = 10;
  const ::std::string& contractsizeunit() const;
  void set_contractsizeunit(const ::std::string& value);
  #if LANG_CXX11
  void set_contractsizeunit(::std::string&& value);
  #endif
  void set_contractsizeunit(const char* value);
  void set_contractsizeunit(const char* value, size_t size);
  ::std::string* mutable_contractsizeunit();
  ::std::string* release_contractsizeunit();
  void set_allocated_contractsizeunit(::std::string* contractsizeunit);

  // required string quoteCurrency = 11;
  bool has_quotecurrency() const;
  void clear_quotecurrency();
  static const int kQuoteCurrencyFieldNumber = 11;
  const ::std::string& quotecurrency() const;
  void set_quotecurrency(const ::std::string& value);
  #if LANG_CXX11
  void set_quotecurrency(::std::string&& value);
  #endif
  void set_quotecurrency(const char* value);
  void set_quotecurrency(const char* value, size_t size);
  ::std::string* mutable_quotecurrency();
  ::std::string* release_quotecurrency();
  void set_allocated_quotecurrency(::std::string* quotecurrency);

  // required string minVarUnit = 13;
  bool has_minvarunit() const;
  void clear_minvarunit();
  static const int kMinVarUnitFieldNumber = 13;
  const ::std::string& minvarunit() const;
  void set_minvarunit(const ::std::string& value);
  #if LANG_CXX11
  void set_minvarunit(::std::string&& value);
  #endif
  void set_minvarunit(const char* value);
  void set_minvarunit(const char* value, size_t size);
  ::std::string* mutable_minvarunit();
  ::std::string* release_minvarunit();
  void set_allocated_minvarunit(::std::string* minvarunit);

  // optional string quoteUnit = 14;
  bool has_quoteunit() const;
  void clear_quoteunit();
  static const int kQuoteUnitFieldNumber = 14;
  const ::std::string& quoteunit() const;
  void set_quoteunit(const ::std::string& value);
  #if LANG_CXX11
  void set_quoteunit(::std::string&& value);
  #endif
  void set_quoteunit(const char* value);
  void set_quoteunit(const char* value, size_t size);
  ::std::string* mutable_quoteunit();
  ::std::string* release_quoteunit();
  void set_allocated_quoteunit(::std::string* quoteunit);

  // required string timeZone = 16;
  bool has_timezone() const;
  void clear_timezone();
  static const int kTimeZoneFieldNumber = 16;
  const ::std::string& timezone() const;
  void set_timezone(const ::std::string& value);
  #if LANG_CXX11
  void set_timezone(::std::string&& value);
  #endif
  void set_timezone(const char* value);
  void set_timezone(const char* value, size_t size);
  ::std::string* mutable_timezone();
  ::std::string* release_timezone();
  void set_allocated_timezone(::std::string* timezone);

  // required string exchangeFormatUrl = 17;
  bool has_exchangeformaturl() const;
  void clear_exchangeformaturl();
  static const int kExchangeFormatUrlFieldNumber = 17;
  const ::std::string& exchangeformaturl() const;
  void set_exchangeformaturl(const ::std::string& value);
  #if LANG_CXX11
  void set_exchangeformaturl(::std::string&& value);
  #endif
  void set_exchangeformaturl(const char* value);
  void set_exchangeformaturl(const char* value, size_t size);
  ::std::string* mutable_exchangeformaturl();
  ::std::string* release_exchangeformaturl();
  void set_allocated_exchangeformaturl(::std::string* exchangeformaturl);

  // required .Qot_Common.Security security = 2;
  bool has_security() const;
  void clear_security();
  static const int kSecurityFieldNumber = 2;
  const ::Qot_Common::Security& security() const;
  ::Qot_Common::Security* release_security();
  ::Qot_Common::Security* mutable_security();
  void set_allocated_security(::Qot_Common::Security* security);

  // optional .Qot_Common.Security owner = 5;
  bool has_owner() const;
  void clear_owner();
  static const int kOwnerFieldNumber = 5;
  const ::Qot_Common::Security& owner() const;
  ::Qot_Common::Security* release_owner();
  ::Qot_Common::Security* mutable_owner();
  void set_allocated_owner(::Qot_Common::Security* owner);

  // optional double lastTradeTimestamp = 4;
  bool has_lasttradetimestamp() const;
  void clear_lasttradetimestamp();
  static const int kLastTradeTimestampFieldNumber = 4;
  double lasttradetimestamp() const;
  void set_lasttradetimestamp(double value);

  // required double contractSize = 9;
  bool has_contractsize() const;
  void clear_contractsize();
  static const int kContractSizeFieldNumber = 9;
  double contractsize() const;
  void set_contractsize(double value);

  // required double minVar = 12;
  bool has_minvar() const;
  void clear_minvar();
  static const int kMinVarFieldNumber = 12;
  double minvar() const;
  void set_minvar(double value);

  // @@protoc_insertion_point(class_scope:Qot_GetFutureInfo.FutureInfo)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_security();
  void clear_has_security();
  void set_has_lasttradetime();
  void clear_has_lasttradetime();
  void set_has_lasttradetimestamp();
  void clear_has_lasttradetimestamp();
  void set_has_owner();
  void clear_has_owner();
  void set_has_ownerother();
  void clear_has_ownerother();
  void set_has_exchange();
  void clear_has_exchange();
  void set_has_contracttype();
  void clear_has_contracttype();
  void set_has_contractsize();
  void clear_has_contractsize();
  void set_has_contractsizeunit();
  void clear_has_contractsizeunit();
  void set_has_quotecurrency();
  void clear_has_quotecurrency();
  void set_has_minvar();
  void clear_has_minvar();
  void set_has_minvarunit();
  void clear_has_minvarunit();
  void set_has_quoteunit();
  void clear_has_quoteunit();
  void set_has_timezone();
  void clear_has_timezone();
  void set_has_exchangeformaturl();
  void clear_has_exchangeformaturl();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Qot_GetFutureInfo::TradeTime > tradetime_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr lasttradetime_;
  ::google::protobuf::internal::ArenaStringPtr ownerother_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  ::google::protobuf::internal::ArenaStringPtr contracttype_;
  ::google::protobuf::internal::ArenaStringPtr contractsizeunit_;
  ::google::protobuf::internal::ArenaStringPtr quotecurrency_;
  ::google::protobuf::internal::ArenaStringPtr minvarunit_;
  ::google::protobuf::internal::ArenaStringPtr quoteunit_;
  ::google::protobuf::internal::ArenaStringPtr timezone_;
  ::google::protobuf::internal::ArenaStringPtr exchangeformaturl_;
  ::Qot_Common::Security* security_;
  ::Qot_Common::Security* owner_;
  double lasttradetimestamp_;
  double contractsize_;
  double minvar_;
  friend struct ::protobuf_Qot_5fGetFutureInfo_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fGetFutureInfo_2eproto::InitDefaultsFutureInfoImpl();
};
// -------------------------------------------------------------------

class C2S : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_GetFutureInfo.C2S) */ {
 public:
  C2S();
  virtual ~C2S();

  C2S(const C2S& from);

  inline C2S& operator=(const C2S& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  C2S(C2S&& from) noexcept
    : C2S() {
    *this = ::std::move(from);
  }

  inline C2S& operator=(C2S&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2S& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2S* internal_default_instance() {
    return reinterpret_cast<const C2S*>(
               &_C2S_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(C2S* other);
  friend void swap(C2S& a, C2S& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline C2S* New() const PROTOBUF_FINAL { return New(NULL); }

  C2S* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const C2S& from);
  void MergeFrom(const C2S& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(C2S* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Qot_Common.Security securityList = 1;
  int securitylist_size() const;
  void clear_securitylist();
  static const int kSecurityListFieldNumber = 1;
  const ::Qot_Common::Security& securitylist(int index) const;
  ::Qot_Common::Security* mutable_securitylist(int index);
  ::Qot_Common::Security* add_securitylist();
  ::google::protobuf::RepeatedPtrField< ::Qot_Common::Security >*
      mutable_securitylist();
  const ::google::protobuf::RepeatedPtrField< ::Qot_Common::Security >&
      securitylist() const;

  // @@protoc_insertion_point(class_scope:Qot_GetFutureInfo.C2S)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Qot_Common::Security > securitylist_;
  friend struct ::protobuf_Qot_5fGetFutureInfo_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fGetFutureInfo_2eproto::InitDefaultsC2SImpl();
};
// -------------------------------------------------------------------

class S2C : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_GetFutureInfo.S2C) */ {
 public:
  S2C();
  virtual ~S2C();

  S2C(const S2C& from);

  inline S2C& operator=(const S2C& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2C(S2C&& from) noexcept
    : S2C() {
    *this = ::std::move(from);
  }

  inline S2C& operator=(S2C&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2C* internal_default_instance() {
    return reinterpret_cast<const S2C*>(
               &_S2C_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(S2C* other);
  friend void swap(S2C& a, S2C& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2C* New() const PROTOBUF_FINAL { return New(NULL); }

  S2C* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const S2C& from);
  void MergeFrom(const S2C& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(S2C* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Qot_GetFutureInfo.FutureInfo futureInfoList = 1;
  int futureinfolist_size() const;
  void clear_futureinfolist();
  static const int kFutureInfoListFieldNumber = 1;
  const ::Qot_GetFutureInfo::FutureInfo& futureinfolist(int index) const;
  ::Qot_GetFutureInfo::FutureInfo* mutable_futureinfolist(int index);
  ::Qot_GetFutureInfo::FutureInfo* add_futureinfolist();
  ::google::protobuf::RepeatedPtrField< ::Qot_GetFutureInfo::FutureInfo >*
      mutable_futureinfolist();
  const ::google::protobuf::RepeatedPtrField< ::Qot_GetFutureInfo::FutureInfo >&
      futureinfolist() const;

  // @@protoc_insertion_point(class_scope:Qot_GetFutureInfo.S2C)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Qot_GetFutureInfo::FutureInfo > futureinfolist_;
  friend struct ::protobuf_Qot_5fGetFutureInfo_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fGetFutureInfo_2eproto::InitDefaultsS2CImpl();
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_GetFutureInfo.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const PROTOBUF_FINAL { return New(NULL); }

  Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Qot_GetFutureInfo.C2S c2s = 1;
  bool has_c2s() const;
  void clear_c2s();
  static const int kC2SFieldNumber = 1;
  const ::Qot_GetFutureInfo::C2S& c2s() const;
  ::Qot_GetFutureInfo::C2S* release_c2s();
  ::Qot_GetFutureInfo::C2S* mutable_c2s();
  void set_allocated_c2s(::Qot_GetFutureInfo::C2S* c2s);

  // @@protoc_insertion_point(class_scope:Qot_GetFutureInfo.Request)
 private:
  void set_has_c2s();
  void clear_has_c2s();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::Qot_GetFutureInfo::C2S* c2s_;
  friend struct ::protobuf_Qot_5fGetFutureInfo_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fGetFutureInfo_2eproto::InitDefaultsRequestImpl();
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_GetFutureInfo.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Response* other);
  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const PROTOBUF_FINAL { return New(NULL); }

  Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string retMsg = 2;
  bool has_retmsg() const;
  void clear_retmsg();
  static const int kRetMsgFieldNumber = 2;
  const ::std::string& retmsg() const;
  void set_retmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_retmsg(::std::string&& value);
  #endif
  void set_retmsg(const char* value);
  void set_retmsg(const char* value, size_t size);
  ::std::string* mutable_retmsg();
  ::std::string* release_retmsg();
  void set_allocated_retmsg(::std::string* retmsg);

  // optional .Qot_GetFutureInfo.S2C s2c = 4;
  bool has_s2c() const;
  void clear_s2c();
  static const int kS2CFieldNumber = 4;
  const ::Qot_GetFutureInfo::S2C& s2c() const;
  ::Qot_GetFutureInfo::S2C* release_s2c();
  ::Qot_GetFutureInfo::S2C* mutable_s2c();
  void set_allocated_s2c(::Qot_GetFutureInfo::S2C* s2c);

  // optional int32 errCode = 3;
  bool has_errcode() const;
  void clear_errcode();
  static const int kErrCodeFieldNumber = 3;
  ::google::protobuf::int32 errcode() const;
  void set_errcode(::google::protobuf::int32 value);

  // required int32 retType = 1 [default = -400];
  bool has_rettype() const;
  void clear_rettype();
  static const int kRetTypeFieldNumber = 1;
  ::google::protobuf::int32 rettype() const;
  void set_rettype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Qot_GetFutureInfo.Response)
 private:
  void set_has_rettype();
  void clear_has_rettype();
  void set_has_retmsg();
  void clear_has_retmsg();
  void set_has_errcode();
  void clear_has_errcode();
  void set_has_s2c();
  void clear_has_s2c();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr retmsg_;
  ::Qot_GetFutureInfo::S2C* s2c_;
  ::google::protobuf::int32 errcode_;
  ::google::protobuf::int32 rettype_;
  friend struct ::protobuf_Qot_5fGetFutureInfo_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fGetFutureInfo_2eproto::InitDefaultsResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TradeTime

// optional double begin = 1;
inline bool TradeTime::has_begin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TradeTime::set_has_begin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TradeTime::clear_has_begin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TradeTime::clear_begin() {
  begin_ = 0;
  clear_has_begin();
}
inline double TradeTime::begin() const {
  // @@protoc_insertion_point(field_get:Qot_GetFutureInfo.TradeTime.begin)
  return begin_;
}
inline void TradeTime::set_begin(double value) {
  set_has_begin();
  begin_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetFutureInfo.TradeTime.begin)
}

// optional double end = 2;
inline bool TradeTime::has_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TradeTime::set_has_end() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TradeTime::clear_has_end() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TradeTime::clear_end() {
  end_ = 0;
  clear_has_end();
}
inline double TradeTime::end() const {
  // @@protoc_insertion_point(field_get:Qot_GetFutureInfo.TradeTime.end)
  return end_;
}
inline void TradeTime::set_end(double value) {
  set_has_end();
  end_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetFutureInfo.TradeTime.end)
}

// -------------------------------------------------------------------

// FutureInfo

// required string name = 1;
inline bool FutureInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FutureInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FutureInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FutureInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& FutureInfo::name() const {
  // @@protoc_insertion_point(field_get:Qot_GetFutureInfo.FutureInfo.name)
  return name_.GetNoArena();
}
inline void FutureInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_GetFutureInfo.FutureInfo.name)
}
#if LANG_CXX11
inline void FutureInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_GetFutureInfo.FutureInfo.name)
}
#endif
inline void FutureInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_GetFutureInfo.FutureInfo.name)
}
inline void FutureInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_GetFutureInfo.FutureInfo.name)
}
inline ::std::string* FutureInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Qot_GetFutureInfo.FutureInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureInfo::release_name() {
  // @@protoc_insertion_point(field_release:Qot_GetFutureInfo.FutureInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Qot_GetFutureInfo.FutureInfo.name)
}

// required .Qot_Common.Security security = 2;
inline bool FutureInfo::has_security() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FutureInfo::set_has_security() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FutureInfo::clear_has_security() {
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::Qot_Common::Security& FutureInfo::security() const {
  const ::Qot_Common::Security* p = security_;
  // @@protoc_insertion_point(field_get:Qot_GetFutureInfo.FutureInfo.security)
  return p != NULL ? *p : *reinterpret_cast<const ::Qot_Common::Security*>(
      &::Qot_Common::_Security_default_instance_);
}
inline ::Qot_Common::Security* FutureInfo::release_security() {
  // @@protoc_insertion_point(field_release:Qot_GetFutureInfo.FutureInfo.security)
  clear_has_security();
  ::Qot_Common::Security* temp = security_;
  security_ = NULL;
  return temp;
}
inline ::Qot_Common::Security* FutureInfo::mutable_security() {
  set_has_security();
  if (security_ == NULL) {
    security_ = new ::Qot_Common::Security;
  }
  // @@protoc_insertion_point(field_mutable:Qot_GetFutureInfo.FutureInfo.security)
  return security_;
}
inline void FutureInfo::set_allocated_security(::Qot_Common::Security* security) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(security_);
  }
  if (security) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      security = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, security, submessage_arena);
    }
    set_has_security();
  } else {
    clear_has_security();
  }
  security_ = security;
  // @@protoc_insertion_point(field_set_allocated:Qot_GetFutureInfo.FutureInfo.security)
}

// required string lastTradeTime = 3;
inline bool FutureInfo::has_lasttradetime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FutureInfo::set_has_lasttradetime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FutureInfo::clear_has_lasttradetime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FutureInfo::clear_lasttradetime() {
  lasttradetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lasttradetime();
}
inline const ::std::string& FutureInfo::lasttradetime() const {
  // @@protoc_insertion_point(field_get:Qot_GetFutureInfo.FutureInfo.lastTradeTime)
  return lasttradetime_.GetNoArena();
}
inline void FutureInfo::set_lasttradetime(const ::std::string& value) {
  set_has_lasttradetime();
  lasttradetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_GetFutureInfo.FutureInfo.lastTradeTime)
}
#if LANG_CXX11
inline void FutureInfo::set_lasttradetime(::std::string&& value) {
  set_has_lasttradetime();
  lasttradetime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_GetFutureInfo.FutureInfo.lastTradeTime)
}
#endif
inline void FutureInfo::set_lasttradetime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_lasttradetime();
  lasttradetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_GetFutureInfo.FutureInfo.lastTradeTime)
}
inline void FutureInfo::set_lasttradetime(const char* value, size_t size) {
  set_has_lasttradetime();
  lasttradetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_GetFutureInfo.FutureInfo.lastTradeTime)
}
inline ::std::string* FutureInfo::mutable_lasttradetime() {
  set_has_lasttradetime();
  // @@protoc_insertion_point(field_mutable:Qot_GetFutureInfo.FutureInfo.lastTradeTime)
  return lasttradetime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureInfo::release_lasttradetime() {
  // @@protoc_insertion_point(field_release:Qot_GetFutureInfo.FutureInfo.lastTradeTime)
  clear_has_lasttradetime();
  return lasttradetime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureInfo::set_allocated_lasttradetime(::std::string* lasttradetime) {
  if (lasttradetime != NULL) {
    set_has_lasttradetime();
  } else {
    clear_has_lasttradetime();
  }
  lasttradetime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lasttradetime);
  // @@protoc_insertion_point(field_set_allocated:Qot_GetFutureInfo.FutureInfo.lastTradeTime)
}

// optional double lastTradeTimestamp = 4;
inline bool FutureInfo::has_lasttradetimestamp() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void FutureInfo::set_has_lasttradetimestamp() {
  _has_bits_[0] |= 0x00002000u;
}
inline void FutureInfo::clear_has_lasttradetimestamp() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void FutureInfo::clear_lasttradetimestamp() {
  lasttradetimestamp_ = 0;
  clear_has_lasttradetimestamp();
}
inline double FutureInfo::lasttradetimestamp() const {
  // @@protoc_insertion_point(field_get:Qot_GetFutureInfo.FutureInfo.lastTradeTimestamp)
  return lasttradetimestamp_;
}
inline void FutureInfo::set_lasttradetimestamp(double value) {
  set_has_lasttradetimestamp();
  lasttradetimestamp_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetFutureInfo.FutureInfo.lastTradeTimestamp)
}

// optional .Qot_Common.Security owner = 5;
inline bool FutureInfo::has_owner() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FutureInfo::set_has_owner() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FutureInfo::clear_has_owner() {
  _has_bits_[0] &= ~0x00001000u;
}
inline const ::Qot_Common::Security& FutureInfo::owner() const {
  const ::Qot_Common::Security* p = owner_;
  // @@protoc_insertion_point(field_get:Qot_GetFutureInfo.FutureInfo.owner)
  return p != NULL ? *p : *reinterpret_cast<const ::Qot_Common::Security*>(
      &::Qot_Common::_Security_default_instance_);
}
inline ::Qot_Common::Security* FutureInfo::release_owner() {
  // @@protoc_insertion_point(field_release:Qot_GetFutureInfo.FutureInfo.owner)
  clear_has_owner();
  ::Qot_Common::Security* temp = owner_;
  owner_ = NULL;
  return temp;
}
inline ::Qot_Common::Security* FutureInfo::mutable_owner() {
  set_has_owner();
  if (owner_ == NULL) {
    owner_ = new ::Qot_Common::Security;
  }
  // @@protoc_insertion_point(field_mutable:Qot_GetFutureInfo.FutureInfo.owner)
  return owner_;
}
inline void FutureInfo::set_allocated_owner(::Qot_Common::Security* owner) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(owner_);
  }
  if (owner) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      owner = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, owner, submessage_arena);
    }
    set_has_owner();
  } else {
    clear_has_owner();
  }
  owner_ = owner;
  // @@protoc_insertion_point(field_set_allocated:Qot_GetFutureInfo.FutureInfo.owner)
}

// required string ownerOther = 6;
inline bool FutureInfo::has_ownerother() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FutureInfo::set_has_ownerother() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FutureInfo::clear_has_ownerother() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FutureInfo::clear_ownerother() {
  ownerother_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ownerother();
}
inline const ::std::string& FutureInfo::ownerother() const {
  // @@protoc_insertion_point(field_get:Qot_GetFutureInfo.FutureInfo.ownerOther)
  return ownerother_.GetNoArena();
}
inline void FutureInfo::set_ownerother(const ::std::string& value) {
  set_has_ownerother();
  ownerother_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_GetFutureInfo.FutureInfo.ownerOther)
}
#if LANG_CXX11
inline void FutureInfo::set_ownerother(::std::string&& value) {
  set_has_ownerother();
  ownerother_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_GetFutureInfo.FutureInfo.ownerOther)
}
#endif
inline void FutureInfo::set_ownerother(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ownerother();
  ownerother_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_GetFutureInfo.FutureInfo.ownerOther)
}
inline void FutureInfo::set_ownerother(const char* value, size_t size) {
  set_has_ownerother();
  ownerother_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_GetFutureInfo.FutureInfo.ownerOther)
}
inline ::std::string* FutureInfo::mutable_ownerother() {
  set_has_ownerother();
  // @@protoc_insertion_point(field_mutable:Qot_GetFutureInfo.FutureInfo.ownerOther)
  return ownerother_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureInfo::release_ownerother() {
  // @@protoc_insertion_point(field_release:Qot_GetFutureInfo.FutureInfo.ownerOther)
  clear_has_ownerother();
  return ownerother_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureInfo::set_allocated_ownerother(::std::string* ownerother) {
  if (ownerother != NULL) {
    set_has_ownerother();
  } else {
    clear_has_ownerother();
  }
  ownerother_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ownerother);
  // @@protoc_insertion_point(field_set_allocated:Qot_GetFutureInfo.FutureInfo.ownerOther)
}

// required string exchange = 7;
inline bool FutureInfo::has_exchange() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FutureInfo::set_has_exchange() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FutureInfo::clear_has_exchange() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FutureInfo::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_exchange();
}
inline const ::std::string& FutureInfo::exchange() const {
  // @@protoc_insertion_point(field_get:Qot_GetFutureInfo.FutureInfo.exchange)
  return exchange_.GetNoArena();
}
inline void FutureInfo::set_exchange(const ::std::string& value) {
  set_has_exchange();
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_GetFutureInfo.FutureInfo.exchange)
}
#if LANG_CXX11
inline void FutureInfo::set_exchange(::std::string&& value) {
  set_has_exchange();
  exchange_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_GetFutureInfo.FutureInfo.exchange)
}
#endif
inline void FutureInfo::set_exchange(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_exchange();
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_GetFutureInfo.FutureInfo.exchange)
}
inline void FutureInfo::set_exchange(const char* value, size_t size) {
  set_has_exchange();
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_GetFutureInfo.FutureInfo.exchange)
}
inline ::std::string* FutureInfo::mutable_exchange() {
  set_has_exchange();
  // @@protoc_insertion_point(field_mutable:Qot_GetFutureInfo.FutureInfo.exchange)
  return exchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureInfo::release_exchange() {
  // @@protoc_insertion_point(field_release:Qot_GetFutureInfo.FutureInfo.exchange)
  clear_has_exchange();
  return exchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureInfo::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    set_has_exchange();
  } else {
    clear_has_exchange();
  }
  exchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:Qot_GetFutureInfo.FutureInfo.exchange)
}

// required string contractType = 8;
inline bool FutureInfo::has_contracttype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FutureInfo::set_has_contracttype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FutureInfo::clear_has_contracttype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FutureInfo::clear_contracttype() {
  contracttype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_contracttype();
}
inline const ::std::string& FutureInfo::contracttype() const {
  // @@protoc_insertion_point(field_get:Qot_GetFutureInfo.FutureInfo.contractType)
  return contracttype_.GetNoArena();
}
inline void FutureInfo::set_contracttype(const ::std::string& value) {
  set_has_contracttype();
  contracttype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_GetFutureInfo.FutureInfo.contractType)
}
#if LANG_CXX11
inline void FutureInfo::set_contracttype(::std::string&& value) {
  set_has_contracttype();
  contracttype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_GetFutureInfo.FutureInfo.contractType)
}
#endif
inline void FutureInfo::set_contracttype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_contracttype();
  contracttype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_GetFutureInfo.FutureInfo.contractType)
}
inline void FutureInfo::set_contracttype(const char* value, size_t size) {
  set_has_contracttype();
  contracttype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_GetFutureInfo.FutureInfo.contractType)
}
inline ::std::string* FutureInfo::mutable_contracttype() {
  set_has_contracttype();
  // @@protoc_insertion_point(field_mutable:Qot_GetFutureInfo.FutureInfo.contractType)
  return contracttype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureInfo::release_contracttype() {
  // @@protoc_insertion_point(field_release:Qot_GetFutureInfo.FutureInfo.contractType)
  clear_has_contracttype();
  return contracttype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureInfo::set_allocated_contracttype(::std::string* contracttype) {
  if (contracttype != NULL) {
    set_has_contracttype();
  } else {
    clear_has_contracttype();
  }
  contracttype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contracttype);
  // @@protoc_insertion_point(field_set_allocated:Qot_GetFutureInfo.FutureInfo.contractType)
}

// required double contractSize = 9;
inline bool FutureInfo::has_contractsize() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void FutureInfo::set_has_contractsize() {
  _has_bits_[0] |= 0x00004000u;
}
inline void FutureInfo::clear_has_contractsize() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void FutureInfo::clear_contractsize() {
  contractsize_ = 0;
  clear_has_contractsize();
}
inline double FutureInfo::contractsize() const {
  // @@protoc_insertion_point(field_get:Qot_GetFutureInfo.FutureInfo.contractSize)
  return contractsize_;
}
inline void FutureInfo::set_contractsize(double value) {
  set_has_contractsize();
  contractsize_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetFutureInfo.FutureInfo.contractSize)
}

// required string contractSizeUnit = 10;
inline bool FutureInfo::has_contractsizeunit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FutureInfo::set_has_contractsizeunit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FutureInfo::clear_has_contractsizeunit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FutureInfo::clear_contractsizeunit() {
  contractsizeunit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_contractsizeunit();
}
inline const ::std::string& FutureInfo::contractsizeunit() const {
  // @@protoc_insertion_point(field_get:Qot_GetFutureInfo.FutureInfo.contractSizeUnit)
  return contractsizeunit_.GetNoArena();
}
inline void FutureInfo::set_contractsizeunit(const ::std::string& value) {
  set_has_contractsizeunit();
  contractsizeunit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_GetFutureInfo.FutureInfo.contractSizeUnit)
}
#if LANG_CXX11
inline void FutureInfo::set_contractsizeunit(::std::string&& value) {
  set_has_contractsizeunit();
  contractsizeunit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_GetFutureInfo.FutureInfo.contractSizeUnit)
}
#endif
inline void FutureInfo::set_contractsizeunit(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_contractsizeunit();
  contractsizeunit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_GetFutureInfo.FutureInfo.contractSizeUnit)
}
inline void FutureInfo::set_contractsizeunit(const char* value, size_t size) {
  set_has_contractsizeunit();
  contractsizeunit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_GetFutureInfo.FutureInfo.contractSizeUnit)
}
inline ::std::string* FutureInfo::mutable_contractsizeunit() {
  set_has_contractsizeunit();
  // @@protoc_insertion_point(field_mutable:Qot_GetFutureInfo.FutureInfo.contractSizeUnit)
  return contractsizeunit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureInfo::release_contractsizeunit() {
  // @@protoc_insertion_point(field_release:Qot_GetFutureInfo.FutureInfo.contractSizeUnit)
  clear_has_contractsizeunit();
  return contractsizeunit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureInfo::set_allocated_contractsizeunit(::std::string* contractsizeunit) {
  if (contractsizeunit != NULL) {
    set_has_contractsizeunit();
  } else {
    clear_has_contractsizeunit();
  }
  contractsizeunit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contractsizeunit);
  // @@protoc_insertion_point(field_set_allocated:Qot_GetFutureInfo.FutureInfo.contractSizeUnit)
}

// required string quoteCurrency = 11;
inline bool FutureInfo::has_quotecurrency() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FutureInfo::set_has_quotecurrency() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FutureInfo::clear_has_quotecurrency() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FutureInfo::clear_quotecurrency() {
  quotecurrency_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_quotecurrency();
}
inline const ::std::string& FutureInfo::quotecurrency() const {
  // @@protoc_insertion_point(field_get:Qot_GetFutureInfo.FutureInfo.quoteCurrency)
  return quotecurrency_.GetNoArena();
}
inline void FutureInfo::set_quotecurrency(const ::std::string& value) {
  set_has_quotecurrency();
  quotecurrency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_GetFutureInfo.FutureInfo.quoteCurrency)
}
#if LANG_CXX11
inline void FutureInfo::set_quotecurrency(::std::string&& value) {
  set_has_quotecurrency();
  quotecurrency_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_GetFutureInfo.FutureInfo.quoteCurrency)
}
#endif
inline void FutureInfo::set_quotecurrency(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_quotecurrency();
  quotecurrency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_GetFutureInfo.FutureInfo.quoteCurrency)
}
inline void FutureInfo::set_quotecurrency(const char* value, size_t size) {
  set_has_quotecurrency();
  quotecurrency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_GetFutureInfo.FutureInfo.quoteCurrency)
}
inline ::std::string* FutureInfo::mutable_quotecurrency() {
  set_has_quotecurrency();
  // @@protoc_insertion_point(field_mutable:Qot_GetFutureInfo.FutureInfo.quoteCurrency)
  return quotecurrency_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureInfo::release_quotecurrency() {
  // @@protoc_insertion_point(field_release:Qot_GetFutureInfo.FutureInfo.quoteCurrency)
  clear_has_quotecurrency();
  return quotecurrency_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureInfo::set_allocated_quotecurrency(::std::string* quotecurrency) {
  if (quotecurrency != NULL) {
    set_has_quotecurrency();
  } else {
    clear_has_quotecurrency();
  }
  quotecurrency_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), quotecurrency);
  // @@protoc_insertion_point(field_set_allocated:Qot_GetFutureInfo.FutureInfo.quoteCurrency)
}

// required double minVar = 12;
inline bool FutureInfo::has_minvar() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void FutureInfo::set_has_minvar() {
  _has_bits_[0] |= 0x00008000u;
}
inline void FutureInfo::clear_has_minvar() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void FutureInfo::clear_minvar() {
  minvar_ = 0;
  clear_has_minvar();
}
inline double FutureInfo::minvar() const {
  // @@protoc_insertion_point(field_get:Qot_GetFutureInfo.FutureInfo.minVar)
  return minvar_;
}
inline void FutureInfo::set_minvar(double value) {
  set_has_minvar();
  minvar_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetFutureInfo.FutureInfo.minVar)
}

// required string minVarUnit = 13;
inline bool FutureInfo::has_minvarunit() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FutureInfo::set_has_minvarunit() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FutureInfo::clear_has_minvarunit() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FutureInfo::clear_minvarunit() {
  minvarunit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_minvarunit();
}
inline const ::std::string& FutureInfo::minvarunit() const {
  // @@protoc_insertion_point(field_get:Qot_GetFutureInfo.FutureInfo.minVarUnit)
  return minvarunit_.GetNoArena();
}
inline void FutureInfo::set_minvarunit(const ::std::string& value) {
  set_has_minvarunit();
  minvarunit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_GetFutureInfo.FutureInfo.minVarUnit)
}
#if LANG_CXX11
inline void FutureInfo::set_minvarunit(::std::string&& value) {
  set_has_minvarunit();
  minvarunit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_GetFutureInfo.FutureInfo.minVarUnit)
}
#endif
inline void FutureInfo::set_minvarunit(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_minvarunit();
  minvarunit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_GetFutureInfo.FutureInfo.minVarUnit)
}
inline void FutureInfo::set_minvarunit(const char* value, size_t size) {
  set_has_minvarunit();
  minvarunit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_GetFutureInfo.FutureInfo.minVarUnit)
}
inline ::std::string* FutureInfo::mutable_minvarunit() {
  set_has_minvarunit();
  // @@protoc_insertion_point(field_mutable:Qot_GetFutureInfo.FutureInfo.minVarUnit)
  return minvarunit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureInfo::release_minvarunit() {
  // @@protoc_insertion_point(field_release:Qot_GetFutureInfo.FutureInfo.minVarUnit)
  clear_has_minvarunit();
  return minvarunit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureInfo::set_allocated_minvarunit(::std::string* minvarunit) {
  if (minvarunit != NULL) {
    set_has_minvarunit();
  } else {
    clear_has_minvarunit();
  }
  minvarunit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), minvarunit);
  // @@protoc_insertion_point(field_set_allocated:Qot_GetFutureInfo.FutureInfo.minVarUnit)
}

// optional string quoteUnit = 14;
inline bool FutureInfo::has_quoteunit() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FutureInfo::set_has_quoteunit() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FutureInfo::clear_has_quoteunit() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FutureInfo::clear_quoteunit() {
  quoteunit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_quoteunit();
}
inline const ::std::string& FutureInfo::quoteunit() const {
  // @@protoc_insertion_point(field_get:Qot_GetFutureInfo.FutureInfo.quoteUnit)
  return quoteunit_.GetNoArena();
}
inline void FutureInfo::set_quoteunit(const ::std::string& value) {
  set_has_quoteunit();
  quoteunit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_GetFutureInfo.FutureInfo.quoteUnit)
}
#if LANG_CXX11
inline void FutureInfo::set_quoteunit(::std::string&& value) {
  set_has_quoteunit();
  quoteunit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_GetFutureInfo.FutureInfo.quoteUnit)
}
#endif
inline void FutureInfo::set_quoteunit(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_quoteunit();
  quoteunit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_GetFutureInfo.FutureInfo.quoteUnit)
}
inline void FutureInfo::set_quoteunit(const char* value, size_t size) {
  set_has_quoteunit();
  quoteunit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_GetFutureInfo.FutureInfo.quoteUnit)
}
inline ::std::string* FutureInfo::mutable_quoteunit() {
  set_has_quoteunit();
  // @@protoc_insertion_point(field_mutable:Qot_GetFutureInfo.FutureInfo.quoteUnit)
  return quoteunit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureInfo::release_quoteunit() {
  // @@protoc_insertion_point(field_release:Qot_GetFutureInfo.FutureInfo.quoteUnit)
  clear_has_quoteunit();
  return quoteunit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureInfo::set_allocated_quoteunit(::std::string* quoteunit) {
  if (quoteunit != NULL) {
    set_has_quoteunit();
  } else {
    clear_has_quoteunit();
  }
  quoteunit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), quoteunit);
  // @@protoc_insertion_point(field_set_allocated:Qot_GetFutureInfo.FutureInfo.quoteUnit)
}

// repeated .Qot_GetFutureInfo.TradeTime tradeTime = 15;
inline int FutureInfo::tradetime_size() const {
  return tradetime_.size();
}
inline void FutureInfo::clear_tradetime() {
  tradetime_.Clear();
}
inline const ::Qot_GetFutureInfo::TradeTime& FutureInfo::tradetime(int index) const {
  // @@protoc_insertion_point(field_get:Qot_GetFutureInfo.FutureInfo.tradeTime)
  return tradetime_.Get(index);
}
inline ::Qot_GetFutureInfo::TradeTime* FutureInfo::mutable_tradetime(int index) {
  // @@protoc_insertion_point(field_mutable:Qot_GetFutureInfo.FutureInfo.tradeTime)
  return tradetime_.Mutable(index);
}
inline ::Qot_GetFutureInfo::TradeTime* FutureInfo::add_tradetime() {
  // @@protoc_insertion_point(field_add:Qot_GetFutureInfo.FutureInfo.tradeTime)
  return tradetime_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Qot_GetFutureInfo::TradeTime >*
FutureInfo::mutable_tradetime() {
  // @@protoc_insertion_point(field_mutable_list:Qot_GetFutureInfo.FutureInfo.tradeTime)
  return &tradetime_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Qot_GetFutureInfo::TradeTime >&
FutureInfo::tradetime() const {
  // @@protoc_insertion_point(field_list:Qot_GetFutureInfo.FutureInfo.tradeTime)
  return tradetime_;
}

// required string timeZone = 16;
inline bool FutureInfo::has_timezone() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FutureInfo::set_has_timezone() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FutureInfo::clear_has_timezone() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FutureInfo::clear_timezone() {
  timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timezone();
}
inline const ::std::string& FutureInfo::timezone() const {
  // @@protoc_insertion_point(field_get:Qot_GetFutureInfo.FutureInfo.timeZone)
  return timezone_.GetNoArena();
}
inline void FutureInfo::set_timezone(const ::std::string& value) {
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_GetFutureInfo.FutureInfo.timeZone)
}
#if LANG_CXX11
inline void FutureInfo::set_timezone(::std::string&& value) {
  set_has_timezone();
  timezone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_GetFutureInfo.FutureInfo.timeZone)
}
#endif
inline void FutureInfo::set_timezone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_GetFutureInfo.FutureInfo.timeZone)
}
inline void FutureInfo::set_timezone(const char* value, size_t size) {
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_GetFutureInfo.FutureInfo.timeZone)
}
inline ::std::string* FutureInfo::mutable_timezone() {
  set_has_timezone();
  // @@protoc_insertion_point(field_mutable:Qot_GetFutureInfo.FutureInfo.timeZone)
  return timezone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureInfo::release_timezone() {
  // @@protoc_insertion_point(field_release:Qot_GetFutureInfo.FutureInfo.timeZone)
  clear_has_timezone();
  return timezone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureInfo::set_allocated_timezone(::std::string* timezone) {
  if (timezone != NULL) {
    set_has_timezone();
  } else {
    clear_has_timezone();
  }
  timezone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timezone);
  // @@protoc_insertion_point(field_set_allocated:Qot_GetFutureInfo.FutureInfo.timeZone)
}

// required string exchangeFormatUrl = 17;
inline bool FutureInfo::has_exchangeformaturl() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FutureInfo::set_has_exchangeformaturl() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FutureInfo::clear_has_exchangeformaturl() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FutureInfo::clear_exchangeformaturl() {
  exchangeformaturl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_exchangeformaturl();
}
inline const ::std::string& FutureInfo::exchangeformaturl() const {
  // @@protoc_insertion_point(field_get:Qot_GetFutureInfo.FutureInfo.exchangeFormatUrl)
  return exchangeformaturl_.GetNoArena();
}
inline void FutureInfo::set_exchangeformaturl(const ::std::string& value) {
  set_has_exchangeformaturl();
  exchangeformaturl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_GetFutureInfo.FutureInfo.exchangeFormatUrl)
}
#if LANG_CXX11
inline void FutureInfo::set_exchangeformaturl(::std::string&& value) {
  set_has_exchangeformaturl();
  exchangeformaturl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_GetFutureInfo.FutureInfo.exchangeFormatUrl)
}
#endif
inline void FutureInfo::set_exchangeformaturl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_exchangeformaturl();
  exchangeformaturl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_GetFutureInfo.FutureInfo.exchangeFormatUrl)
}
inline void FutureInfo::set_exchangeformaturl(const char* value, size_t size) {
  set_has_exchangeformaturl();
  exchangeformaturl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_GetFutureInfo.FutureInfo.exchangeFormatUrl)
}
inline ::std::string* FutureInfo::mutable_exchangeformaturl() {
  set_has_exchangeformaturl();
  // @@protoc_insertion_point(field_mutable:Qot_GetFutureInfo.FutureInfo.exchangeFormatUrl)
  return exchangeformaturl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureInfo::release_exchangeformaturl() {
  // @@protoc_insertion_point(field_release:Qot_GetFutureInfo.FutureInfo.exchangeFormatUrl)
  clear_has_exchangeformaturl();
  return exchangeformaturl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureInfo::set_allocated_exchangeformaturl(::std::string* exchangeformaturl) {
  if (exchangeformaturl != NULL) {
    set_has_exchangeformaturl();
  } else {
    clear_has_exchangeformaturl();
  }
  exchangeformaturl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeformaturl);
  // @@protoc_insertion_point(field_set_allocated:Qot_GetFutureInfo.FutureInfo.exchangeFormatUrl)
}

// -------------------------------------------------------------------

// C2S

// repeated .Qot_Common.Security securityList = 1;
inline int C2S::securitylist_size() const {
  return securitylist_.size();
}
inline const ::Qot_Common::Security& C2S::securitylist(int index) const {
  // @@protoc_insertion_point(field_get:Qot_GetFutureInfo.C2S.securityList)
  return securitylist_.Get(index);
}
inline ::Qot_Common::Security* C2S::mutable_securitylist(int index) {
  // @@protoc_insertion_point(field_mutable:Qot_GetFutureInfo.C2S.securityList)
  return securitylist_.Mutable(index);
}
inline ::Qot_Common::Security* C2S::add_securitylist() {
  // @@protoc_insertion_point(field_add:Qot_GetFutureInfo.C2S.securityList)
  return securitylist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Qot_Common::Security >*
C2S::mutable_securitylist() {
  // @@protoc_insertion_point(field_mutable_list:Qot_GetFutureInfo.C2S.securityList)
  return &securitylist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Qot_Common::Security >&
C2S::securitylist() const {
  // @@protoc_insertion_point(field_list:Qot_GetFutureInfo.C2S.securityList)
  return securitylist_;
}

// -------------------------------------------------------------------

// S2C

// repeated .Qot_GetFutureInfo.FutureInfo futureInfoList = 1;
inline int S2C::futureinfolist_size() const {
  return futureinfolist_.size();
}
inline void S2C::clear_futureinfolist() {
  futureinfolist_.Clear();
}
inline const ::Qot_GetFutureInfo::FutureInfo& S2C::futureinfolist(int index) const {
  // @@protoc_insertion_point(field_get:Qot_GetFutureInfo.S2C.futureInfoList)
  return futureinfolist_.Get(index);
}
inline ::Qot_GetFutureInfo::FutureInfo* S2C::mutable_futureinfolist(int index) {
  // @@protoc_insertion_point(field_mutable:Qot_GetFutureInfo.S2C.futureInfoList)
  return futureinfolist_.Mutable(index);
}
inline ::Qot_GetFutureInfo::FutureInfo* S2C::add_futureinfolist() {
  // @@protoc_insertion_point(field_add:Qot_GetFutureInfo.S2C.futureInfoList)
  return futureinfolist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Qot_GetFutureInfo::FutureInfo >*
S2C::mutable_futureinfolist() {
  // @@protoc_insertion_point(field_mutable_list:Qot_GetFutureInfo.S2C.futureInfoList)
  return &futureinfolist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Qot_GetFutureInfo::FutureInfo >&
S2C::futureinfolist() const {
  // @@protoc_insertion_point(field_list:Qot_GetFutureInfo.S2C.futureInfoList)
  return futureinfolist_;
}

// -------------------------------------------------------------------

// Request

// required .Qot_GetFutureInfo.C2S c2s = 1;
inline bool Request::has_c2s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_c2s() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_c2s() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_c2s() {
  if (c2s_ != NULL) c2s_->Clear();
  clear_has_c2s();
}
inline const ::Qot_GetFutureInfo::C2S& Request::c2s() const {
  const ::Qot_GetFutureInfo::C2S* p = c2s_;
  // @@protoc_insertion_point(field_get:Qot_GetFutureInfo.Request.c2s)
  return p != NULL ? *p : *reinterpret_cast<const ::Qot_GetFutureInfo::C2S*>(
      &::Qot_GetFutureInfo::_C2S_default_instance_);
}
inline ::Qot_GetFutureInfo::C2S* Request::release_c2s() {
  // @@protoc_insertion_point(field_release:Qot_GetFutureInfo.Request.c2s)
  clear_has_c2s();
  ::Qot_GetFutureInfo::C2S* temp = c2s_;
  c2s_ = NULL;
  return temp;
}
inline ::Qot_GetFutureInfo::C2S* Request::mutable_c2s() {
  set_has_c2s();
  if (c2s_ == NULL) {
    c2s_ = new ::Qot_GetFutureInfo::C2S;
  }
  // @@protoc_insertion_point(field_mutable:Qot_GetFutureInfo.Request.c2s)
  return c2s_;
}
inline void Request::set_allocated_c2s(::Qot_GetFutureInfo::C2S* c2s) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete c2s_;
  }
  if (c2s) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      c2s = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, c2s, submessage_arena);
    }
    set_has_c2s();
  } else {
    clear_has_c2s();
  }
  c2s_ = c2s;
  // @@protoc_insertion_point(field_set_allocated:Qot_GetFutureInfo.Request.c2s)
}

// -------------------------------------------------------------------

// Response

// required int32 retType = 1 [default = -400];
inline bool Response::has_rettype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Response::set_has_rettype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Response::clear_has_rettype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Response::clear_rettype() {
  rettype_ = -400;
  clear_has_rettype();
}
inline ::google::protobuf::int32 Response::rettype() const {
  // @@protoc_insertion_point(field_get:Qot_GetFutureInfo.Response.retType)
  return rettype_;
}
inline void Response::set_rettype(::google::protobuf::int32 value) {
  set_has_rettype();
  rettype_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetFutureInfo.Response.retType)
}

// optional string retMsg = 2;
inline bool Response::has_retmsg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::set_has_retmsg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response::clear_has_retmsg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response::clear_retmsg() {
  retmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_retmsg();
}
inline const ::std::string& Response::retmsg() const {
  // @@protoc_insertion_point(field_get:Qot_GetFutureInfo.Response.retMsg)
  return retmsg_.GetNoArena();
}
inline void Response::set_retmsg(const ::std::string& value) {
  set_has_retmsg();
  retmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_GetFutureInfo.Response.retMsg)
}
#if LANG_CXX11
inline void Response::set_retmsg(::std::string&& value) {
  set_has_retmsg();
  retmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_GetFutureInfo.Response.retMsg)
}
#endif
inline void Response::set_retmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_retmsg();
  retmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_GetFutureInfo.Response.retMsg)
}
inline void Response::set_retmsg(const char* value, size_t size) {
  set_has_retmsg();
  retmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_GetFutureInfo.Response.retMsg)
}
inline ::std::string* Response::mutable_retmsg() {
  set_has_retmsg();
  // @@protoc_insertion_point(field_mutable:Qot_GetFutureInfo.Response.retMsg)
  return retmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_retmsg() {
  // @@protoc_insertion_point(field_release:Qot_GetFutureInfo.Response.retMsg)
  clear_has_retmsg();
  return retmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_retmsg(::std::string* retmsg) {
  if (retmsg != NULL) {
    set_has_retmsg();
  } else {
    clear_has_retmsg();
  }
  retmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), retmsg);
  // @@protoc_insertion_point(field_set_allocated:Qot_GetFutureInfo.Response.retMsg)
}

// optional int32 errCode = 3;
inline bool Response::has_errcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Response::set_has_errcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Response::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Response::clear_errcode() {
  errcode_ = 0;
  clear_has_errcode();
}
inline ::google::protobuf::int32 Response::errcode() const {
  // @@protoc_insertion_point(field_get:Qot_GetFutureInfo.Response.errCode)
  return errcode_;
}
inline void Response::set_errcode(::google::protobuf::int32 value) {
  set_has_errcode();
  errcode_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetFutureInfo.Response.errCode)
}

// optional .Qot_GetFutureInfo.S2C s2c = 4;
inline bool Response::has_s2c() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response::set_has_s2c() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Response::clear_has_s2c() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Response::clear_s2c() {
  if (s2c_ != NULL) s2c_->Clear();
  clear_has_s2c();
}
inline const ::Qot_GetFutureInfo::S2C& Response::s2c() const {
  const ::Qot_GetFutureInfo::S2C* p = s2c_;
  // @@protoc_insertion_point(field_get:Qot_GetFutureInfo.Response.s2c)
  return p != NULL ? *p : *reinterpret_cast<const ::Qot_GetFutureInfo::S2C*>(
      &::Qot_GetFutureInfo::_S2C_default_instance_);
}
inline ::Qot_GetFutureInfo::S2C* Response::release_s2c() {
  // @@protoc_insertion_point(field_release:Qot_GetFutureInfo.Response.s2c)
  clear_has_s2c();
  ::Qot_GetFutureInfo::S2C* temp = s2c_;
  s2c_ = NULL;
  return temp;
}
inline ::Qot_GetFutureInfo::S2C* Response::mutable_s2c() {
  set_has_s2c();
  if (s2c_ == NULL) {
    s2c_ = new ::Qot_GetFutureInfo::S2C;
  }
  // @@protoc_insertion_point(field_mutable:Qot_GetFutureInfo.Response.s2c)
  return s2c_;
}
inline void Response::set_allocated_s2c(::Qot_GetFutureInfo::S2C* s2c) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete s2c_;
  }
  if (s2c) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      s2c = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, s2c, submessage_arena);
    }
    set_has_s2c();
  } else {
    clear_has_s2c();
  }
  s2c_ = s2c;
  // @@protoc_insertion_point(field_set_allocated:Qot_GetFutureInfo.Response.s2c)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Qot_GetFutureInfo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Qot_5fGetFutureInfo_2eproto__INCLUDED
