// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Trd_Common.proto

#ifndef PROTOBUF_Trd_5fCommon_2eproto__INCLUDED
#define PROTOBUF_Trd_5fCommon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Common.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_Trd_5fCommon_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsAccCashInfoImpl();
void InitDefaultsAccCashInfo();
void InitDefaultsTrdHeaderImpl();
void InitDefaultsTrdHeader();
void InitDefaultsTrdAccImpl();
void InitDefaultsTrdAcc();
void InitDefaultsFundsImpl();
void InitDefaultsFunds();
void InitDefaultsPositionImpl();
void InitDefaultsPosition();
void InitDefaultsOrderImpl();
void InitDefaultsOrder();
void InitDefaultsOrderFillImpl();
void InitDefaultsOrderFill();
void InitDefaultsMaxTrdQtysImpl();
void InitDefaultsMaxTrdQtys();
void InitDefaultsTrdFilterConditionsImpl();
void InitDefaultsTrdFilterConditions();
inline void InitDefaults() {
  InitDefaultsAccCashInfo();
  InitDefaultsTrdHeader();
  InitDefaultsTrdAcc();
  InitDefaultsFunds();
  InitDefaultsPosition();
  InitDefaultsOrder();
  InitDefaultsOrderFill();
  InitDefaultsMaxTrdQtys();
  InitDefaultsTrdFilterConditions();
}
}  // namespace protobuf_Trd_5fCommon_2eproto
namespace Trd_Common {
class AccCashInfo;
class AccCashInfoDefaultTypeInternal;
extern AccCashInfoDefaultTypeInternal _AccCashInfo_default_instance_;
class Funds;
class FundsDefaultTypeInternal;
extern FundsDefaultTypeInternal _Funds_default_instance_;
class MaxTrdQtys;
class MaxTrdQtysDefaultTypeInternal;
extern MaxTrdQtysDefaultTypeInternal _MaxTrdQtys_default_instance_;
class Order;
class OrderDefaultTypeInternal;
extern OrderDefaultTypeInternal _Order_default_instance_;
class OrderFill;
class OrderFillDefaultTypeInternal;
extern OrderFillDefaultTypeInternal _OrderFill_default_instance_;
class Position;
class PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class TrdAcc;
class TrdAccDefaultTypeInternal;
extern TrdAccDefaultTypeInternal _TrdAcc_default_instance_;
class TrdFilterConditions;
class TrdFilterConditionsDefaultTypeInternal;
extern TrdFilterConditionsDefaultTypeInternal _TrdFilterConditions_default_instance_;
class TrdHeader;
class TrdHeaderDefaultTypeInternal;
extern TrdHeaderDefaultTypeInternal _TrdHeader_default_instance_;
}  // namespace Trd_Common
namespace Trd_Common {

enum TrdEnv {
  TrdEnv_Simulate = 0,
  TrdEnv_Real = 1
};
bool TrdEnv_IsValid(int value);
const TrdEnv TrdEnv_MIN = TrdEnv_Simulate;
const TrdEnv TrdEnv_MAX = TrdEnv_Real;
const int TrdEnv_ARRAYSIZE = TrdEnv_MAX + 1;

const ::google::protobuf::EnumDescriptor* TrdEnv_descriptor();
inline const ::std::string& TrdEnv_Name(TrdEnv value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrdEnv_descriptor(), value);
}
inline bool TrdEnv_Parse(
    const ::std::string& name, TrdEnv* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrdEnv>(
    TrdEnv_descriptor(), name, value);
}
enum TrdMarket {
  TrdMarket_Unknown = 0,
  TrdMarket_HK = 1,
  TrdMarket_US = 2,
  TrdMarket_CN = 3,
  TrdMarket_HKCC = 4,
  TrdMarket_Futures = 5
};
bool TrdMarket_IsValid(int value);
const TrdMarket TrdMarket_MIN = TrdMarket_Unknown;
const TrdMarket TrdMarket_MAX = TrdMarket_Futures;
const int TrdMarket_ARRAYSIZE = TrdMarket_MAX + 1;

const ::google::protobuf::EnumDescriptor* TrdMarket_descriptor();
inline const ::std::string& TrdMarket_Name(TrdMarket value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrdMarket_descriptor(), value);
}
inline bool TrdMarket_Parse(
    const ::std::string& name, TrdMarket* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrdMarket>(
    TrdMarket_descriptor(), name, value);
}
enum TrdSecMarket {
  TrdSecMarket_Unknown = 0,
  TrdSecMarket_HK = 1,
  TrdSecMarket_US = 2,
  TrdSecMarket_CN_SH = 31,
  TrdSecMarket_CN_SZ = 32
};
bool TrdSecMarket_IsValid(int value);
const TrdSecMarket TrdSecMarket_MIN = TrdSecMarket_Unknown;
const TrdSecMarket TrdSecMarket_MAX = TrdSecMarket_CN_SZ;
const int TrdSecMarket_ARRAYSIZE = TrdSecMarket_MAX + 1;

const ::google::protobuf::EnumDescriptor* TrdSecMarket_descriptor();
inline const ::std::string& TrdSecMarket_Name(TrdSecMarket value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrdSecMarket_descriptor(), value);
}
inline bool TrdSecMarket_Parse(
    const ::std::string& name, TrdSecMarket* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrdSecMarket>(
    TrdSecMarket_descriptor(), name, value);
}
enum TrdSide {
  TrdSide_Unknown = 0,
  TrdSide_Buy = 1,
  TrdSide_Sell = 2,
  TrdSide_SellShort = 3,
  TrdSide_BuyBack = 4
};
bool TrdSide_IsValid(int value);
const TrdSide TrdSide_MIN = TrdSide_Unknown;
const TrdSide TrdSide_MAX = TrdSide_BuyBack;
const int TrdSide_ARRAYSIZE = TrdSide_MAX + 1;

const ::google::protobuf::EnumDescriptor* TrdSide_descriptor();
inline const ::std::string& TrdSide_Name(TrdSide value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrdSide_descriptor(), value);
}
inline bool TrdSide_Parse(
    const ::std::string& name, TrdSide* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrdSide>(
    TrdSide_descriptor(), name, value);
}
enum OrderType {
  OrderType_Unknown = 0,
  OrderType_Normal = 1,
  OrderType_Market = 2,
  OrderType_AbsoluteLimit = 5,
  OrderType_Auction = 6,
  OrderType_AuctionLimit = 7,
  OrderType_SpecialLimit = 8,
  OrderType_SpecialLimit_All = 9
};
bool OrderType_IsValid(int value);
const OrderType OrderType_MIN = OrderType_Unknown;
const OrderType OrderType_MAX = OrderType_SpecialLimit_All;
const int OrderType_ARRAYSIZE = OrderType_MAX + 1;

const ::google::protobuf::EnumDescriptor* OrderType_descriptor();
inline const ::std::string& OrderType_Name(OrderType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OrderType_descriptor(), value);
}
inline bool OrderType_Parse(
    const ::std::string& name, OrderType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OrderType>(
    OrderType_descriptor(), name, value);
}
enum OrderStatus {
  OrderStatus_Unsubmitted = 0,
  OrderStatus_Unknown = -1,
  OrderStatus_WaitingSubmit = 1,
  OrderStatus_Submitting = 2,
  OrderStatus_SubmitFailed = 3,
  OrderStatus_TimeOut = 4,
  OrderStatus_Submitted = 5,
  OrderStatus_Filled_Part = 10,
  OrderStatus_Filled_All = 11,
  OrderStatus_Cancelling_Part = 12,
  OrderStatus_Cancelling_All = 13,
  OrderStatus_Cancelled_Part = 14,
  OrderStatus_Cancelled_All = 15,
  OrderStatus_Failed = 21,
  OrderStatus_Disabled = 22,
  OrderStatus_Deleted = 23,
  OrderStatus_FillCancelled = 24
};
bool OrderStatus_IsValid(int value);
const OrderStatus OrderStatus_MIN = OrderStatus_Unknown;
const OrderStatus OrderStatus_MAX = OrderStatus_FillCancelled;
const int OrderStatus_ARRAYSIZE = OrderStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* OrderStatus_descriptor();
inline const ::std::string& OrderStatus_Name(OrderStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    OrderStatus_descriptor(), value);
}
inline bool OrderStatus_Parse(
    const ::std::string& name, OrderStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OrderStatus>(
    OrderStatus_descriptor(), name, value);
}
enum OrderFillStatus {
  OrderFillStatus_OK = 0,
  OrderFillStatus_Cancelled = 1,
  OrderFillStatus_Changed = 2
};
bool OrderFillStatus_IsValid(int value);
const OrderFillStatus OrderFillStatus_MIN = OrderFillStatus_OK;
const OrderFillStatus OrderFillStatus_MAX = OrderFillStatus_Changed;
const int OrderFillStatus_ARRAYSIZE = OrderFillStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* OrderFillStatus_descriptor();
inline const ::std::string& OrderFillStatus_Name(OrderFillStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    OrderFillStatus_descriptor(), value);
}
inline bool OrderFillStatus_Parse(
    const ::std::string& name, OrderFillStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OrderFillStatus>(
    OrderFillStatus_descriptor(), name, value);
}
enum PositionSide {
  PositionSide_Long = 0,
  PositionSide_Unknown = -1,
  PositionSide_Short = 1
};
bool PositionSide_IsValid(int value);
const PositionSide PositionSide_MIN = PositionSide_Unknown;
const PositionSide PositionSide_MAX = PositionSide_Short;
const int PositionSide_ARRAYSIZE = PositionSide_MAX + 1;

const ::google::protobuf::EnumDescriptor* PositionSide_descriptor();
inline const ::std::string& PositionSide_Name(PositionSide value) {
  return ::google::protobuf::internal::NameOfEnum(
    PositionSide_descriptor(), value);
}
inline bool PositionSide_Parse(
    const ::std::string& name, PositionSide* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PositionSide>(
    PositionSide_descriptor(), name, value);
}
enum ModifyOrderOp {
  ModifyOrderOp_Unknown = 0,
  ModifyOrderOp_Normal = 1,
  ModifyOrderOp_Cancel = 2,
  ModifyOrderOp_Disable = 3,
  ModifyOrderOp_Enable = 4,
  ModifyOrderOp_Delete = 5
};
bool ModifyOrderOp_IsValid(int value);
const ModifyOrderOp ModifyOrderOp_MIN = ModifyOrderOp_Unknown;
const ModifyOrderOp ModifyOrderOp_MAX = ModifyOrderOp_Delete;
const int ModifyOrderOp_ARRAYSIZE = ModifyOrderOp_MAX + 1;

const ::google::protobuf::EnumDescriptor* ModifyOrderOp_descriptor();
inline const ::std::string& ModifyOrderOp_Name(ModifyOrderOp value) {
  return ::google::protobuf::internal::NameOfEnum(
    ModifyOrderOp_descriptor(), value);
}
inline bool ModifyOrderOp_Parse(
    const ::std::string& name, ModifyOrderOp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ModifyOrderOp>(
    ModifyOrderOp_descriptor(), name, value);
}
enum TrdAccType {
  TrdAccType_Unknown = 0,
  TrdAccType_Cash = 1,
  TrdAccType_Margin = 2
};
bool TrdAccType_IsValid(int value);
const TrdAccType TrdAccType_MIN = TrdAccType_Unknown;
const TrdAccType TrdAccType_MAX = TrdAccType_Margin;
const int TrdAccType_ARRAYSIZE = TrdAccType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TrdAccType_descriptor();
inline const ::std::string& TrdAccType_Name(TrdAccType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrdAccType_descriptor(), value);
}
inline bool TrdAccType_Parse(
    const ::std::string& name, TrdAccType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrdAccType>(
    TrdAccType_descriptor(), name, value);
}
enum Currency {
  Currency_Unknown = 0,
  Currency_HKD = 1,
  Currency_USD = 2,
  Currency_CNH = 3
};
bool Currency_IsValid(int value);
const Currency Currency_MIN = Currency_Unknown;
const Currency Currency_MAX = Currency_CNH;
const int Currency_ARRAYSIZE = Currency_MAX + 1;

const ::google::protobuf::EnumDescriptor* Currency_descriptor();
inline const ::std::string& Currency_Name(Currency value) {
  return ::google::protobuf::internal::NameOfEnum(
    Currency_descriptor(), value);
}
inline bool Currency_Parse(
    const ::std::string& name, Currency* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Currency>(
    Currency_descriptor(), name, value);
}
enum CltRiskLevel {
  CltRiskLevel_Unknown = -1,
  CltRiskLevel_Safe = 0,
  CltRiskLevel_Warning = 1,
  CltRiskLevel_Danger = 2,
  CltRiskLevel_AbsoluteSafe = 3,
  CltRiskLevel_OptDanger = 4
};
bool CltRiskLevel_IsValid(int value);
const CltRiskLevel CltRiskLevel_MIN = CltRiskLevel_Unknown;
const CltRiskLevel CltRiskLevel_MAX = CltRiskLevel_OptDanger;
const int CltRiskLevel_ARRAYSIZE = CltRiskLevel_MAX + 1;

const ::google::protobuf::EnumDescriptor* CltRiskLevel_descriptor();
inline const ::std::string& CltRiskLevel_Name(CltRiskLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    CltRiskLevel_descriptor(), value);
}
inline bool CltRiskLevel_Parse(
    const ::std::string& name, CltRiskLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CltRiskLevel>(
    CltRiskLevel_descriptor(), name, value);
}
// ===================================================================

class AccCashInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Trd_Common.AccCashInfo) */ {
 public:
  AccCashInfo();
  virtual ~AccCashInfo();

  AccCashInfo(const AccCashInfo& from);

  inline AccCashInfo& operator=(const AccCashInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AccCashInfo(AccCashInfo&& from) noexcept
    : AccCashInfo() {
    *this = ::std::move(from);
  }

  inline AccCashInfo& operator=(AccCashInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccCashInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccCashInfo* internal_default_instance() {
    return reinterpret_cast<const AccCashInfo*>(
               &_AccCashInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(AccCashInfo* other);
  friend void swap(AccCashInfo& a, AccCashInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccCashInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  AccCashInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AccCashInfo& from);
  void MergeFrom(const AccCashInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AccCashInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double cash = 2;
  bool has_cash() const;
  void clear_cash();
  static const int kCashFieldNumber = 2;
  double cash() const;
  void set_cash(double value);

  // optional double availableBalance = 3;
  bool has_availablebalance() const;
  void clear_availablebalance();
  static const int kAvailableBalanceFieldNumber = 3;
  double availablebalance() const;
  void set_availablebalance(double value);

  // optional int32 currency = 1;
  bool has_currency() const;
  void clear_currency();
  static const int kCurrencyFieldNumber = 1;
  ::google::protobuf::int32 currency() const;
  void set_currency(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Trd_Common.AccCashInfo)
 private:
  void set_has_currency();
  void clear_has_currency();
  void set_has_cash();
  void clear_has_cash();
  void set_has_availablebalance();
  void clear_has_availablebalance();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double cash_;
  double availablebalance_;
  ::google::protobuf::int32 currency_;
  friend struct ::protobuf_Trd_5fCommon_2eproto::TableStruct;
  friend void ::protobuf_Trd_5fCommon_2eproto::InitDefaultsAccCashInfoImpl();
};
// -------------------------------------------------------------------

class TrdHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Trd_Common.TrdHeader) */ {
 public:
  TrdHeader();
  virtual ~TrdHeader();

  TrdHeader(const TrdHeader& from);

  inline TrdHeader& operator=(const TrdHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrdHeader(TrdHeader&& from) noexcept
    : TrdHeader() {
    *this = ::std::move(from);
  }

  inline TrdHeader& operator=(TrdHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrdHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrdHeader* internal_default_instance() {
    return reinterpret_cast<const TrdHeader*>(
               &_TrdHeader_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(TrdHeader* other);
  friend void swap(TrdHeader& a, TrdHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrdHeader* New() const PROTOBUF_FINAL { return New(NULL); }

  TrdHeader* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrdHeader& from);
  void MergeFrom(const TrdHeader& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrdHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 accID = 2;
  bool has_accid() const;
  void clear_accid();
  static const int kAccIDFieldNumber = 2;
  ::google::protobuf::uint64 accid() const;
  void set_accid(::google::protobuf::uint64 value);

  // required int32 trdEnv = 1;
  bool has_trdenv() const;
  void clear_trdenv();
  static const int kTrdEnvFieldNumber = 1;
  ::google::protobuf::int32 trdenv() const;
  void set_trdenv(::google::protobuf::int32 value);

  // required int32 trdMarket = 3;
  bool has_trdmarket() const;
  void clear_trdmarket();
  static const int kTrdMarketFieldNumber = 3;
  ::google::protobuf::int32 trdmarket() const;
  void set_trdmarket(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Trd_Common.TrdHeader)
 private:
  void set_has_trdenv();
  void clear_has_trdenv();
  void set_has_accid();
  void clear_has_accid();
  void set_has_trdmarket();
  void clear_has_trdmarket();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 accid_;
  ::google::protobuf::int32 trdenv_;
  ::google::protobuf::int32 trdmarket_;
  friend struct ::protobuf_Trd_5fCommon_2eproto::TableStruct;
  friend void ::protobuf_Trd_5fCommon_2eproto::InitDefaultsTrdHeaderImpl();
};
// -------------------------------------------------------------------

class TrdAcc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Trd_Common.TrdAcc) */ {
 public:
  TrdAcc();
  virtual ~TrdAcc();

  TrdAcc(const TrdAcc& from);

  inline TrdAcc& operator=(const TrdAcc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrdAcc(TrdAcc&& from) noexcept
    : TrdAcc() {
    *this = ::std::move(from);
  }

  inline TrdAcc& operator=(TrdAcc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrdAcc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrdAcc* internal_default_instance() {
    return reinterpret_cast<const TrdAcc*>(
               &_TrdAcc_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(TrdAcc* other);
  friend void swap(TrdAcc& a, TrdAcc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrdAcc* New() const PROTOBUF_FINAL { return New(NULL); }

  TrdAcc* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrdAcc& from);
  void MergeFrom(const TrdAcc& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrdAcc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 trdMarketAuthList = 3;
  int trdmarketauthlist_size() const;
  void clear_trdmarketauthlist();
  static const int kTrdMarketAuthListFieldNumber = 3;
  ::google::protobuf::int32 trdmarketauthlist(int index) const;
  void set_trdmarketauthlist(int index, ::google::protobuf::int32 value);
  void add_trdmarketauthlist(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      trdmarketauthlist() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_trdmarketauthlist();

  // optional string cardNum = 5;
  bool has_cardnum() const;
  void clear_cardnum();
  static const int kCardNumFieldNumber = 5;
  const ::std::string& cardnum() const;
  void set_cardnum(const ::std::string& value);
  #if LANG_CXX11
  void set_cardnum(::std::string&& value);
  #endif
  void set_cardnum(const char* value);
  void set_cardnum(const char* value, size_t size);
  ::std::string* mutable_cardnum();
  ::std::string* release_cardnum();
  void set_allocated_cardnum(::std::string* cardnum);

  // required uint64 accID = 2;
  bool has_accid() const;
  void clear_accid();
  static const int kAccIDFieldNumber = 2;
  ::google::protobuf::uint64 accid() const;
  void set_accid(::google::protobuf::uint64 value);

  // required int32 trdEnv = 1;
  bool has_trdenv() const;
  void clear_trdenv();
  static const int kTrdEnvFieldNumber = 1;
  ::google::protobuf::int32 trdenv() const;
  void set_trdenv(::google::protobuf::int32 value);

  // optional int32 accType = 4;
  bool has_acctype() const;
  void clear_acctype();
  static const int kAccTypeFieldNumber = 4;
  ::google::protobuf::int32 acctype() const;
  void set_acctype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Trd_Common.TrdAcc)
 private:
  void set_has_trdenv();
  void clear_has_trdenv();
  void set_has_accid();
  void clear_has_accid();
  void set_has_acctype();
  void clear_has_acctype();
  void set_has_cardnum();
  void clear_has_cardnum();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > trdmarketauthlist_;
  ::google::protobuf::internal::ArenaStringPtr cardnum_;
  ::google::protobuf::uint64 accid_;
  ::google::protobuf::int32 trdenv_;
  ::google::protobuf::int32 acctype_;
  friend struct ::protobuf_Trd_5fCommon_2eproto::TableStruct;
  friend void ::protobuf_Trd_5fCommon_2eproto::InitDefaultsTrdAccImpl();
};
// -------------------------------------------------------------------

class Funds : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Trd_Common.Funds) */ {
 public:
  Funds();
  virtual ~Funds();

  Funds(const Funds& from);

  inline Funds& operator=(const Funds& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Funds(Funds&& from) noexcept
    : Funds() {
    *this = ::std::move(from);
  }

  inline Funds& operator=(Funds&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Funds& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Funds* internal_default_instance() {
    return reinterpret_cast<const Funds*>(
               &_Funds_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Funds* other);
  friend void swap(Funds& a, Funds& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Funds* New() const PROTOBUF_FINAL { return New(NULL); }

  Funds* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Funds& from);
  void MergeFrom(const Funds& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Funds* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Trd_Common.AccCashInfo cashInfoList = 15;
  int cashinfolist_size() const;
  void clear_cashinfolist();
  static const int kCashInfoListFieldNumber = 15;
  const ::Trd_Common::AccCashInfo& cashinfolist(int index) const;
  ::Trd_Common::AccCashInfo* mutable_cashinfolist(int index);
  ::Trd_Common::AccCashInfo* add_cashinfolist();
  ::google::protobuf::RepeatedPtrField< ::Trd_Common::AccCashInfo >*
      mutable_cashinfolist();
  const ::google::protobuf::RepeatedPtrField< ::Trd_Common::AccCashInfo >&
      cashinfolist() const;

  // required double power = 1;
  bool has_power() const;
  void clear_power();
  static const int kPowerFieldNumber = 1;
  double power() const;
  void set_power(double value);

  // required double totalAssets = 2;
  bool has_totalassets() const;
  void clear_totalassets();
  static const int kTotalAssetsFieldNumber = 2;
  double totalassets() const;
  void set_totalassets(double value);

  // required double cash = 3;
  bool has_cash() const;
  void clear_cash();
  static const int kCashFieldNumber = 3;
  double cash() const;
  void set_cash(double value);

  // required double marketVal = 4;
  bool has_marketval() const;
  void clear_marketval();
  static const int kMarketValFieldNumber = 4;
  double marketval() const;
  void set_marketval(double value);

  // required double frozenCash = 5;
  bool has_frozencash() const;
  void clear_frozencash();
  static const int kFrozenCashFieldNumber = 5;
  double frozencash() const;
  void set_frozencash(double value);

  // required double debtCash = 6;
  bool has_debtcash() const;
  void clear_debtcash();
  static const int kDebtCashFieldNumber = 6;
  double debtcash() const;
  void set_debtcash(double value);

  // required double avlWithdrawalCash = 7;
  bool has_avlwithdrawalcash() const;
  void clear_avlwithdrawalcash();
  static const int kAvlWithdrawalCashFieldNumber = 7;
  double avlwithdrawalcash() const;
  void set_avlwithdrawalcash(double value);

  // optional double availableFunds = 9;
  bool has_availablefunds() const;
  void clear_availablefunds();
  static const int kAvailableFundsFieldNumber = 9;
  double availablefunds() const;
  void set_availablefunds(double value);

  // optional double unrealizedPL = 10;
  bool has_unrealizedpl() const;
  void clear_unrealizedpl();
  static const int kUnrealizedPLFieldNumber = 10;
  double unrealizedpl() const;
  void set_unrealizedpl(double value);

  // optional int32 currency = 8;
  bool has_currency() const;
  void clear_currency();
  static const int kCurrencyFieldNumber = 8;
  ::google::protobuf::int32 currency() const;
  void set_currency(::google::protobuf::int32 value);

  // optional int32 riskLevel = 12;
  bool has_risklevel() const;
  void clear_risklevel();
  static const int kRiskLevelFieldNumber = 12;
  ::google::protobuf::int32 risklevel() const;
  void set_risklevel(::google::protobuf::int32 value);

  // optional double realizedPL = 11;
  bool has_realizedpl() const;
  void clear_realizedpl();
  static const int kRealizedPLFieldNumber = 11;
  double realizedpl() const;
  void set_realizedpl(double value);

  // optional double initialMargin = 13;
  bool has_initialmargin() const;
  void clear_initialmargin();
  static const int kInitialMarginFieldNumber = 13;
  double initialmargin() const;
  void set_initialmargin(double value);

  // optional double maintenanceMargin = 14;
  bool has_maintenancemargin() const;
  void clear_maintenancemargin();
  static const int kMaintenanceMarginFieldNumber = 14;
  double maintenancemargin() const;
  void set_maintenancemargin(double value);

  // @@protoc_insertion_point(class_scope:Trd_Common.Funds)
 private:
  void set_has_power();
  void clear_has_power();
  void set_has_totalassets();
  void clear_has_totalassets();
  void set_has_cash();
  void clear_has_cash();
  void set_has_marketval();
  void clear_has_marketval();
  void set_has_frozencash();
  void clear_has_frozencash();
  void set_has_debtcash();
  void clear_has_debtcash();
  void set_has_avlwithdrawalcash();
  void clear_has_avlwithdrawalcash();
  void set_has_currency();
  void clear_has_currency();
  void set_has_availablefunds();
  void clear_has_availablefunds();
  void set_has_unrealizedpl();
  void clear_has_unrealizedpl();
  void set_has_realizedpl();
  void clear_has_realizedpl();
  void set_has_risklevel();
  void clear_has_risklevel();
  void set_has_initialmargin();
  void clear_has_initialmargin();
  void set_has_maintenancemargin();
  void clear_has_maintenancemargin();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Trd_Common::AccCashInfo > cashinfolist_;
  double power_;
  double totalassets_;
  double cash_;
  double marketval_;
  double frozencash_;
  double debtcash_;
  double avlwithdrawalcash_;
  double availablefunds_;
  double unrealizedpl_;
  ::google::protobuf::int32 currency_;
  ::google::protobuf::int32 risklevel_;
  double realizedpl_;
  double initialmargin_;
  double maintenancemargin_;
  friend struct ::protobuf_Trd_5fCommon_2eproto::TableStruct;
  friend void ::protobuf_Trd_5fCommon_2eproto::InitDefaultsFundsImpl();
};
// -------------------------------------------------------------------

class Position : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Trd_Common.Position) */ {
 public:
  Position();
  virtual ~Position();

  Position(const Position& from);

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(Position&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Position* other);
  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const PROTOBUF_FINAL { return New(NULL); }

  Position* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Position* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string code = 3;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 3;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // required string name = 4;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required uint64 positionID = 1;
  bool has_positionid() const;
  void clear_positionid();
  static const int kPositionIDFieldNumber = 1;
  ::google::protobuf::uint64 positionid() const;
  void set_positionid(::google::protobuf::uint64 value);

  // required double qty = 5;
  bool has_qty() const;
  void clear_qty();
  static const int kQtyFieldNumber = 5;
  double qty() const;
  void set_qty(double value);

  // required double canSellQty = 6;
  bool has_cansellqty() const;
  void clear_cansellqty();
  static const int kCanSellQtyFieldNumber = 6;
  double cansellqty() const;
  void set_cansellqty(double value);

  // required double price = 7;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 7;
  double price() const;
  void set_price(double value);

  // required int32 positionSide = 2;
  bool has_positionside() const;
  void clear_positionside();
  static const int kPositionSideFieldNumber = 2;
  ::google::protobuf::int32 positionside() const;
  void set_positionside(::google::protobuf::int32 value);

  // optional int32 secMarket = 12;
  bool has_secmarket() const;
  void clear_secmarket();
  static const int kSecMarketFieldNumber = 12;
  ::google::protobuf::int32 secmarket() const;
  void set_secmarket(::google::protobuf::int32 value);

  // optional double costPrice = 8;
  bool has_costprice() const;
  void clear_costprice();
  static const int kCostPriceFieldNumber = 8;
  double costprice() const;
  void set_costprice(double value);

  // required double val = 9;
  bool has_val() const;
  void clear_val();
  static const int kValFieldNumber = 9;
  double val() const;
  void set_val(double value);

  // required double plVal = 10;
  bool has_plval() const;
  void clear_plval();
  static const int kPlValFieldNumber = 10;
  double plval() const;
  void set_plval(double value);

  // optional double plRatio = 11;
  bool has_plratio() const;
  void clear_plratio();
  static const int kPlRatioFieldNumber = 11;
  double plratio() const;
  void set_plratio(double value);

  // optional double td_plVal = 21;
  bool has_td_plval() const;
  void clear_td_plval();
  static const int kTdPlValFieldNumber = 21;
  double td_plval() const;
  void set_td_plval(double value);

  // optional double td_trdVal = 22;
  bool has_td_trdval() const;
  void clear_td_trdval();
  static const int kTdTrdValFieldNumber = 22;
  double td_trdval() const;
  void set_td_trdval(double value);

  // optional double td_buyVal = 23;
  bool has_td_buyval() const;
  void clear_td_buyval();
  static const int kTdBuyValFieldNumber = 23;
  double td_buyval() const;
  void set_td_buyval(double value);

  // optional double td_buyQty = 24;
  bool has_td_buyqty() const;
  void clear_td_buyqty();
  static const int kTdBuyQtyFieldNumber = 24;
  double td_buyqty() const;
  void set_td_buyqty(double value);

  // optional double td_sellVal = 25;
  bool has_td_sellval() const;
  void clear_td_sellval();
  static const int kTdSellValFieldNumber = 25;
  double td_sellval() const;
  void set_td_sellval(double value);

  // optional double td_sellQty = 26;
  bool has_td_sellqty() const;
  void clear_td_sellqty();
  static const int kTdSellQtyFieldNumber = 26;
  double td_sellqty() const;
  void set_td_sellqty(double value);

  // optional double unrealizedPL = 28;
  bool has_unrealizedpl() const;
  void clear_unrealizedpl();
  static const int kUnrealizedPLFieldNumber = 28;
  double unrealizedpl() const;
  void set_unrealizedpl(double value);

  // optional double realizedPL = 29;
  bool has_realizedpl() const;
  void clear_realizedpl();
  static const int kRealizedPLFieldNumber = 29;
  double realizedpl() const;
  void set_realizedpl(double value);

  // @@protoc_insertion_point(class_scope:Trd_Common.Position)
 private:
  void set_has_positionid();
  void clear_has_positionid();
  void set_has_positionside();
  void clear_has_positionside();
  void set_has_code();
  void clear_has_code();
  void set_has_name();
  void clear_has_name();
  void set_has_qty();
  void clear_has_qty();
  void set_has_cansellqty();
  void clear_has_cansellqty();
  void set_has_price();
  void clear_has_price();
  void set_has_costprice();
  void clear_has_costprice();
  void set_has_val();
  void clear_has_val();
  void set_has_plval();
  void clear_has_plval();
  void set_has_plratio();
  void clear_has_plratio();
  void set_has_secmarket();
  void clear_has_secmarket();
  void set_has_td_plval();
  void clear_has_td_plval();
  void set_has_td_trdval();
  void clear_has_td_trdval();
  void set_has_td_buyval();
  void clear_has_td_buyval();
  void set_has_td_buyqty();
  void clear_has_td_buyqty();
  void set_has_td_sellval();
  void clear_has_td_sellval();
  void set_has_td_sellqty();
  void clear_has_td_sellqty();
  void set_has_unrealizedpl();
  void clear_has_unrealizedpl();
  void set_has_realizedpl();
  void clear_has_realizedpl();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 positionid_;
  double qty_;
  double cansellqty_;
  double price_;
  ::google::protobuf::int32 positionside_;
  ::google::protobuf::int32 secmarket_;
  double costprice_;
  double val_;
  double plval_;
  double plratio_;
  double td_plval_;
  double td_trdval_;
  double td_buyval_;
  double td_buyqty_;
  double td_sellval_;
  double td_sellqty_;
  double unrealizedpl_;
  double realizedpl_;
  friend struct ::protobuf_Trd_5fCommon_2eproto::TableStruct;
  friend void ::protobuf_Trd_5fCommon_2eproto::InitDefaultsPositionImpl();
};
// -------------------------------------------------------------------

class Order : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Trd_Common.Order) */ {
 public:
  Order();
  virtual ~Order();

  Order(const Order& from);

  inline Order& operator=(const Order& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Order(Order&& from) noexcept
    : Order() {
    *this = ::std::move(from);
  }

  inline Order& operator=(Order&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Order& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Order* internal_default_instance() {
    return reinterpret_cast<const Order*>(
               &_Order_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Order* other);
  friend void swap(Order& a, Order& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Order* New() const PROTOBUF_FINAL { return New(NULL); }

  Order* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Order& from);
  void MergeFrom(const Order& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Order* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string orderIDEx = 5;
  bool has_orderidex() const;
  void clear_orderidex();
  static const int kOrderIDExFieldNumber = 5;
  const ::std::string& orderidex() const;
  void set_orderidex(const ::std::string& value);
  #if LANG_CXX11
  void set_orderidex(::std::string&& value);
  #endif
  void set_orderidex(const char* value);
  void set_orderidex(const char* value, size_t size);
  ::std::string* mutable_orderidex();
  ::std::string* release_orderidex();
  void set_allocated_orderidex(::std::string* orderidex);

  // required string code = 6;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 6;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // required string name = 7;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 7;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string createTime = 10;
  bool has_createtime() const;
  void clear_createtime();
  static const int kCreateTimeFieldNumber = 10;
  const ::std::string& createtime() const;
  void set_createtime(const ::std::string& value);
  #if LANG_CXX11
  void set_createtime(::std::string&& value);
  #endif
  void set_createtime(const char* value);
  void set_createtime(const char* value, size_t size);
  ::std::string* mutable_createtime();
  ::std::string* release_createtime();
  void set_allocated_createtime(::std::string* createtime);

  // required string updateTime = 11;
  bool has_updatetime() const;
  void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 11;
  const ::std::string& updatetime() const;
  void set_updatetime(const ::std::string& value);
  #if LANG_CXX11
  void set_updatetime(::std::string&& value);
  #endif
  void set_updatetime(const char* value);
  void set_updatetime(const char* value, size_t size);
  ::std::string* mutable_updatetime();
  ::std::string* release_updatetime();
  void set_allocated_updatetime(::std::string* updatetime);

  // optional string lastErrMsg = 14;
  bool has_lasterrmsg() const;
  void clear_lasterrmsg();
  static const int kLastErrMsgFieldNumber = 14;
  const ::std::string& lasterrmsg() const;
  void set_lasterrmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_lasterrmsg(::std::string&& value);
  #endif
  void set_lasterrmsg(const char* value);
  void set_lasterrmsg(const char* value, size_t size);
  ::std::string* mutable_lasterrmsg();
  ::std::string* release_lasterrmsg();
  void set_allocated_lasterrmsg(::std::string* lasterrmsg);

  // optional string remark = 18;
  bool has_remark() const;
  void clear_remark();
  static const int kRemarkFieldNumber = 18;
  const ::std::string& remark() const;
  void set_remark(const ::std::string& value);
  #if LANG_CXX11
  void set_remark(::std::string&& value);
  #endif
  void set_remark(const char* value);
  void set_remark(const char* value, size_t size);
  ::std::string* mutable_remark();
  ::std::string* release_remark();
  void set_allocated_remark(::std::string* remark);

  // required int32 trdSide = 1;
  bool has_trdside() const;
  void clear_trdside();
  static const int kTrdSideFieldNumber = 1;
  ::google::protobuf::int32 trdside() const;
  void set_trdside(::google::protobuf::int32 value);

  // required int32 orderType = 2;
  bool has_ordertype() const;
  void clear_ordertype();
  static const int kOrderTypeFieldNumber = 2;
  ::google::protobuf::int32 ordertype() const;
  void set_ordertype(::google::protobuf::int32 value);

  // required uint64 orderID = 4;
  bool has_orderid() const;
  void clear_orderid();
  static const int kOrderIDFieldNumber = 4;
  ::google::protobuf::uint64 orderid() const;
  void set_orderid(::google::protobuf::uint64 value);

  // required double qty = 8;
  bool has_qty() const;
  void clear_qty();
  static const int kQtyFieldNumber = 8;
  double qty() const;
  void set_qty(double value);

  // optional double price = 9;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 9;
  double price() const;
  void set_price(double value);

  // required int32 orderStatus = 3;
  bool has_orderstatus() const;
  void clear_orderstatus();
  static const int kOrderStatusFieldNumber = 3;
  ::google::protobuf::int32 orderstatus() const;
  void set_orderstatus(::google::protobuf::int32 value);

  // optional int32 secMarket = 15;
  bool has_secmarket() const;
  void clear_secmarket();
  static const int kSecMarketFieldNumber = 15;
  ::google::protobuf::int32 secmarket() const;
  void set_secmarket(::google::protobuf::int32 value);

  // optional double fillQty = 12;
  bool has_fillqty() const;
  void clear_fillqty();
  static const int kFillQtyFieldNumber = 12;
  double fillqty() const;
  void set_fillqty(double value);

  // optional double fillAvgPrice = 13;
  bool has_fillavgprice() const;
  void clear_fillavgprice();
  static const int kFillAvgPriceFieldNumber = 13;
  double fillavgprice() const;
  void set_fillavgprice(double value);

  // optional double createTimestamp = 16;
  bool has_createtimestamp() const;
  void clear_createtimestamp();
  static const int kCreateTimestampFieldNumber = 16;
  double createtimestamp() const;
  void set_createtimestamp(double value);

  // optional double updateTimestamp = 17;
  bool has_updatetimestamp() const;
  void clear_updatetimestamp();
  static const int kUpdateTimestampFieldNumber = 17;
  double updatetimestamp() const;
  void set_updatetimestamp(double value);

  // @@protoc_insertion_point(class_scope:Trd_Common.Order)
 private:
  void set_has_trdside();
  void clear_has_trdside();
  void set_has_ordertype();
  void clear_has_ordertype();
  void set_has_orderstatus();
  void clear_has_orderstatus();
  void set_has_orderid();
  void clear_has_orderid();
  void set_has_orderidex();
  void clear_has_orderidex();
  void set_has_code();
  void clear_has_code();
  void set_has_name();
  void clear_has_name();
  void set_has_qty();
  void clear_has_qty();
  void set_has_price();
  void clear_has_price();
  void set_has_createtime();
  void clear_has_createtime();
  void set_has_updatetime();
  void clear_has_updatetime();
  void set_has_fillqty();
  void clear_has_fillqty();
  void set_has_fillavgprice();
  void clear_has_fillavgprice();
  void set_has_lasterrmsg();
  void clear_has_lasterrmsg();
  void set_has_secmarket();
  void clear_has_secmarket();
  void set_has_createtimestamp();
  void clear_has_createtimestamp();
  void set_has_updatetimestamp();
  void clear_has_updatetimestamp();
  void set_has_remark();
  void clear_has_remark();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr orderidex_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr createtime_;
  ::google::protobuf::internal::ArenaStringPtr updatetime_;
  ::google::protobuf::internal::ArenaStringPtr lasterrmsg_;
  ::google::protobuf::internal::ArenaStringPtr remark_;
  ::google::protobuf::int32 trdside_;
  ::google::protobuf::int32 ordertype_;
  ::google::protobuf::uint64 orderid_;
  double qty_;
  double price_;
  ::google::protobuf::int32 orderstatus_;
  ::google::protobuf::int32 secmarket_;
  double fillqty_;
  double fillavgprice_;
  double createtimestamp_;
  double updatetimestamp_;
  friend struct ::protobuf_Trd_5fCommon_2eproto::TableStruct;
  friend void ::protobuf_Trd_5fCommon_2eproto::InitDefaultsOrderImpl();
};
// -------------------------------------------------------------------

class OrderFill : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Trd_Common.OrderFill) */ {
 public:
  OrderFill();
  virtual ~OrderFill();

  OrderFill(const OrderFill& from);

  inline OrderFill& operator=(const OrderFill& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OrderFill(OrderFill&& from) noexcept
    : OrderFill() {
    *this = ::std::move(from);
  }

  inline OrderFill& operator=(OrderFill&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OrderFill& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrderFill* internal_default_instance() {
    return reinterpret_cast<const OrderFill*>(
               &_OrderFill_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(OrderFill* other);
  friend void swap(OrderFill& a, OrderFill& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OrderFill* New() const PROTOBUF_FINAL { return New(NULL); }

  OrderFill* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OrderFill& from);
  void MergeFrom(const OrderFill& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OrderFill* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string fillIDEx = 3;
  bool has_fillidex() const;
  void clear_fillidex();
  static const int kFillIDExFieldNumber = 3;
  const ::std::string& fillidex() const;
  void set_fillidex(const ::std::string& value);
  #if LANG_CXX11
  void set_fillidex(::std::string&& value);
  #endif
  void set_fillidex(const char* value);
  void set_fillidex(const char* value, size_t size);
  ::std::string* mutable_fillidex();
  ::std::string* release_fillidex();
  void set_allocated_fillidex(::std::string* fillidex);

  // optional string orderIDEx = 5;
  bool has_orderidex() const;
  void clear_orderidex();
  static const int kOrderIDExFieldNumber = 5;
  const ::std::string& orderidex() const;
  void set_orderidex(const ::std::string& value);
  #if LANG_CXX11
  void set_orderidex(::std::string&& value);
  #endif
  void set_orderidex(const char* value);
  void set_orderidex(const char* value, size_t size);
  ::std::string* mutable_orderidex();
  ::std::string* release_orderidex();
  void set_allocated_orderidex(::std::string* orderidex);

  // required string code = 6;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 6;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // required string name = 7;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 7;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string createTime = 10;
  bool has_createtime() const;
  void clear_createtime();
  static const int kCreateTimeFieldNumber = 10;
  const ::std::string& createtime() const;
  void set_createtime(const ::std::string& value);
  #if LANG_CXX11
  void set_createtime(::std::string&& value);
  #endif
  void set_createtime(const char* value);
  void set_createtime(const char* value, size_t size);
  ::std::string* mutable_createtime();
  ::std::string* release_createtime();
  void set_allocated_createtime(::std::string* createtime);

  // optional string counterBrokerName = 12;
  bool has_counterbrokername() const;
  void clear_counterbrokername();
  static const int kCounterBrokerNameFieldNumber = 12;
  const ::std::string& counterbrokername() const;
  void set_counterbrokername(const ::std::string& value);
  #if LANG_CXX11
  void set_counterbrokername(::std::string&& value);
  #endif
  void set_counterbrokername(const char* value);
  void set_counterbrokername(const char* value, size_t size);
  ::std::string* mutable_counterbrokername();
  ::std::string* release_counterbrokername();
  void set_allocated_counterbrokername(::std::string* counterbrokername);

  // required uint64 fillID = 2;
  bool has_fillid() const;
  void clear_fillid();
  static const int kFillIDFieldNumber = 2;
  ::google::protobuf::uint64 fillid() const;
  void set_fillid(::google::protobuf::uint64 value);

  // optional uint64 orderID = 4;
  bool has_orderid() const;
  void clear_orderid();
  static const int kOrderIDFieldNumber = 4;
  ::google::protobuf::uint64 orderid() const;
  void set_orderid(::google::protobuf::uint64 value);

  // required int32 trdSide = 1;
  bool has_trdside() const;
  void clear_trdside();
  static const int kTrdSideFieldNumber = 1;
  ::google::protobuf::int32 trdside() const;
  void set_trdside(::google::protobuf::int32 value);

  // optional int32 counterBrokerID = 11;
  bool has_counterbrokerid() const;
  void clear_counterbrokerid();
  static const int kCounterBrokerIDFieldNumber = 11;
  ::google::protobuf::int32 counterbrokerid() const;
  void set_counterbrokerid(::google::protobuf::int32 value);

  // required double qty = 8;
  bool has_qty() const;
  void clear_qty();
  static const int kQtyFieldNumber = 8;
  double qty() const;
  void set_qty(double value);

  // required double price = 9;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 9;
  double price() const;
  void set_price(double value);

  // optional double createTimestamp = 14;
  bool has_createtimestamp() const;
  void clear_createtimestamp();
  static const int kCreateTimestampFieldNumber = 14;
  double createtimestamp() const;
  void set_createtimestamp(double value);

  // optional int32 secMarket = 13;
  bool has_secmarket() const;
  void clear_secmarket();
  static const int kSecMarketFieldNumber = 13;
  ::google::protobuf::int32 secmarket() const;
  void set_secmarket(::google::protobuf::int32 value);

  // optional int32 status = 16;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 16;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // optional double updateTimestamp = 15;
  bool has_updatetimestamp() const;
  void clear_updatetimestamp();
  static const int kUpdateTimestampFieldNumber = 15;
  double updatetimestamp() const;
  void set_updatetimestamp(double value);

  // @@protoc_insertion_point(class_scope:Trd_Common.OrderFill)
 private:
  void set_has_trdside();
  void clear_has_trdside();
  void set_has_fillid();
  void clear_has_fillid();
  void set_has_fillidex();
  void clear_has_fillidex();
  void set_has_orderid();
  void clear_has_orderid();
  void set_has_orderidex();
  void clear_has_orderidex();
  void set_has_code();
  void clear_has_code();
  void set_has_name();
  void clear_has_name();
  void set_has_qty();
  void clear_has_qty();
  void set_has_price();
  void clear_has_price();
  void set_has_createtime();
  void clear_has_createtime();
  void set_has_counterbrokerid();
  void clear_has_counterbrokerid();
  void set_has_counterbrokername();
  void clear_has_counterbrokername();
  void set_has_secmarket();
  void clear_has_secmarket();
  void set_has_createtimestamp();
  void clear_has_createtimestamp();
  void set_has_updatetimestamp();
  void clear_has_updatetimestamp();
  void set_has_status();
  void clear_has_status();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr fillidex_;
  ::google::protobuf::internal::ArenaStringPtr orderidex_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr createtime_;
  ::google::protobuf::internal::ArenaStringPtr counterbrokername_;
  ::google::protobuf::uint64 fillid_;
  ::google::protobuf::uint64 orderid_;
  ::google::protobuf::int32 trdside_;
  ::google::protobuf::int32 counterbrokerid_;
  double qty_;
  double price_;
  double createtimestamp_;
  ::google::protobuf::int32 secmarket_;
  ::google::protobuf::int32 status_;
  double updatetimestamp_;
  friend struct ::protobuf_Trd_5fCommon_2eproto::TableStruct;
  friend void ::protobuf_Trd_5fCommon_2eproto::InitDefaultsOrderFillImpl();
};
// -------------------------------------------------------------------

class MaxTrdQtys : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Trd_Common.MaxTrdQtys) */ {
 public:
  MaxTrdQtys();
  virtual ~MaxTrdQtys();

  MaxTrdQtys(const MaxTrdQtys& from);

  inline MaxTrdQtys& operator=(const MaxTrdQtys& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MaxTrdQtys(MaxTrdQtys&& from) noexcept
    : MaxTrdQtys() {
    *this = ::std::move(from);
  }

  inline MaxTrdQtys& operator=(MaxTrdQtys&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MaxTrdQtys& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MaxTrdQtys* internal_default_instance() {
    return reinterpret_cast<const MaxTrdQtys*>(
               &_MaxTrdQtys_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(MaxTrdQtys* other);
  friend void swap(MaxTrdQtys& a, MaxTrdQtys& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MaxTrdQtys* New() const PROTOBUF_FINAL { return New(NULL); }

  MaxTrdQtys* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MaxTrdQtys& from);
  void MergeFrom(const MaxTrdQtys& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MaxTrdQtys* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double maxCashBuy = 1;
  bool has_maxcashbuy() const;
  void clear_maxcashbuy();
  static const int kMaxCashBuyFieldNumber = 1;
  double maxcashbuy() const;
  void set_maxcashbuy(double value);

  // optional double maxCashAndMarginBuy = 2;
  bool has_maxcashandmarginbuy() const;
  void clear_maxcashandmarginbuy();
  static const int kMaxCashAndMarginBuyFieldNumber = 2;
  double maxcashandmarginbuy() const;
  void set_maxcashandmarginbuy(double value);

  // required double maxPositionSell = 3;
  bool has_maxpositionsell() const;
  void clear_maxpositionsell();
  static const int kMaxPositionSellFieldNumber = 3;
  double maxpositionsell() const;
  void set_maxpositionsell(double value);

  // optional double maxSellShort = 4;
  bool has_maxsellshort() const;
  void clear_maxsellshort();
  static const int kMaxSellShortFieldNumber = 4;
  double maxsellshort() const;
  void set_maxsellshort(double value);

  // optional double maxBuyBack = 5;
  bool has_maxbuyback() const;
  void clear_maxbuyback();
  static const int kMaxBuyBackFieldNumber = 5;
  double maxbuyback() const;
  void set_maxbuyback(double value);

  // @@protoc_insertion_point(class_scope:Trd_Common.MaxTrdQtys)
 private:
  void set_has_maxcashbuy();
  void clear_has_maxcashbuy();
  void set_has_maxcashandmarginbuy();
  void clear_has_maxcashandmarginbuy();
  void set_has_maxpositionsell();
  void clear_has_maxpositionsell();
  void set_has_maxsellshort();
  void clear_has_maxsellshort();
  void set_has_maxbuyback();
  void clear_has_maxbuyback();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double maxcashbuy_;
  double maxcashandmarginbuy_;
  double maxpositionsell_;
  double maxsellshort_;
  double maxbuyback_;
  friend struct ::protobuf_Trd_5fCommon_2eproto::TableStruct;
  friend void ::protobuf_Trd_5fCommon_2eproto::InitDefaultsMaxTrdQtysImpl();
};
// -------------------------------------------------------------------

class TrdFilterConditions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Trd_Common.TrdFilterConditions) */ {
 public:
  TrdFilterConditions();
  virtual ~TrdFilterConditions();

  TrdFilterConditions(const TrdFilterConditions& from);

  inline TrdFilterConditions& operator=(const TrdFilterConditions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrdFilterConditions(TrdFilterConditions&& from) noexcept
    : TrdFilterConditions() {
    *this = ::std::move(from);
  }

  inline TrdFilterConditions& operator=(TrdFilterConditions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrdFilterConditions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrdFilterConditions* internal_default_instance() {
    return reinterpret_cast<const TrdFilterConditions*>(
               &_TrdFilterConditions_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(TrdFilterConditions* other);
  friend void swap(TrdFilterConditions& a, TrdFilterConditions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrdFilterConditions* New() const PROTOBUF_FINAL { return New(NULL); }

  TrdFilterConditions* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrdFilterConditions& from);
  void MergeFrom(const TrdFilterConditions& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrdFilterConditions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string codeList = 1;
  int codelist_size() const;
  void clear_codelist();
  static const int kCodeListFieldNumber = 1;
  const ::std::string& codelist(int index) const;
  ::std::string* mutable_codelist(int index);
  void set_codelist(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_codelist(int index, ::std::string&& value);
  #endif
  void set_codelist(int index, const char* value);
  void set_codelist(int index, const char* value, size_t size);
  ::std::string* add_codelist();
  void add_codelist(const ::std::string& value);
  #if LANG_CXX11
  void add_codelist(::std::string&& value);
  #endif
  void add_codelist(const char* value);
  void add_codelist(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& codelist() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_codelist();

  // repeated uint64 idList = 2;
  int idlist_size() const;
  void clear_idlist();
  static const int kIdListFieldNumber = 2;
  ::google::protobuf::uint64 idlist(int index) const;
  void set_idlist(int index, ::google::protobuf::uint64 value);
  void add_idlist(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      idlist() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_idlist();

  // optional string beginTime = 3;
  bool has_begintime() const;
  void clear_begintime();
  static const int kBeginTimeFieldNumber = 3;
  const ::std::string& begintime() const;
  void set_begintime(const ::std::string& value);
  #if LANG_CXX11
  void set_begintime(::std::string&& value);
  #endif
  void set_begintime(const char* value);
  void set_begintime(const char* value, size_t size);
  ::std::string* mutable_begintime();
  ::std::string* release_begintime();
  void set_allocated_begintime(::std::string* begintime);

  // optional string endTime = 4;
  bool has_endtime() const;
  void clear_endtime();
  static const int kEndTimeFieldNumber = 4;
  const ::std::string& endtime() const;
  void set_endtime(const ::std::string& value);
  #if LANG_CXX11
  void set_endtime(::std::string&& value);
  #endif
  void set_endtime(const char* value);
  void set_endtime(const char* value, size_t size);
  ::std::string* mutable_endtime();
  ::std::string* release_endtime();
  void set_allocated_endtime(::std::string* endtime);

  // @@protoc_insertion_point(class_scope:Trd_Common.TrdFilterConditions)
 private:
  void set_has_begintime();
  void clear_has_begintime();
  void set_has_endtime();
  void clear_has_endtime();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> codelist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > idlist_;
  ::google::protobuf::internal::ArenaStringPtr begintime_;
  ::google::protobuf::internal::ArenaStringPtr endtime_;
  friend struct ::protobuf_Trd_5fCommon_2eproto::TableStruct;
  friend void ::protobuf_Trd_5fCommon_2eproto::InitDefaultsTrdFilterConditionsImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AccCashInfo

// optional int32 currency = 1;
inline bool AccCashInfo::has_currency() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccCashInfo::set_has_currency() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AccCashInfo::clear_has_currency() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AccCashInfo::clear_currency() {
  currency_ = 0;
  clear_has_currency();
}
inline ::google::protobuf::int32 AccCashInfo::currency() const {
  // @@protoc_insertion_point(field_get:Trd_Common.AccCashInfo.currency)
  return currency_;
}
inline void AccCashInfo::set_currency(::google::protobuf::int32 value) {
  set_has_currency();
  currency_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.AccCashInfo.currency)
}

// optional double cash = 2;
inline bool AccCashInfo::has_cash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccCashInfo::set_has_cash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccCashInfo::clear_has_cash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccCashInfo::clear_cash() {
  cash_ = 0;
  clear_has_cash();
}
inline double AccCashInfo::cash() const {
  // @@protoc_insertion_point(field_get:Trd_Common.AccCashInfo.cash)
  return cash_;
}
inline void AccCashInfo::set_cash(double value) {
  set_has_cash();
  cash_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.AccCashInfo.cash)
}

// optional double availableBalance = 3;
inline bool AccCashInfo::has_availablebalance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccCashInfo::set_has_availablebalance() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccCashInfo::clear_has_availablebalance() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccCashInfo::clear_availablebalance() {
  availablebalance_ = 0;
  clear_has_availablebalance();
}
inline double AccCashInfo::availablebalance() const {
  // @@protoc_insertion_point(field_get:Trd_Common.AccCashInfo.availableBalance)
  return availablebalance_;
}
inline void AccCashInfo::set_availablebalance(double value) {
  set_has_availablebalance();
  availablebalance_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.AccCashInfo.availableBalance)
}

// -------------------------------------------------------------------

// TrdHeader

// required int32 trdEnv = 1;
inline bool TrdHeader::has_trdenv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrdHeader::set_has_trdenv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrdHeader::clear_has_trdenv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrdHeader::clear_trdenv() {
  trdenv_ = 0;
  clear_has_trdenv();
}
inline ::google::protobuf::int32 TrdHeader::trdenv() const {
  // @@protoc_insertion_point(field_get:Trd_Common.TrdHeader.trdEnv)
  return trdenv_;
}
inline void TrdHeader::set_trdenv(::google::protobuf::int32 value) {
  set_has_trdenv();
  trdenv_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.TrdHeader.trdEnv)
}

// required uint64 accID = 2;
inline bool TrdHeader::has_accid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrdHeader::set_has_accid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrdHeader::clear_has_accid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrdHeader::clear_accid() {
  accid_ = GOOGLE_ULONGLONG(0);
  clear_has_accid();
}
inline ::google::protobuf::uint64 TrdHeader::accid() const {
  // @@protoc_insertion_point(field_get:Trd_Common.TrdHeader.accID)
  return accid_;
}
inline void TrdHeader::set_accid(::google::protobuf::uint64 value) {
  set_has_accid();
  accid_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.TrdHeader.accID)
}

// required int32 trdMarket = 3;
inline bool TrdHeader::has_trdmarket() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrdHeader::set_has_trdmarket() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrdHeader::clear_has_trdmarket() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrdHeader::clear_trdmarket() {
  trdmarket_ = 0;
  clear_has_trdmarket();
}
inline ::google::protobuf::int32 TrdHeader::trdmarket() const {
  // @@protoc_insertion_point(field_get:Trd_Common.TrdHeader.trdMarket)
  return trdmarket_;
}
inline void TrdHeader::set_trdmarket(::google::protobuf::int32 value) {
  set_has_trdmarket();
  trdmarket_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.TrdHeader.trdMarket)
}

// -------------------------------------------------------------------

// TrdAcc

// required int32 trdEnv = 1;
inline bool TrdAcc::has_trdenv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrdAcc::set_has_trdenv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrdAcc::clear_has_trdenv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrdAcc::clear_trdenv() {
  trdenv_ = 0;
  clear_has_trdenv();
}
inline ::google::protobuf::int32 TrdAcc::trdenv() const {
  // @@protoc_insertion_point(field_get:Trd_Common.TrdAcc.trdEnv)
  return trdenv_;
}
inline void TrdAcc::set_trdenv(::google::protobuf::int32 value) {
  set_has_trdenv();
  trdenv_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.TrdAcc.trdEnv)
}

// required uint64 accID = 2;
inline bool TrdAcc::has_accid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrdAcc::set_has_accid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrdAcc::clear_has_accid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrdAcc::clear_accid() {
  accid_ = GOOGLE_ULONGLONG(0);
  clear_has_accid();
}
inline ::google::protobuf::uint64 TrdAcc::accid() const {
  // @@protoc_insertion_point(field_get:Trd_Common.TrdAcc.accID)
  return accid_;
}
inline void TrdAcc::set_accid(::google::protobuf::uint64 value) {
  set_has_accid();
  accid_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.TrdAcc.accID)
}

// repeated int32 trdMarketAuthList = 3;
inline int TrdAcc::trdmarketauthlist_size() const {
  return trdmarketauthlist_.size();
}
inline void TrdAcc::clear_trdmarketauthlist() {
  trdmarketauthlist_.Clear();
}
inline ::google::protobuf::int32 TrdAcc::trdmarketauthlist(int index) const {
  // @@protoc_insertion_point(field_get:Trd_Common.TrdAcc.trdMarketAuthList)
  return trdmarketauthlist_.Get(index);
}
inline void TrdAcc::set_trdmarketauthlist(int index, ::google::protobuf::int32 value) {
  trdmarketauthlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:Trd_Common.TrdAcc.trdMarketAuthList)
}
inline void TrdAcc::add_trdmarketauthlist(::google::protobuf::int32 value) {
  trdmarketauthlist_.Add(value);
  // @@protoc_insertion_point(field_add:Trd_Common.TrdAcc.trdMarketAuthList)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TrdAcc::trdmarketauthlist() const {
  // @@protoc_insertion_point(field_list:Trd_Common.TrdAcc.trdMarketAuthList)
  return trdmarketauthlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TrdAcc::mutable_trdmarketauthlist() {
  // @@protoc_insertion_point(field_mutable_list:Trd_Common.TrdAcc.trdMarketAuthList)
  return &trdmarketauthlist_;
}

// optional int32 accType = 4;
inline bool TrdAcc::has_acctype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrdAcc::set_has_acctype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrdAcc::clear_has_acctype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrdAcc::clear_acctype() {
  acctype_ = 0;
  clear_has_acctype();
}
inline ::google::protobuf::int32 TrdAcc::acctype() const {
  // @@protoc_insertion_point(field_get:Trd_Common.TrdAcc.accType)
  return acctype_;
}
inline void TrdAcc::set_acctype(::google::protobuf::int32 value) {
  set_has_acctype();
  acctype_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.TrdAcc.accType)
}

// optional string cardNum = 5;
inline bool TrdAcc::has_cardnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrdAcc::set_has_cardnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrdAcc::clear_has_cardnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrdAcc::clear_cardnum() {
  cardnum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cardnum();
}
inline const ::std::string& TrdAcc::cardnum() const {
  // @@protoc_insertion_point(field_get:Trd_Common.TrdAcc.cardNum)
  return cardnum_.GetNoArena();
}
inline void TrdAcc::set_cardnum(const ::std::string& value) {
  set_has_cardnum();
  cardnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Trd_Common.TrdAcc.cardNum)
}
#if LANG_CXX11
inline void TrdAcc::set_cardnum(::std::string&& value) {
  set_has_cardnum();
  cardnum_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Trd_Common.TrdAcc.cardNum)
}
#endif
inline void TrdAcc::set_cardnum(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cardnum();
  cardnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Trd_Common.TrdAcc.cardNum)
}
inline void TrdAcc::set_cardnum(const char* value, size_t size) {
  set_has_cardnum();
  cardnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Trd_Common.TrdAcc.cardNum)
}
inline ::std::string* TrdAcc::mutable_cardnum() {
  set_has_cardnum();
  // @@protoc_insertion_point(field_mutable:Trd_Common.TrdAcc.cardNum)
  return cardnum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrdAcc::release_cardnum() {
  // @@protoc_insertion_point(field_release:Trd_Common.TrdAcc.cardNum)
  clear_has_cardnum();
  return cardnum_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrdAcc::set_allocated_cardnum(::std::string* cardnum) {
  if (cardnum != NULL) {
    set_has_cardnum();
  } else {
    clear_has_cardnum();
  }
  cardnum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cardnum);
  // @@protoc_insertion_point(field_set_allocated:Trd_Common.TrdAcc.cardNum)
}

// -------------------------------------------------------------------

// Funds

// required double power = 1;
inline bool Funds::has_power() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Funds::set_has_power() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Funds::clear_has_power() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Funds::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline double Funds::power() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Funds.power)
  return power_;
}
inline void Funds::set_power(double value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.Funds.power)
}

// required double totalAssets = 2;
inline bool Funds::has_totalassets() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Funds::set_has_totalassets() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Funds::clear_has_totalassets() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Funds::clear_totalassets() {
  totalassets_ = 0;
  clear_has_totalassets();
}
inline double Funds::totalassets() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Funds.totalAssets)
  return totalassets_;
}
inline void Funds::set_totalassets(double value) {
  set_has_totalassets();
  totalassets_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.Funds.totalAssets)
}

// required double cash = 3;
inline bool Funds::has_cash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Funds::set_has_cash() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Funds::clear_has_cash() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Funds::clear_cash() {
  cash_ = 0;
  clear_has_cash();
}
inline double Funds::cash() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Funds.cash)
  return cash_;
}
inline void Funds::set_cash(double value) {
  set_has_cash();
  cash_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.Funds.cash)
}

// required double marketVal = 4;
inline bool Funds::has_marketval() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Funds::set_has_marketval() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Funds::clear_has_marketval() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Funds::clear_marketval() {
  marketval_ = 0;
  clear_has_marketval();
}
inline double Funds::marketval() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Funds.marketVal)
  return marketval_;
}
inline void Funds::set_marketval(double value) {
  set_has_marketval();
  marketval_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.Funds.marketVal)
}

// required double frozenCash = 5;
inline bool Funds::has_frozencash() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Funds::set_has_frozencash() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Funds::clear_has_frozencash() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Funds::clear_frozencash() {
  frozencash_ = 0;
  clear_has_frozencash();
}
inline double Funds::frozencash() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Funds.frozenCash)
  return frozencash_;
}
inline void Funds::set_frozencash(double value) {
  set_has_frozencash();
  frozencash_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.Funds.frozenCash)
}

// required double debtCash = 6;
inline bool Funds::has_debtcash() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Funds::set_has_debtcash() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Funds::clear_has_debtcash() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Funds::clear_debtcash() {
  debtcash_ = 0;
  clear_has_debtcash();
}
inline double Funds::debtcash() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Funds.debtCash)
  return debtcash_;
}
inline void Funds::set_debtcash(double value) {
  set_has_debtcash();
  debtcash_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.Funds.debtCash)
}

// required double avlWithdrawalCash = 7;
inline bool Funds::has_avlwithdrawalcash() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Funds::set_has_avlwithdrawalcash() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Funds::clear_has_avlwithdrawalcash() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Funds::clear_avlwithdrawalcash() {
  avlwithdrawalcash_ = 0;
  clear_has_avlwithdrawalcash();
}
inline double Funds::avlwithdrawalcash() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Funds.avlWithdrawalCash)
  return avlwithdrawalcash_;
}
inline void Funds::set_avlwithdrawalcash(double value) {
  set_has_avlwithdrawalcash();
  avlwithdrawalcash_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.Funds.avlWithdrawalCash)
}

// optional int32 currency = 8;
inline bool Funds::has_currency() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Funds::set_has_currency() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Funds::clear_has_currency() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Funds::clear_currency() {
  currency_ = 0;
  clear_has_currency();
}
inline ::google::protobuf::int32 Funds::currency() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Funds.currency)
  return currency_;
}
inline void Funds::set_currency(::google::protobuf::int32 value) {
  set_has_currency();
  currency_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.Funds.currency)
}

// optional double availableFunds = 9;
inline bool Funds::has_availablefunds() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Funds::set_has_availablefunds() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Funds::clear_has_availablefunds() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Funds::clear_availablefunds() {
  availablefunds_ = 0;
  clear_has_availablefunds();
}
inline double Funds::availablefunds() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Funds.availableFunds)
  return availablefunds_;
}
inline void Funds::set_availablefunds(double value) {
  set_has_availablefunds();
  availablefunds_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.Funds.availableFunds)
}

// optional double unrealizedPL = 10;
inline bool Funds::has_unrealizedpl() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Funds::set_has_unrealizedpl() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Funds::clear_has_unrealizedpl() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Funds::clear_unrealizedpl() {
  unrealizedpl_ = 0;
  clear_has_unrealizedpl();
}
inline double Funds::unrealizedpl() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Funds.unrealizedPL)
  return unrealizedpl_;
}
inline void Funds::set_unrealizedpl(double value) {
  set_has_unrealizedpl();
  unrealizedpl_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.Funds.unrealizedPL)
}

// optional double realizedPL = 11;
inline bool Funds::has_realizedpl() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Funds::set_has_realizedpl() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Funds::clear_has_realizedpl() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Funds::clear_realizedpl() {
  realizedpl_ = 0;
  clear_has_realizedpl();
}
inline double Funds::realizedpl() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Funds.realizedPL)
  return realizedpl_;
}
inline void Funds::set_realizedpl(double value) {
  set_has_realizedpl();
  realizedpl_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.Funds.realizedPL)
}

// optional int32 riskLevel = 12;
inline bool Funds::has_risklevel() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Funds::set_has_risklevel() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Funds::clear_has_risklevel() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Funds::clear_risklevel() {
  risklevel_ = 0;
  clear_has_risklevel();
}
inline ::google::protobuf::int32 Funds::risklevel() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Funds.riskLevel)
  return risklevel_;
}
inline void Funds::set_risklevel(::google::protobuf::int32 value) {
  set_has_risklevel();
  risklevel_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.Funds.riskLevel)
}

// optional double initialMargin = 13;
inline bool Funds::has_initialmargin() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Funds::set_has_initialmargin() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Funds::clear_has_initialmargin() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Funds::clear_initialmargin() {
  initialmargin_ = 0;
  clear_has_initialmargin();
}
inline double Funds::initialmargin() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Funds.initialMargin)
  return initialmargin_;
}
inline void Funds::set_initialmargin(double value) {
  set_has_initialmargin();
  initialmargin_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.Funds.initialMargin)
}

// optional double maintenanceMargin = 14;
inline bool Funds::has_maintenancemargin() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Funds::set_has_maintenancemargin() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Funds::clear_has_maintenancemargin() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Funds::clear_maintenancemargin() {
  maintenancemargin_ = 0;
  clear_has_maintenancemargin();
}
inline double Funds::maintenancemargin() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Funds.maintenanceMargin)
  return maintenancemargin_;
}
inline void Funds::set_maintenancemargin(double value) {
  set_has_maintenancemargin();
  maintenancemargin_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.Funds.maintenanceMargin)
}

// repeated .Trd_Common.AccCashInfo cashInfoList = 15;
inline int Funds::cashinfolist_size() const {
  return cashinfolist_.size();
}
inline void Funds::clear_cashinfolist() {
  cashinfolist_.Clear();
}
inline const ::Trd_Common::AccCashInfo& Funds::cashinfolist(int index) const {
  // @@protoc_insertion_point(field_get:Trd_Common.Funds.cashInfoList)
  return cashinfolist_.Get(index);
}
inline ::Trd_Common::AccCashInfo* Funds::mutable_cashinfolist(int index) {
  // @@protoc_insertion_point(field_mutable:Trd_Common.Funds.cashInfoList)
  return cashinfolist_.Mutable(index);
}
inline ::Trd_Common::AccCashInfo* Funds::add_cashinfolist() {
  // @@protoc_insertion_point(field_add:Trd_Common.Funds.cashInfoList)
  return cashinfolist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Trd_Common::AccCashInfo >*
Funds::mutable_cashinfolist() {
  // @@protoc_insertion_point(field_mutable_list:Trd_Common.Funds.cashInfoList)
  return &cashinfolist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Trd_Common::AccCashInfo >&
Funds::cashinfolist() const {
  // @@protoc_insertion_point(field_list:Trd_Common.Funds.cashInfoList)
  return cashinfolist_;
}

// -------------------------------------------------------------------

// Position

// required uint64 positionID = 1;
inline bool Position::has_positionid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Position::set_has_positionid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Position::clear_has_positionid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Position::clear_positionid() {
  positionid_ = GOOGLE_ULONGLONG(0);
  clear_has_positionid();
}
inline ::google::protobuf::uint64 Position::positionid() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Position.positionID)
  return positionid_;
}
inline void Position::set_positionid(::google::protobuf::uint64 value) {
  set_has_positionid();
  positionid_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.Position.positionID)
}

// required int32 positionSide = 2;
inline bool Position::has_positionside() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Position::set_has_positionside() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Position::clear_has_positionside() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Position::clear_positionside() {
  positionside_ = 0;
  clear_has_positionside();
}
inline ::google::protobuf::int32 Position::positionside() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Position.positionSide)
  return positionside_;
}
inline void Position::set_positionside(::google::protobuf::int32 value) {
  set_has_positionside();
  positionside_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.Position.positionSide)
}

// required string code = 3;
inline bool Position::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Position::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Position::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Position::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& Position::code() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Position.code)
  return code_.GetNoArena();
}
inline void Position::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Trd_Common.Position.code)
}
#if LANG_CXX11
inline void Position::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Trd_Common.Position.code)
}
#endif
inline void Position::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Trd_Common.Position.code)
}
inline void Position::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Trd_Common.Position.code)
}
inline ::std::string* Position::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:Trd_Common.Position.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Position::release_code() {
  // @@protoc_insertion_point(field_release:Trd_Common.Position.code)
  clear_has_code();
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Position::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:Trd_Common.Position.code)
}

// required string name = 4;
inline bool Position::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Position::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Position::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Position::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Position::name() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Position.name)
  return name_.GetNoArena();
}
inline void Position::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Trd_Common.Position.name)
}
#if LANG_CXX11
inline void Position::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Trd_Common.Position.name)
}
#endif
inline void Position::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Trd_Common.Position.name)
}
inline void Position::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Trd_Common.Position.name)
}
inline ::std::string* Position::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Trd_Common.Position.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Position::release_name() {
  // @@protoc_insertion_point(field_release:Trd_Common.Position.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Position::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Trd_Common.Position.name)
}

// required double qty = 5;
inline bool Position::has_qty() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Position::set_has_qty() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Position::clear_has_qty() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Position::clear_qty() {
  qty_ = 0;
  clear_has_qty();
}
inline double Position::qty() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Position.qty)
  return qty_;
}
inline void Position::set_qty(double value) {
  set_has_qty();
  qty_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.Position.qty)
}

// required double canSellQty = 6;
inline bool Position::has_cansellqty() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Position::set_has_cansellqty() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Position::clear_has_cansellqty() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Position::clear_cansellqty() {
  cansellqty_ = 0;
  clear_has_cansellqty();
}
inline double Position::cansellqty() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Position.canSellQty)
  return cansellqty_;
}
inline void Position::set_cansellqty(double value) {
  set_has_cansellqty();
  cansellqty_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.Position.canSellQty)
}

// required double price = 7;
inline bool Position::has_price() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Position::set_has_price() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Position::clear_has_price() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Position::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline double Position::price() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Position.price)
  return price_;
}
inline void Position::set_price(double value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.Position.price)
}

// optional double costPrice = 8;
inline bool Position::has_costprice() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Position::set_has_costprice() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Position::clear_has_costprice() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Position::clear_costprice() {
  costprice_ = 0;
  clear_has_costprice();
}
inline double Position::costprice() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Position.costPrice)
  return costprice_;
}
inline void Position::set_costprice(double value) {
  set_has_costprice();
  costprice_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.Position.costPrice)
}

// required double val = 9;
inline bool Position::has_val() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Position::set_has_val() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Position::clear_has_val() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Position::clear_val() {
  val_ = 0;
  clear_has_val();
}
inline double Position::val() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Position.val)
  return val_;
}
inline void Position::set_val(double value) {
  set_has_val();
  val_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.Position.val)
}

// required double plVal = 10;
inline bool Position::has_plval() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Position::set_has_plval() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Position::clear_has_plval() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Position::clear_plval() {
  plval_ = 0;
  clear_has_plval();
}
inline double Position::plval() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Position.plVal)
  return plval_;
}
inline void Position::set_plval(double value) {
  set_has_plval();
  plval_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.Position.plVal)
}

// optional double plRatio = 11;
inline bool Position::has_plratio() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Position::set_has_plratio() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Position::clear_has_plratio() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Position::clear_plratio() {
  plratio_ = 0;
  clear_has_plratio();
}
inline double Position::plratio() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Position.plRatio)
  return plratio_;
}
inline void Position::set_plratio(double value) {
  set_has_plratio();
  plratio_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.Position.plRatio)
}

// optional int32 secMarket = 12;
inline bool Position::has_secmarket() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Position::set_has_secmarket() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Position::clear_has_secmarket() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Position::clear_secmarket() {
  secmarket_ = 0;
  clear_has_secmarket();
}
inline ::google::protobuf::int32 Position::secmarket() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Position.secMarket)
  return secmarket_;
}
inline void Position::set_secmarket(::google::protobuf::int32 value) {
  set_has_secmarket();
  secmarket_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.Position.secMarket)
}

// optional double td_plVal = 21;
inline bool Position::has_td_plval() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Position::set_has_td_plval() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Position::clear_has_td_plval() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Position::clear_td_plval() {
  td_plval_ = 0;
  clear_has_td_plval();
}
inline double Position::td_plval() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Position.td_plVal)
  return td_plval_;
}
inline void Position::set_td_plval(double value) {
  set_has_td_plval();
  td_plval_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.Position.td_plVal)
}

// optional double td_trdVal = 22;
inline bool Position::has_td_trdval() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Position::set_has_td_trdval() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Position::clear_has_td_trdval() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Position::clear_td_trdval() {
  td_trdval_ = 0;
  clear_has_td_trdval();
}
inline double Position::td_trdval() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Position.td_trdVal)
  return td_trdval_;
}
inline void Position::set_td_trdval(double value) {
  set_has_td_trdval();
  td_trdval_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.Position.td_trdVal)
}

// optional double td_buyVal = 23;
inline bool Position::has_td_buyval() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Position::set_has_td_buyval() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Position::clear_has_td_buyval() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Position::clear_td_buyval() {
  td_buyval_ = 0;
  clear_has_td_buyval();
}
inline double Position::td_buyval() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Position.td_buyVal)
  return td_buyval_;
}
inline void Position::set_td_buyval(double value) {
  set_has_td_buyval();
  td_buyval_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.Position.td_buyVal)
}

// optional double td_buyQty = 24;
inline bool Position::has_td_buyqty() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Position::set_has_td_buyqty() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Position::clear_has_td_buyqty() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Position::clear_td_buyqty() {
  td_buyqty_ = 0;
  clear_has_td_buyqty();
}
inline double Position::td_buyqty() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Position.td_buyQty)
  return td_buyqty_;
}
inline void Position::set_td_buyqty(double value) {
  set_has_td_buyqty();
  td_buyqty_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.Position.td_buyQty)
}

// optional double td_sellVal = 25;
inline bool Position::has_td_sellval() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Position::set_has_td_sellval() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Position::clear_has_td_sellval() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Position::clear_td_sellval() {
  td_sellval_ = 0;
  clear_has_td_sellval();
}
inline double Position::td_sellval() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Position.td_sellVal)
  return td_sellval_;
}
inline void Position::set_td_sellval(double value) {
  set_has_td_sellval();
  td_sellval_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.Position.td_sellVal)
}

// optional double td_sellQty = 26;
inline bool Position::has_td_sellqty() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Position::set_has_td_sellqty() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Position::clear_has_td_sellqty() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Position::clear_td_sellqty() {
  td_sellqty_ = 0;
  clear_has_td_sellqty();
}
inline double Position::td_sellqty() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Position.td_sellQty)
  return td_sellqty_;
}
inline void Position::set_td_sellqty(double value) {
  set_has_td_sellqty();
  td_sellqty_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.Position.td_sellQty)
}

// optional double unrealizedPL = 28;
inline bool Position::has_unrealizedpl() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Position::set_has_unrealizedpl() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Position::clear_has_unrealizedpl() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Position::clear_unrealizedpl() {
  unrealizedpl_ = 0;
  clear_has_unrealizedpl();
}
inline double Position::unrealizedpl() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Position.unrealizedPL)
  return unrealizedpl_;
}
inline void Position::set_unrealizedpl(double value) {
  set_has_unrealizedpl();
  unrealizedpl_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.Position.unrealizedPL)
}

// optional double realizedPL = 29;
inline bool Position::has_realizedpl() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Position::set_has_realizedpl() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Position::clear_has_realizedpl() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Position::clear_realizedpl() {
  realizedpl_ = 0;
  clear_has_realizedpl();
}
inline double Position::realizedpl() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Position.realizedPL)
  return realizedpl_;
}
inline void Position::set_realizedpl(double value) {
  set_has_realizedpl();
  realizedpl_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.Position.realizedPL)
}

// -------------------------------------------------------------------

// Order

// required int32 trdSide = 1;
inline bool Order::has_trdside() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Order::set_has_trdside() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Order::clear_has_trdside() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Order::clear_trdside() {
  trdside_ = 0;
  clear_has_trdside();
}
inline ::google::protobuf::int32 Order::trdside() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Order.trdSide)
  return trdside_;
}
inline void Order::set_trdside(::google::protobuf::int32 value) {
  set_has_trdside();
  trdside_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.Order.trdSide)
}

// required int32 orderType = 2;
inline bool Order::has_ordertype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Order::set_has_ordertype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Order::clear_has_ordertype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Order::clear_ordertype() {
  ordertype_ = 0;
  clear_has_ordertype();
}
inline ::google::protobuf::int32 Order::ordertype() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Order.orderType)
  return ordertype_;
}
inline void Order::set_ordertype(::google::protobuf::int32 value) {
  set_has_ordertype();
  ordertype_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.Order.orderType)
}

// required int32 orderStatus = 3;
inline bool Order::has_orderstatus() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Order::set_has_orderstatus() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Order::clear_has_orderstatus() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Order::clear_orderstatus() {
  orderstatus_ = 0;
  clear_has_orderstatus();
}
inline ::google::protobuf::int32 Order::orderstatus() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Order.orderStatus)
  return orderstatus_;
}
inline void Order::set_orderstatus(::google::protobuf::int32 value) {
  set_has_orderstatus();
  orderstatus_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.Order.orderStatus)
}

// required uint64 orderID = 4;
inline bool Order::has_orderid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Order::set_has_orderid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Order::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Order::clear_orderid() {
  orderid_ = GOOGLE_ULONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::uint64 Order::orderid() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Order.orderID)
  return orderid_;
}
inline void Order::set_orderid(::google::protobuf::uint64 value) {
  set_has_orderid();
  orderid_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.Order.orderID)
}

// required string orderIDEx = 5;
inline bool Order::has_orderidex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Order::set_has_orderidex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Order::clear_has_orderidex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Order::clear_orderidex() {
  orderidex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_orderidex();
}
inline const ::std::string& Order::orderidex() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Order.orderIDEx)
  return orderidex_.GetNoArena();
}
inline void Order::set_orderidex(const ::std::string& value) {
  set_has_orderidex();
  orderidex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Trd_Common.Order.orderIDEx)
}
#if LANG_CXX11
inline void Order::set_orderidex(::std::string&& value) {
  set_has_orderidex();
  orderidex_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Trd_Common.Order.orderIDEx)
}
#endif
inline void Order::set_orderidex(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_orderidex();
  orderidex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Trd_Common.Order.orderIDEx)
}
inline void Order::set_orderidex(const char* value, size_t size) {
  set_has_orderidex();
  orderidex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Trd_Common.Order.orderIDEx)
}
inline ::std::string* Order::mutable_orderidex() {
  set_has_orderidex();
  // @@protoc_insertion_point(field_mutable:Trd_Common.Order.orderIDEx)
  return orderidex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_orderidex() {
  // @@protoc_insertion_point(field_release:Trd_Common.Order.orderIDEx)
  clear_has_orderidex();
  return orderidex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_orderidex(::std::string* orderidex) {
  if (orderidex != NULL) {
    set_has_orderidex();
  } else {
    clear_has_orderidex();
  }
  orderidex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderidex);
  // @@protoc_insertion_point(field_set_allocated:Trd_Common.Order.orderIDEx)
}

// required string code = 6;
inline bool Order::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Order::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Order::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Order::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& Order::code() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Order.code)
  return code_.GetNoArena();
}
inline void Order::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Trd_Common.Order.code)
}
#if LANG_CXX11
inline void Order::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Trd_Common.Order.code)
}
#endif
inline void Order::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Trd_Common.Order.code)
}
inline void Order::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Trd_Common.Order.code)
}
inline ::std::string* Order::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:Trd_Common.Order.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_code() {
  // @@protoc_insertion_point(field_release:Trd_Common.Order.code)
  clear_has_code();
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:Trd_Common.Order.code)
}

// required string name = 7;
inline bool Order::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Order::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Order::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Order::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Order::name() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Order.name)
  return name_.GetNoArena();
}
inline void Order::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Trd_Common.Order.name)
}
#if LANG_CXX11
inline void Order::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Trd_Common.Order.name)
}
#endif
inline void Order::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Trd_Common.Order.name)
}
inline void Order::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Trd_Common.Order.name)
}
inline ::std::string* Order::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Trd_Common.Order.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_name() {
  // @@protoc_insertion_point(field_release:Trd_Common.Order.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Trd_Common.Order.name)
}

// required double qty = 8;
inline bool Order::has_qty() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Order::set_has_qty() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Order::clear_has_qty() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Order::clear_qty() {
  qty_ = 0;
  clear_has_qty();
}
inline double Order::qty() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Order.qty)
  return qty_;
}
inline void Order::set_qty(double value) {
  set_has_qty();
  qty_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.Order.qty)
}

// optional double price = 9;
inline bool Order::has_price() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Order::set_has_price() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Order::clear_has_price() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Order::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline double Order::price() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Order.price)
  return price_;
}
inline void Order::set_price(double value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.Order.price)
}

// required string createTime = 10;
inline bool Order::has_createtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Order::set_has_createtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Order::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Order::clear_createtime() {
  createtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_createtime();
}
inline const ::std::string& Order::createtime() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Order.createTime)
  return createtime_.GetNoArena();
}
inline void Order::set_createtime(const ::std::string& value) {
  set_has_createtime();
  createtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Trd_Common.Order.createTime)
}
#if LANG_CXX11
inline void Order::set_createtime(::std::string&& value) {
  set_has_createtime();
  createtime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Trd_Common.Order.createTime)
}
#endif
inline void Order::set_createtime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_createtime();
  createtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Trd_Common.Order.createTime)
}
inline void Order::set_createtime(const char* value, size_t size) {
  set_has_createtime();
  createtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Trd_Common.Order.createTime)
}
inline ::std::string* Order::mutable_createtime() {
  set_has_createtime();
  // @@protoc_insertion_point(field_mutable:Trd_Common.Order.createTime)
  return createtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_createtime() {
  // @@protoc_insertion_point(field_release:Trd_Common.Order.createTime)
  clear_has_createtime();
  return createtime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_createtime(::std::string* createtime) {
  if (createtime != NULL) {
    set_has_createtime();
  } else {
    clear_has_createtime();
  }
  createtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), createtime);
  // @@protoc_insertion_point(field_set_allocated:Trd_Common.Order.createTime)
}

// required string updateTime = 11;
inline bool Order::has_updatetime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Order::set_has_updatetime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Order::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Order::clear_updatetime() {
  updatetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_updatetime();
}
inline const ::std::string& Order::updatetime() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Order.updateTime)
  return updatetime_.GetNoArena();
}
inline void Order::set_updatetime(const ::std::string& value) {
  set_has_updatetime();
  updatetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Trd_Common.Order.updateTime)
}
#if LANG_CXX11
inline void Order::set_updatetime(::std::string&& value) {
  set_has_updatetime();
  updatetime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Trd_Common.Order.updateTime)
}
#endif
inline void Order::set_updatetime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_updatetime();
  updatetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Trd_Common.Order.updateTime)
}
inline void Order::set_updatetime(const char* value, size_t size) {
  set_has_updatetime();
  updatetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Trd_Common.Order.updateTime)
}
inline ::std::string* Order::mutable_updatetime() {
  set_has_updatetime();
  // @@protoc_insertion_point(field_mutable:Trd_Common.Order.updateTime)
  return updatetime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_updatetime() {
  // @@protoc_insertion_point(field_release:Trd_Common.Order.updateTime)
  clear_has_updatetime();
  return updatetime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_updatetime(::std::string* updatetime) {
  if (updatetime != NULL) {
    set_has_updatetime();
  } else {
    clear_has_updatetime();
  }
  updatetime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), updatetime);
  // @@protoc_insertion_point(field_set_allocated:Trd_Common.Order.updateTime)
}

// optional double fillQty = 12;
inline bool Order::has_fillqty() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Order::set_has_fillqty() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Order::clear_has_fillqty() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Order::clear_fillqty() {
  fillqty_ = 0;
  clear_has_fillqty();
}
inline double Order::fillqty() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Order.fillQty)
  return fillqty_;
}
inline void Order::set_fillqty(double value) {
  set_has_fillqty();
  fillqty_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.Order.fillQty)
}

// optional double fillAvgPrice = 13;
inline bool Order::has_fillavgprice() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Order::set_has_fillavgprice() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Order::clear_has_fillavgprice() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Order::clear_fillavgprice() {
  fillavgprice_ = 0;
  clear_has_fillavgprice();
}
inline double Order::fillavgprice() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Order.fillAvgPrice)
  return fillavgprice_;
}
inline void Order::set_fillavgprice(double value) {
  set_has_fillavgprice();
  fillavgprice_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.Order.fillAvgPrice)
}

// optional string lastErrMsg = 14;
inline bool Order::has_lasterrmsg() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Order::set_has_lasterrmsg() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Order::clear_has_lasterrmsg() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Order::clear_lasterrmsg() {
  lasterrmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lasterrmsg();
}
inline const ::std::string& Order::lasterrmsg() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Order.lastErrMsg)
  return lasterrmsg_.GetNoArena();
}
inline void Order::set_lasterrmsg(const ::std::string& value) {
  set_has_lasterrmsg();
  lasterrmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Trd_Common.Order.lastErrMsg)
}
#if LANG_CXX11
inline void Order::set_lasterrmsg(::std::string&& value) {
  set_has_lasterrmsg();
  lasterrmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Trd_Common.Order.lastErrMsg)
}
#endif
inline void Order::set_lasterrmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_lasterrmsg();
  lasterrmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Trd_Common.Order.lastErrMsg)
}
inline void Order::set_lasterrmsg(const char* value, size_t size) {
  set_has_lasterrmsg();
  lasterrmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Trd_Common.Order.lastErrMsg)
}
inline ::std::string* Order::mutable_lasterrmsg() {
  set_has_lasterrmsg();
  // @@protoc_insertion_point(field_mutable:Trd_Common.Order.lastErrMsg)
  return lasterrmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_lasterrmsg() {
  // @@protoc_insertion_point(field_release:Trd_Common.Order.lastErrMsg)
  clear_has_lasterrmsg();
  return lasterrmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_lasterrmsg(::std::string* lasterrmsg) {
  if (lasterrmsg != NULL) {
    set_has_lasterrmsg();
  } else {
    clear_has_lasterrmsg();
  }
  lasterrmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lasterrmsg);
  // @@protoc_insertion_point(field_set_allocated:Trd_Common.Order.lastErrMsg)
}

// optional int32 secMarket = 15;
inline bool Order::has_secmarket() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Order::set_has_secmarket() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Order::clear_has_secmarket() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Order::clear_secmarket() {
  secmarket_ = 0;
  clear_has_secmarket();
}
inline ::google::protobuf::int32 Order::secmarket() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Order.secMarket)
  return secmarket_;
}
inline void Order::set_secmarket(::google::protobuf::int32 value) {
  set_has_secmarket();
  secmarket_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.Order.secMarket)
}

// optional double createTimestamp = 16;
inline bool Order::has_createtimestamp() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Order::set_has_createtimestamp() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Order::clear_has_createtimestamp() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Order::clear_createtimestamp() {
  createtimestamp_ = 0;
  clear_has_createtimestamp();
}
inline double Order::createtimestamp() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Order.createTimestamp)
  return createtimestamp_;
}
inline void Order::set_createtimestamp(double value) {
  set_has_createtimestamp();
  createtimestamp_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.Order.createTimestamp)
}

// optional double updateTimestamp = 17;
inline bool Order::has_updatetimestamp() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Order::set_has_updatetimestamp() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Order::clear_has_updatetimestamp() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Order::clear_updatetimestamp() {
  updatetimestamp_ = 0;
  clear_has_updatetimestamp();
}
inline double Order::updatetimestamp() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Order.updateTimestamp)
  return updatetimestamp_;
}
inline void Order::set_updatetimestamp(double value) {
  set_has_updatetimestamp();
  updatetimestamp_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.Order.updateTimestamp)
}

// optional string remark = 18;
inline bool Order::has_remark() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Order::set_has_remark() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Order::clear_has_remark() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Order::clear_remark() {
  remark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_remark();
}
inline const ::std::string& Order::remark() const {
  // @@protoc_insertion_point(field_get:Trd_Common.Order.remark)
  return remark_.GetNoArena();
}
inline void Order::set_remark(const ::std::string& value) {
  set_has_remark();
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Trd_Common.Order.remark)
}
#if LANG_CXX11
inline void Order::set_remark(::std::string&& value) {
  set_has_remark();
  remark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Trd_Common.Order.remark)
}
#endif
inline void Order::set_remark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_remark();
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Trd_Common.Order.remark)
}
inline void Order::set_remark(const char* value, size_t size) {
  set_has_remark();
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Trd_Common.Order.remark)
}
inline ::std::string* Order::mutable_remark() {
  set_has_remark();
  // @@protoc_insertion_point(field_mutable:Trd_Common.Order.remark)
  return remark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_remark() {
  // @@protoc_insertion_point(field_release:Trd_Common.Order.remark)
  clear_has_remark();
  return remark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_remark(::std::string* remark) {
  if (remark != NULL) {
    set_has_remark();
  } else {
    clear_has_remark();
  }
  remark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remark);
  // @@protoc_insertion_point(field_set_allocated:Trd_Common.Order.remark)
}

// -------------------------------------------------------------------

// OrderFill

// required int32 trdSide = 1;
inline bool OrderFill::has_trdside() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OrderFill::set_has_trdside() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OrderFill::clear_has_trdside() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OrderFill::clear_trdside() {
  trdside_ = 0;
  clear_has_trdside();
}
inline ::google::protobuf::int32 OrderFill::trdside() const {
  // @@protoc_insertion_point(field_get:Trd_Common.OrderFill.trdSide)
  return trdside_;
}
inline void OrderFill::set_trdside(::google::protobuf::int32 value) {
  set_has_trdside();
  trdside_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.OrderFill.trdSide)
}

// required uint64 fillID = 2;
inline bool OrderFill::has_fillid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OrderFill::set_has_fillid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OrderFill::clear_has_fillid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OrderFill::clear_fillid() {
  fillid_ = GOOGLE_ULONGLONG(0);
  clear_has_fillid();
}
inline ::google::protobuf::uint64 OrderFill::fillid() const {
  // @@protoc_insertion_point(field_get:Trd_Common.OrderFill.fillID)
  return fillid_;
}
inline void OrderFill::set_fillid(::google::protobuf::uint64 value) {
  set_has_fillid();
  fillid_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.OrderFill.fillID)
}

// required string fillIDEx = 3;
inline bool OrderFill::has_fillidex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OrderFill::set_has_fillidex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OrderFill::clear_has_fillidex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OrderFill::clear_fillidex() {
  fillidex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fillidex();
}
inline const ::std::string& OrderFill::fillidex() const {
  // @@protoc_insertion_point(field_get:Trd_Common.OrderFill.fillIDEx)
  return fillidex_.GetNoArena();
}
inline void OrderFill::set_fillidex(const ::std::string& value) {
  set_has_fillidex();
  fillidex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Trd_Common.OrderFill.fillIDEx)
}
#if LANG_CXX11
inline void OrderFill::set_fillidex(::std::string&& value) {
  set_has_fillidex();
  fillidex_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Trd_Common.OrderFill.fillIDEx)
}
#endif
inline void OrderFill::set_fillidex(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fillidex();
  fillidex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Trd_Common.OrderFill.fillIDEx)
}
inline void OrderFill::set_fillidex(const char* value, size_t size) {
  set_has_fillidex();
  fillidex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Trd_Common.OrderFill.fillIDEx)
}
inline ::std::string* OrderFill::mutable_fillidex() {
  set_has_fillidex();
  // @@protoc_insertion_point(field_mutable:Trd_Common.OrderFill.fillIDEx)
  return fillidex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderFill::release_fillidex() {
  // @@protoc_insertion_point(field_release:Trd_Common.OrderFill.fillIDEx)
  clear_has_fillidex();
  return fillidex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderFill::set_allocated_fillidex(::std::string* fillidex) {
  if (fillidex != NULL) {
    set_has_fillidex();
  } else {
    clear_has_fillidex();
  }
  fillidex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fillidex);
  // @@protoc_insertion_point(field_set_allocated:Trd_Common.OrderFill.fillIDEx)
}

// optional uint64 orderID = 4;
inline bool OrderFill::has_orderid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OrderFill::set_has_orderid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OrderFill::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OrderFill::clear_orderid() {
  orderid_ = GOOGLE_ULONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::uint64 OrderFill::orderid() const {
  // @@protoc_insertion_point(field_get:Trd_Common.OrderFill.orderID)
  return orderid_;
}
inline void OrderFill::set_orderid(::google::protobuf::uint64 value) {
  set_has_orderid();
  orderid_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.OrderFill.orderID)
}

// optional string orderIDEx = 5;
inline bool OrderFill::has_orderidex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OrderFill::set_has_orderidex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OrderFill::clear_has_orderidex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OrderFill::clear_orderidex() {
  orderidex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_orderidex();
}
inline const ::std::string& OrderFill::orderidex() const {
  // @@protoc_insertion_point(field_get:Trd_Common.OrderFill.orderIDEx)
  return orderidex_.GetNoArena();
}
inline void OrderFill::set_orderidex(const ::std::string& value) {
  set_has_orderidex();
  orderidex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Trd_Common.OrderFill.orderIDEx)
}
#if LANG_CXX11
inline void OrderFill::set_orderidex(::std::string&& value) {
  set_has_orderidex();
  orderidex_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Trd_Common.OrderFill.orderIDEx)
}
#endif
inline void OrderFill::set_orderidex(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_orderidex();
  orderidex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Trd_Common.OrderFill.orderIDEx)
}
inline void OrderFill::set_orderidex(const char* value, size_t size) {
  set_has_orderidex();
  orderidex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Trd_Common.OrderFill.orderIDEx)
}
inline ::std::string* OrderFill::mutable_orderidex() {
  set_has_orderidex();
  // @@protoc_insertion_point(field_mutable:Trd_Common.OrderFill.orderIDEx)
  return orderidex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderFill::release_orderidex() {
  // @@protoc_insertion_point(field_release:Trd_Common.OrderFill.orderIDEx)
  clear_has_orderidex();
  return orderidex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderFill::set_allocated_orderidex(::std::string* orderidex) {
  if (orderidex != NULL) {
    set_has_orderidex();
  } else {
    clear_has_orderidex();
  }
  orderidex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderidex);
  // @@protoc_insertion_point(field_set_allocated:Trd_Common.OrderFill.orderIDEx)
}

// required string code = 6;
inline bool OrderFill::has_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OrderFill::set_has_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OrderFill::clear_has_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OrderFill::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& OrderFill::code() const {
  // @@protoc_insertion_point(field_get:Trd_Common.OrderFill.code)
  return code_.GetNoArena();
}
inline void OrderFill::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Trd_Common.OrderFill.code)
}
#if LANG_CXX11
inline void OrderFill::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Trd_Common.OrderFill.code)
}
#endif
inline void OrderFill::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Trd_Common.OrderFill.code)
}
inline void OrderFill::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Trd_Common.OrderFill.code)
}
inline ::std::string* OrderFill::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:Trd_Common.OrderFill.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderFill::release_code() {
  // @@protoc_insertion_point(field_release:Trd_Common.OrderFill.code)
  clear_has_code();
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderFill::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:Trd_Common.OrderFill.code)
}

// required string name = 7;
inline bool OrderFill::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OrderFill::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OrderFill::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OrderFill::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& OrderFill::name() const {
  // @@protoc_insertion_point(field_get:Trd_Common.OrderFill.name)
  return name_.GetNoArena();
}
inline void OrderFill::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Trd_Common.OrderFill.name)
}
#if LANG_CXX11
inline void OrderFill::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Trd_Common.OrderFill.name)
}
#endif
inline void OrderFill::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Trd_Common.OrderFill.name)
}
inline void OrderFill::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Trd_Common.OrderFill.name)
}
inline ::std::string* OrderFill::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Trd_Common.OrderFill.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderFill::release_name() {
  // @@protoc_insertion_point(field_release:Trd_Common.OrderFill.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderFill::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Trd_Common.OrderFill.name)
}

// required double qty = 8;
inline bool OrderFill::has_qty() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OrderFill::set_has_qty() {
  _has_bits_[0] |= 0x00000400u;
}
inline void OrderFill::clear_has_qty() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void OrderFill::clear_qty() {
  qty_ = 0;
  clear_has_qty();
}
inline double OrderFill::qty() const {
  // @@protoc_insertion_point(field_get:Trd_Common.OrderFill.qty)
  return qty_;
}
inline void OrderFill::set_qty(double value) {
  set_has_qty();
  qty_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.OrderFill.qty)
}

// required double price = 9;
inline bool OrderFill::has_price() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void OrderFill::set_has_price() {
  _has_bits_[0] |= 0x00000800u;
}
inline void OrderFill::clear_has_price() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void OrderFill::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline double OrderFill::price() const {
  // @@protoc_insertion_point(field_get:Trd_Common.OrderFill.price)
  return price_;
}
inline void OrderFill::set_price(double value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.OrderFill.price)
}

// required string createTime = 10;
inline bool OrderFill::has_createtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OrderFill::set_has_createtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OrderFill::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OrderFill::clear_createtime() {
  createtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_createtime();
}
inline const ::std::string& OrderFill::createtime() const {
  // @@protoc_insertion_point(field_get:Trd_Common.OrderFill.createTime)
  return createtime_.GetNoArena();
}
inline void OrderFill::set_createtime(const ::std::string& value) {
  set_has_createtime();
  createtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Trd_Common.OrderFill.createTime)
}
#if LANG_CXX11
inline void OrderFill::set_createtime(::std::string&& value) {
  set_has_createtime();
  createtime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Trd_Common.OrderFill.createTime)
}
#endif
inline void OrderFill::set_createtime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_createtime();
  createtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Trd_Common.OrderFill.createTime)
}
inline void OrderFill::set_createtime(const char* value, size_t size) {
  set_has_createtime();
  createtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Trd_Common.OrderFill.createTime)
}
inline ::std::string* OrderFill::mutable_createtime() {
  set_has_createtime();
  // @@protoc_insertion_point(field_mutable:Trd_Common.OrderFill.createTime)
  return createtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderFill::release_createtime() {
  // @@protoc_insertion_point(field_release:Trd_Common.OrderFill.createTime)
  clear_has_createtime();
  return createtime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderFill::set_allocated_createtime(::std::string* createtime) {
  if (createtime != NULL) {
    set_has_createtime();
  } else {
    clear_has_createtime();
  }
  createtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), createtime);
  // @@protoc_insertion_point(field_set_allocated:Trd_Common.OrderFill.createTime)
}

// optional int32 counterBrokerID = 11;
inline bool OrderFill::has_counterbrokerid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OrderFill::set_has_counterbrokerid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OrderFill::clear_has_counterbrokerid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OrderFill::clear_counterbrokerid() {
  counterbrokerid_ = 0;
  clear_has_counterbrokerid();
}
inline ::google::protobuf::int32 OrderFill::counterbrokerid() const {
  // @@protoc_insertion_point(field_get:Trd_Common.OrderFill.counterBrokerID)
  return counterbrokerid_;
}
inline void OrderFill::set_counterbrokerid(::google::protobuf::int32 value) {
  set_has_counterbrokerid();
  counterbrokerid_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.OrderFill.counterBrokerID)
}

// optional string counterBrokerName = 12;
inline bool OrderFill::has_counterbrokername() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OrderFill::set_has_counterbrokername() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OrderFill::clear_has_counterbrokername() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OrderFill::clear_counterbrokername() {
  counterbrokername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_counterbrokername();
}
inline const ::std::string& OrderFill::counterbrokername() const {
  // @@protoc_insertion_point(field_get:Trd_Common.OrderFill.counterBrokerName)
  return counterbrokername_.GetNoArena();
}
inline void OrderFill::set_counterbrokername(const ::std::string& value) {
  set_has_counterbrokername();
  counterbrokername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Trd_Common.OrderFill.counterBrokerName)
}
#if LANG_CXX11
inline void OrderFill::set_counterbrokername(::std::string&& value) {
  set_has_counterbrokername();
  counterbrokername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Trd_Common.OrderFill.counterBrokerName)
}
#endif
inline void OrderFill::set_counterbrokername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_counterbrokername();
  counterbrokername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Trd_Common.OrderFill.counterBrokerName)
}
inline void OrderFill::set_counterbrokername(const char* value, size_t size) {
  set_has_counterbrokername();
  counterbrokername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Trd_Common.OrderFill.counterBrokerName)
}
inline ::std::string* OrderFill::mutable_counterbrokername() {
  set_has_counterbrokername();
  // @@protoc_insertion_point(field_mutable:Trd_Common.OrderFill.counterBrokerName)
  return counterbrokername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderFill::release_counterbrokername() {
  // @@protoc_insertion_point(field_release:Trd_Common.OrderFill.counterBrokerName)
  clear_has_counterbrokername();
  return counterbrokername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderFill::set_allocated_counterbrokername(::std::string* counterbrokername) {
  if (counterbrokername != NULL) {
    set_has_counterbrokername();
  } else {
    clear_has_counterbrokername();
  }
  counterbrokername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), counterbrokername);
  // @@protoc_insertion_point(field_set_allocated:Trd_Common.OrderFill.counterBrokerName)
}

// optional int32 secMarket = 13;
inline bool OrderFill::has_secmarket() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void OrderFill::set_has_secmarket() {
  _has_bits_[0] |= 0x00002000u;
}
inline void OrderFill::clear_has_secmarket() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void OrderFill::clear_secmarket() {
  secmarket_ = 0;
  clear_has_secmarket();
}
inline ::google::protobuf::int32 OrderFill::secmarket() const {
  // @@protoc_insertion_point(field_get:Trd_Common.OrderFill.secMarket)
  return secmarket_;
}
inline void OrderFill::set_secmarket(::google::protobuf::int32 value) {
  set_has_secmarket();
  secmarket_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.OrderFill.secMarket)
}

// optional double createTimestamp = 14;
inline bool OrderFill::has_createtimestamp() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void OrderFill::set_has_createtimestamp() {
  _has_bits_[0] |= 0x00001000u;
}
inline void OrderFill::clear_has_createtimestamp() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void OrderFill::clear_createtimestamp() {
  createtimestamp_ = 0;
  clear_has_createtimestamp();
}
inline double OrderFill::createtimestamp() const {
  // @@protoc_insertion_point(field_get:Trd_Common.OrderFill.createTimestamp)
  return createtimestamp_;
}
inline void OrderFill::set_createtimestamp(double value) {
  set_has_createtimestamp();
  createtimestamp_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.OrderFill.createTimestamp)
}

// optional double updateTimestamp = 15;
inline bool OrderFill::has_updatetimestamp() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void OrderFill::set_has_updatetimestamp() {
  _has_bits_[0] |= 0x00008000u;
}
inline void OrderFill::clear_has_updatetimestamp() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void OrderFill::clear_updatetimestamp() {
  updatetimestamp_ = 0;
  clear_has_updatetimestamp();
}
inline double OrderFill::updatetimestamp() const {
  // @@protoc_insertion_point(field_get:Trd_Common.OrderFill.updateTimestamp)
  return updatetimestamp_;
}
inline void OrderFill::set_updatetimestamp(double value) {
  set_has_updatetimestamp();
  updatetimestamp_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.OrderFill.updateTimestamp)
}

// optional int32 status = 16;
inline bool OrderFill::has_status() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void OrderFill::set_has_status() {
  _has_bits_[0] |= 0x00004000u;
}
inline void OrderFill::clear_has_status() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void OrderFill::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 OrderFill::status() const {
  // @@protoc_insertion_point(field_get:Trd_Common.OrderFill.status)
  return status_;
}
inline void OrderFill::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.OrderFill.status)
}

// -------------------------------------------------------------------

// MaxTrdQtys

// required double maxCashBuy = 1;
inline bool MaxTrdQtys::has_maxcashbuy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MaxTrdQtys::set_has_maxcashbuy() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MaxTrdQtys::clear_has_maxcashbuy() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MaxTrdQtys::clear_maxcashbuy() {
  maxcashbuy_ = 0;
  clear_has_maxcashbuy();
}
inline double MaxTrdQtys::maxcashbuy() const {
  // @@protoc_insertion_point(field_get:Trd_Common.MaxTrdQtys.maxCashBuy)
  return maxcashbuy_;
}
inline void MaxTrdQtys::set_maxcashbuy(double value) {
  set_has_maxcashbuy();
  maxcashbuy_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.MaxTrdQtys.maxCashBuy)
}

// optional double maxCashAndMarginBuy = 2;
inline bool MaxTrdQtys::has_maxcashandmarginbuy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MaxTrdQtys::set_has_maxcashandmarginbuy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MaxTrdQtys::clear_has_maxcashandmarginbuy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MaxTrdQtys::clear_maxcashandmarginbuy() {
  maxcashandmarginbuy_ = 0;
  clear_has_maxcashandmarginbuy();
}
inline double MaxTrdQtys::maxcashandmarginbuy() const {
  // @@protoc_insertion_point(field_get:Trd_Common.MaxTrdQtys.maxCashAndMarginBuy)
  return maxcashandmarginbuy_;
}
inline void MaxTrdQtys::set_maxcashandmarginbuy(double value) {
  set_has_maxcashandmarginbuy();
  maxcashandmarginbuy_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.MaxTrdQtys.maxCashAndMarginBuy)
}

// required double maxPositionSell = 3;
inline bool MaxTrdQtys::has_maxpositionsell() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MaxTrdQtys::set_has_maxpositionsell() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MaxTrdQtys::clear_has_maxpositionsell() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MaxTrdQtys::clear_maxpositionsell() {
  maxpositionsell_ = 0;
  clear_has_maxpositionsell();
}
inline double MaxTrdQtys::maxpositionsell() const {
  // @@protoc_insertion_point(field_get:Trd_Common.MaxTrdQtys.maxPositionSell)
  return maxpositionsell_;
}
inline void MaxTrdQtys::set_maxpositionsell(double value) {
  set_has_maxpositionsell();
  maxpositionsell_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.MaxTrdQtys.maxPositionSell)
}

// optional double maxSellShort = 4;
inline bool MaxTrdQtys::has_maxsellshort() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MaxTrdQtys::set_has_maxsellshort() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MaxTrdQtys::clear_has_maxsellshort() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MaxTrdQtys::clear_maxsellshort() {
  maxsellshort_ = 0;
  clear_has_maxsellshort();
}
inline double MaxTrdQtys::maxsellshort() const {
  // @@protoc_insertion_point(field_get:Trd_Common.MaxTrdQtys.maxSellShort)
  return maxsellshort_;
}
inline void MaxTrdQtys::set_maxsellshort(double value) {
  set_has_maxsellshort();
  maxsellshort_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.MaxTrdQtys.maxSellShort)
}

// optional double maxBuyBack = 5;
inline bool MaxTrdQtys::has_maxbuyback() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MaxTrdQtys::set_has_maxbuyback() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MaxTrdQtys::clear_has_maxbuyback() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MaxTrdQtys::clear_maxbuyback() {
  maxbuyback_ = 0;
  clear_has_maxbuyback();
}
inline double MaxTrdQtys::maxbuyback() const {
  // @@protoc_insertion_point(field_get:Trd_Common.MaxTrdQtys.maxBuyBack)
  return maxbuyback_;
}
inline void MaxTrdQtys::set_maxbuyback(double value) {
  set_has_maxbuyback();
  maxbuyback_ = value;
  // @@protoc_insertion_point(field_set:Trd_Common.MaxTrdQtys.maxBuyBack)
}

// -------------------------------------------------------------------

// TrdFilterConditions

// repeated string codeList = 1;
inline int TrdFilterConditions::codelist_size() const {
  return codelist_.size();
}
inline void TrdFilterConditions::clear_codelist() {
  codelist_.Clear();
}
inline const ::std::string& TrdFilterConditions::codelist(int index) const {
  // @@protoc_insertion_point(field_get:Trd_Common.TrdFilterConditions.codeList)
  return codelist_.Get(index);
}
inline ::std::string* TrdFilterConditions::mutable_codelist(int index) {
  // @@protoc_insertion_point(field_mutable:Trd_Common.TrdFilterConditions.codeList)
  return codelist_.Mutable(index);
}
inline void TrdFilterConditions::set_codelist(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Trd_Common.TrdFilterConditions.codeList)
  codelist_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TrdFilterConditions::set_codelist(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Trd_Common.TrdFilterConditions.codeList)
  codelist_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TrdFilterConditions::set_codelist(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  codelist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Trd_Common.TrdFilterConditions.codeList)
}
inline void TrdFilterConditions::set_codelist(int index, const char* value, size_t size) {
  codelist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Trd_Common.TrdFilterConditions.codeList)
}
inline ::std::string* TrdFilterConditions::add_codelist() {
  // @@protoc_insertion_point(field_add_mutable:Trd_Common.TrdFilterConditions.codeList)
  return codelist_.Add();
}
inline void TrdFilterConditions::add_codelist(const ::std::string& value) {
  codelist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Trd_Common.TrdFilterConditions.codeList)
}
#if LANG_CXX11
inline void TrdFilterConditions::add_codelist(::std::string&& value) {
  codelist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Trd_Common.TrdFilterConditions.codeList)
}
#endif
inline void TrdFilterConditions::add_codelist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  codelist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Trd_Common.TrdFilterConditions.codeList)
}
inline void TrdFilterConditions::add_codelist(const char* value, size_t size) {
  codelist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Trd_Common.TrdFilterConditions.codeList)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TrdFilterConditions::codelist() const {
  // @@protoc_insertion_point(field_list:Trd_Common.TrdFilterConditions.codeList)
  return codelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TrdFilterConditions::mutable_codelist() {
  // @@protoc_insertion_point(field_mutable_list:Trd_Common.TrdFilterConditions.codeList)
  return &codelist_;
}

// repeated uint64 idList = 2;
inline int TrdFilterConditions::idlist_size() const {
  return idlist_.size();
}
inline void TrdFilterConditions::clear_idlist() {
  idlist_.Clear();
}
inline ::google::protobuf::uint64 TrdFilterConditions::idlist(int index) const {
  // @@protoc_insertion_point(field_get:Trd_Common.TrdFilterConditions.idList)
  return idlist_.Get(index);
}
inline void TrdFilterConditions::set_idlist(int index, ::google::protobuf::uint64 value) {
  idlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:Trd_Common.TrdFilterConditions.idList)
}
inline void TrdFilterConditions::add_idlist(::google::protobuf::uint64 value) {
  idlist_.Add(value);
  // @@protoc_insertion_point(field_add:Trd_Common.TrdFilterConditions.idList)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TrdFilterConditions::idlist() const {
  // @@protoc_insertion_point(field_list:Trd_Common.TrdFilterConditions.idList)
  return idlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TrdFilterConditions::mutable_idlist() {
  // @@protoc_insertion_point(field_mutable_list:Trd_Common.TrdFilterConditions.idList)
  return &idlist_;
}

// optional string beginTime = 3;
inline bool TrdFilterConditions::has_begintime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrdFilterConditions::set_has_begintime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrdFilterConditions::clear_has_begintime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrdFilterConditions::clear_begintime() {
  begintime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_begintime();
}
inline const ::std::string& TrdFilterConditions::begintime() const {
  // @@protoc_insertion_point(field_get:Trd_Common.TrdFilterConditions.beginTime)
  return begintime_.GetNoArena();
}
inline void TrdFilterConditions::set_begintime(const ::std::string& value) {
  set_has_begintime();
  begintime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Trd_Common.TrdFilterConditions.beginTime)
}
#if LANG_CXX11
inline void TrdFilterConditions::set_begintime(::std::string&& value) {
  set_has_begintime();
  begintime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Trd_Common.TrdFilterConditions.beginTime)
}
#endif
inline void TrdFilterConditions::set_begintime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_begintime();
  begintime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Trd_Common.TrdFilterConditions.beginTime)
}
inline void TrdFilterConditions::set_begintime(const char* value, size_t size) {
  set_has_begintime();
  begintime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Trd_Common.TrdFilterConditions.beginTime)
}
inline ::std::string* TrdFilterConditions::mutable_begintime() {
  set_has_begintime();
  // @@protoc_insertion_point(field_mutable:Trd_Common.TrdFilterConditions.beginTime)
  return begintime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrdFilterConditions::release_begintime() {
  // @@protoc_insertion_point(field_release:Trd_Common.TrdFilterConditions.beginTime)
  clear_has_begintime();
  return begintime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrdFilterConditions::set_allocated_begintime(::std::string* begintime) {
  if (begintime != NULL) {
    set_has_begintime();
  } else {
    clear_has_begintime();
  }
  begintime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), begintime);
  // @@protoc_insertion_point(field_set_allocated:Trd_Common.TrdFilterConditions.beginTime)
}

// optional string endTime = 4;
inline bool TrdFilterConditions::has_endtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrdFilterConditions::set_has_endtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrdFilterConditions::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrdFilterConditions::clear_endtime() {
  endtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_endtime();
}
inline const ::std::string& TrdFilterConditions::endtime() const {
  // @@protoc_insertion_point(field_get:Trd_Common.TrdFilterConditions.endTime)
  return endtime_.GetNoArena();
}
inline void TrdFilterConditions::set_endtime(const ::std::string& value) {
  set_has_endtime();
  endtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Trd_Common.TrdFilterConditions.endTime)
}
#if LANG_CXX11
inline void TrdFilterConditions::set_endtime(::std::string&& value) {
  set_has_endtime();
  endtime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Trd_Common.TrdFilterConditions.endTime)
}
#endif
inline void TrdFilterConditions::set_endtime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_endtime();
  endtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Trd_Common.TrdFilterConditions.endTime)
}
inline void TrdFilterConditions::set_endtime(const char* value, size_t size) {
  set_has_endtime();
  endtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Trd_Common.TrdFilterConditions.endTime)
}
inline ::std::string* TrdFilterConditions::mutable_endtime() {
  set_has_endtime();
  // @@protoc_insertion_point(field_mutable:Trd_Common.TrdFilterConditions.endTime)
  return endtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrdFilterConditions::release_endtime() {
  // @@protoc_insertion_point(field_release:Trd_Common.TrdFilterConditions.endTime)
  clear_has_endtime();
  return endtime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrdFilterConditions::set_allocated_endtime(::std::string* endtime) {
  if (endtime != NULL) {
    set_has_endtime();
  } else {
    clear_has_endtime();
  }
  endtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), endtime);
  // @@protoc_insertion_point(field_set_allocated:Trd_Common.TrdFilterConditions.endTime)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Trd_Common

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Trd_Common::TrdEnv> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Trd_Common::TrdEnv>() {
  return ::Trd_Common::TrdEnv_descriptor();
}
template <> struct is_proto_enum< ::Trd_Common::TrdMarket> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Trd_Common::TrdMarket>() {
  return ::Trd_Common::TrdMarket_descriptor();
}
template <> struct is_proto_enum< ::Trd_Common::TrdSecMarket> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Trd_Common::TrdSecMarket>() {
  return ::Trd_Common::TrdSecMarket_descriptor();
}
template <> struct is_proto_enum< ::Trd_Common::TrdSide> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Trd_Common::TrdSide>() {
  return ::Trd_Common::TrdSide_descriptor();
}
template <> struct is_proto_enum< ::Trd_Common::OrderType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Trd_Common::OrderType>() {
  return ::Trd_Common::OrderType_descriptor();
}
template <> struct is_proto_enum< ::Trd_Common::OrderStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Trd_Common::OrderStatus>() {
  return ::Trd_Common::OrderStatus_descriptor();
}
template <> struct is_proto_enum< ::Trd_Common::OrderFillStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Trd_Common::OrderFillStatus>() {
  return ::Trd_Common::OrderFillStatus_descriptor();
}
template <> struct is_proto_enum< ::Trd_Common::PositionSide> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Trd_Common::PositionSide>() {
  return ::Trd_Common::PositionSide_descriptor();
}
template <> struct is_proto_enum< ::Trd_Common::ModifyOrderOp> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Trd_Common::ModifyOrderOp>() {
  return ::Trd_Common::ModifyOrderOp_descriptor();
}
template <> struct is_proto_enum< ::Trd_Common::TrdAccType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Trd_Common::TrdAccType>() {
  return ::Trd_Common::TrdAccType_descriptor();
}
template <> struct is_proto_enum< ::Trd_Common::Currency> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Trd_Common::Currency>() {
  return ::Trd_Common::Currency_descriptor();
}
template <> struct is_proto_enum< ::Trd_Common::CltRiskLevel> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Trd_Common::CltRiskLevel>() {
  return ::Trd_Common::CltRiskLevel_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Trd_5fCommon_2eproto__INCLUDED
