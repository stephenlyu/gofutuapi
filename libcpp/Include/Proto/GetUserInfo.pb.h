// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GetUserInfo.proto

#ifndef PROTOBUF_GetUserInfo_2eproto__INCLUDED
#define PROTOBUF_GetUserInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Common.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_GetUserInfo_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsC2SImpl();
void InitDefaultsC2S();
void InitDefaultsS2CImpl();
void InitDefaultsS2C();
void InitDefaultsRequestImpl();
void InitDefaultsRequest();
void InitDefaultsResponseImpl();
void InitDefaultsResponse();
inline void InitDefaults() {
  InitDefaultsC2S();
  InitDefaultsS2C();
  InitDefaultsRequest();
  InitDefaultsResponse();
}
}  // namespace protobuf_GetUserInfo_2eproto
namespace GetUserInfo {
class C2S;
class C2SDefaultTypeInternal;
extern C2SDefaultTypeInternal _C2S_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class S2C;
class S2CDefaultTypeInternal;
extern S2CDefaultTypeInternal _S2C_default_instance_;
}  // namespace GetUserInfo
namespace GetUserInfo {

enum UpdateType {
  UpdateType_None = 0,
  UpdateType_Advice = 1,
  UpdateType_Force = 2
};
bool UpdateType_IsValid(int value);
const UpdateType UpdateType_MIN = UpdateType_None;
const UpdateType UpdateType_MAX = UpdateType_Force;
const int UpdateType_ARRAYSIZE = UpdateType_MAX + 1;

const ::google::protobuf::EnumDescriptor* UpdateType_descriptor();
inline const ::std::string& UpdateType_Name(UpdateType value) {
  return ::google::protobuf::internal::NameOfEnum(
    UpdateType_descriptor(), value);
}
inline bool UpdateType_Parse(
    const ::std::string& name, UpdateType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UpdateType>(
    UpdateType_descriptor(), name, value);
}
enum UserInfoField {
  UserInfoField_Basic = 1,
  UserInfoField_API = 2,
  UserInfoField_QotRight = 4,
  UserInfoField_Disclaimer = 8,
  UserInfoField_Update = 16,
  UserInfoField_WebKey = 2048
};
bool UserInfoField_IsValid(int value);
const UserInfoField UserInfoField_MIN = UserInfoField_Basic;
const UserInfoField UserInfoField_MAX = UserInfoField_WebKey;
const int UserInfoField_ARRAYSIZE = UserInfoField_MAX + 1;

const ::google::protobuf::EnumDescriptor* UserInfoField_descriptor();
inline const ::std::string& UserInfoField_Name(UserInfoField value) {
  return ::google::protobuf::internal::NameOfEnum(
    UserInfoField_descriptor(), value);
}
inline bool UserInfoField_Parse(
    const ::std::string& name, UserInfoField* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UserInfoField>(
    UserInfoField_descriptor(), name, value);
}
// ===================================================================

class C2S : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GetUserInfo.C2S) */ {
 public:
  C2S();
  virtual ~C2S();

  C2S(const C2S& from);

  inline C2S& operator=(const C2S& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  C2S(C2S&& from) noexcept
    : C2S() {
    *this = ::std::move(from);
  }

  inline C2S& operator=(C2S&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2S& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2S* internal_default_instance() {
    return reinterpret_cast<const C2S*>(
               &_C2S_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(C2S* other);
  friend void swap(C2S& a, C2S& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline C2S* New() const PROTOBUF_FINAL { return New(NULL); }

  C2S* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const C2S& from);
  void MergeFrom(const C2S& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(C2S* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 flag = 2;
  bool has_flag() const;
  void clear_flag();
  static const int kFlagFieldNumber = 2;
  ::google::protobuf::int32 flag() const;
  void set_flag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GetUserInfo.C2S)
 private:
  void set_has_flag();
  void clear_has_flag();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 flag_;
  friend struct ::protobuf_GetUserInfo_2eproto::TableStruct;
  friend void ::protobuf_GetUserInfo_2eproto::InitDefaultsC2SImpl();
};
// -------------------------------------------------------------------

class S2C : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GetUserInfo.S2C) */ {
 public:
  S2C();
  virtual ~S2C();

  S2C(const S2C& from);

  inline S2C& operator=(const S2C& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2C(S2C&& from) noexcept
    : S2C() {
    *this = ::std::move(from);
  }

  inline S2C& operator=(S2C&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2C* internal_default_instance() {
    return reinterpret_cast<const S2C*>(
               &_S2C_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(S2C* other);
  friend void swap(S2C& a, S2C& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2C* New() const PROTOBUF_FINAL { return New(NULL); }

  S2C* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const S2C& from);
  void MergeFrom(const S2C& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(S2C* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string nickName = 1;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNickNameFieldNumber = 1;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // optional string avatarUrl = 2;
  bool has_avatarurl() const;
  void clear_avatarurl();
  static const int kAvatarUrlFieldNumber = 2;
  const ::std::string& avatarurl() const;
  void set_avatarurl(const ::std::string& value);
  #if LANG_CXX11
  void set_avatarurl(::std::string&& value);
  #endif
  void set_avatarurl(const char* value);
  void set_avatarurl(const char* value, size_t size);
  ::std::string* mutable_avatarurl();
  ::std::string* release_avatarurl();
  void set_allocated_avatarurl(::std::string* avatarurl);

  // optional string apiLevel = 3;
  bool has_apilevel() const;
  void clear_apilevel();
  static const int kApiLevelFieldNumber = 3;
  const ::std::string& apilevel() const;
  void set_apilevel(const ::std::string& value);
  #if LANG_CXX11
  void set_apilevel(::std::string&& value);
  #endif
  void set_apilevel(const char* value);
  void set_apilevel(const char* value, size_t size);
  ::std::string* mutable_apilevel();
  ::std::string* release_apilevel();
  void set_allocated_apilevel(::std::string* apilevel);

  // optional string webKey = 10;
  bool has_webkey() const;
  void clear_webkey();
  static const int kWebKeyFieldNumber = 10;
  const ::std::string& webkey() const;
  void set_webkey(const ::std::string& value);
  #if LANG_CXX11
  void set_webkey(::std::string&& value);
  #endif
  void set_webkey(const char* value);
  void set_webkey(const char* value, size_t size);
  ::std::string* mutable_webkey();
  ::std::string* release_webkey();
  void set_allocated_webkey(::std::string* webkey);

  // optional int32 hkQotRight = 4;
  bool has_hkqotright() const;
  void clear_hkqotright();
  static const int kHkQotRightFieldNumber = 4;
  ::google::protobuf::int32 hkqotright() const;
  void set_hkqotright(::google::protobuf::int32 value);

  // optional int32 usQotRight = 5;
  bool has_usqotright() const;
  void clear_usqotright();
  static const int kUsQotRightFieldNumber = 5;
  ::google::protobuf::int32 usqotright() const;
  void set_usqotright(::google::protobuf::int32 value);

  // optional int32 cnQotRight = 6;
  bool has_cnqotright() const;
  void clear_cnqotright();
  static const int kCnQotRightFieldNumber = 6;
  ::google::protobuf::int32 cnqotright() const;
  void set_cnqotright(::google::protobuf::int32 value);

  // optional int32 updateType = 9;
  bool has_updatetype() const;
  void clear_updatetype();
  static const int kUpdateTypeFieldNumber = 9;
  ::google::protobuf::int32 updatetype() const;
  void set_updatetype(::google::protobuf::int32 value);

  // optional int64 userID = 8;
  bool has_userid() const;
  void clear_userid();
  static const int kUserIDFieldNumber = 8;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // optional bool isNeedAgreeDisclaimer = 7;
  bool has_isneedagreedisclaimer() const;
  void clear_isneedagreedisclaimer();
  static const int kIsNeedAgreeDisclaimerFieldNumber = 7;
  bool isneedagreedisclaimer() const;
  void set_isneedagreedisclaimer(bool value);

  // optional bool hasUSOptionQotRight = 12;
  bool has_hasusoptionqotright() const;
  void clear_hasusoptionqotright();
  static const int kHasUSOptionQotRightFieldNumber = 12;
  bool hasusoptionqotright() const;
  void set_hasusoptionqotright(bool value);

  // optional int32 hkOptionQotRight = 11;
  bool has_hkoptionqotright() const;
  void clear_hkoptionqotright();
  static const int kHkOptionQotRightFieldNumber = 11;
  ::google::protobuf::int32 hkoptionqotright() const;
  void set_hkoptionqotright(::google::protobuf::int32 value);

  // optional int32 hkFutureQotRight = 13;
  bool has_hkfutureqotright() const;
  void clear_hkfutureqotright();
  static const int kHkFutureQotRightFieldNumber = 13;
  ::google::protobuf::int32 hkfutureqotright() const;
  void set_hkfutureqotright(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GetUserInfo.S2C)
 private:
  void set_has_nickname();
  void clear_has_nickname();
  void set_has_avatarurl();
  void clear_has_avatarurl();
  void set_has_apilevel();
  void clear_has_apilevel();
  void set_has_hkqotright();
  void clear_has_hkqotright();
  void set_has_usqotright();
  void clear_has_usqotright();
  void set_has_cnqotright();
  void clear_has_cnqotright();
  void set_has_isneedagreedisclaimer();
  void clear_has_isneedagreedisclaimer();
  void set_has_userid();
  void clear_has_userid();
  void set_has_updatetype();
  void clear_has_updatetype();
  void set_has_webkey();
  void clear_has_webkey();
  void set_has_hkoptionqotright();
  void clear_has_hkoptionqotright();
  void set_has_hasusoptionqotright();
  void clear_has_hasusoptionqotright();
  void set_has_hkfutureqotright();
  void clear_has_hkfutureqotright();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr avatarurl_;
  ::google::protobuf::internal::ArenaStringPtr apilevel_;
  ::google::protobuf::internal::ArenaStringPtr webkey_;
  ::google::protobuf::int32 hkqotright_;
  ::google::protobuf::int32 usqotright_;
  ::google::protobuf::int32 cnqotright_;
  ::google::protobuf::int32 updatetype_;
  ::google::protobuf::int64 userid_;
  bool isneedagreedisclaimer_;
  bool hasusoptionqotright_;
  ::google::protobuf::int32 hkoptionqotright_;
  ::google::protobuf::int32 hkfutureqotright_;
  friend struct ::protobuf_GetUserInfo_2eproto::TableStruct;
  friend void ::protobuf_GetUserInfo_2eproto::InitDefaultsS2CImpl();
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GetUserInfo.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const PROTOBUF_FINAL { return New(NULL); }

  Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .GetUserInfo.C2S c2s = 1;
  bool has_c2s() const;
  void clear_c2s();
  static const int kC2SFieldNumber = 1;
  const ::GetUserInfo::C2S& c2s() const;
  ::GetUserInfo::C2S* release_c2s();
  ::GetUserInfo::C2S* mutable_c2s();
  void set_allocated_c2s(::GetUserInfo::C2S* c2s);

  // @@protoc_insertion_point(class_scope:GetUserInfo.Request)
 private:
  void set_has_c2s();
  void clear_has_c2s();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::GetUserInfo::C2S* c2s_;
  friend struct ::protobuf_GetUserInfo_2eproto::TableStruct;
  friend void ::protobuf_GetUserInfo_2eproto::InitDefaultsRequestImpl();
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GetUserInfo.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Response* other);
  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const PROTOBUF_FINAL { return New(NULL); }

  Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string retMsg = 2;
  bool has_retmsg() const;
  void clear_retmsg();
  static const int kRetMsgFieldNumber = 2;
  const ::std::string& retmsg() const;
  void set_retmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_retmsg(::std::string&& value);
  #endif
  void set_retmsg(const char* value);
  void set_retmsg(const char* value, size_t size);
  ::std::string* mutable_retmsg();
  ::std::string* release_retmsg();
  void set_allocated_retmsg(::std::string* retmsg);

  // optional .GetUserInfo.S2C s2c = 4;
  bool has_s2c() const;
  void clear_s2c();
  static const int kS2CFieldNumber = 4;
  const ::GetUserInfo::S2C& s2c() const;
  ::GetUserInfo::S2C* release_s2c();
  ::GetUserInfo::S2C* mutable_s2c();
  void set_allocated_s2c(::GetUserInfo::S2C* s2c);

  // optional int32 errCode = 3;
  bool has_errcode() const;
  void clear_errcode();
  static const int kErrCodeFieldNumber = 3;
  ::google::protobuf::int32 errcode() const;
  void set_errcode(::google::protobuf::int32 value);

  // required int32 retType = 1 [default = -400];
  bool has_rettype() const;
  void clear_rettype();
  static const int kRetTypeFieldNumber = 1;
  ::google::protobuf::int32 rettype() const;
  void set_rettype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GetUserInfo.Response)
 private:
  void set_has_rettype();
  void clear_has_rettype();
  void set_has_retmsg();
  void clear_has_retmsg();
  void set_has_errcode();
  void clear_has_errcode();
  void set_has_s2c();
  void clear_has_s2c();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr retmsg_;
  ::GetUserInfo::S2C* s2c_;
  ::google::protobuf::int32 errcode_;
  ::google::protobuf::int32 rettype_;
  friend struct ::protobuf_GetUserInfo_2eproto::TableStruct;
  friend void ::protobuf_GetUserInfo_2eproto::InitDefaultsResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C2S

// optional int32 flag = 2;
inline bool C2S::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2S::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2S::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2S::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 C2S::flag() const {
  // @@protoc_insertion_point(field_get:GetUserInfo.C2S.flag)
  return flag_;
}
inline void C2S::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:GetUserInfo.C2S.flag)
}

// -------------------------------------------------------------------

// S2C

// optional string nickName = 1;
inline bool S2C::has_nickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2C::set_has_nickname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2C::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2C::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
inline const ::std::string& S2C::nickname() const {
  // @@protoc_insertion_point(field_get:GetUserInfo.S2C.nickName)
  return nickname_.GetNoArena();
}
inline void S2C::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GetUserInfo.S2C.nickName)
}
#if LANG_CXX11
inline void S2C::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetUserInfo.S2C.nickName)
}
#endif
inline void S2C::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetUserInfo.S2C.nickName)
}
inline void S2C::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetUserInfo.S2C.nickName)
}
inline ::std::string* S2C::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:GetUserInfo.S2C.nickName)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2C::release_nickname() {
  // @@protoc_insertion_point(field_release:GetUserInfo.S2C.nickName)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2C::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:GetUserInfo.S2C.nickName)
}

// optional string avatarUrl = 2;
inline bool S2C::has_avatarurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2C::set_has_avatarurl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2C::clear_has_avatarurl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2C::clear_avatarurl() {
  avatarurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_avatarurl();
}
inline const ::std::string& S2C::avatarurl() const {
  // @@protoc_insertion_point(field_get:GetUserInfo.S2C.avatarUrl)
  return avatarurl_.GetNoArena();
}
inline void S2C::set_avatarurl(const ::std::string& value) {
  set_has_avatarurl();
  avatarurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GetUserInfo.S2C.avatarUrl)
}
#if LANG_CXX11
inline void S2C::set_avatarurl(::std::string&& value) {
  set_has_avatarurl();
  avatarurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetUserInfo.S2C.avatarUrl)
}
#endif
inline void S2C::set_avatarurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_avatarurl();
  avatarurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetUserInfo.S2C.avatarUrl)
}
inline void S2C::set_avatarurl(const char* value, size_t size) {
  set_has_avatarurl();
  avatarurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetUserInfo.S2C.avatarUrl)
}
inline ::std::string* S2C::mutable_avatarurl() {
  set_has_avatarurl();
  // @@protoc_insertion_point(field_mutable:GetUserInfo.S2C.avatarUrl)
  return avatarurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2C::release_avatarurl() {
  // @@protoc_insertion_point(field_release:GetUserInfo.S2C.avatarUrl)
  clear_has_avatarurl();
  return avatarurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2C::set_allocated_avatarurl(::std::string* avatarurl) {
  if (avatarurl != NULL) {
    set_has_avatarurl();
  } else {
    clear_has_avatarurl();
  }
  avatarurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatarurl);
  // @@protoc_insertion_point(field_set_allocated:GetUserInfo.S2C.avatarUrl)
}

// optional string apiLevel = 3;
inline bool S2C::has_apilevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2C::set_has_apilevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2C::clear_has_apilevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2C::clear_apilevel() {
  apilevel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_apilevel();
}
inline const ::std::string& S2C::apilevel() const {
  // @@protoc_insertion_point(field_get:GetUserInfo.S2C.apiLevel)
  return apilevel_.GetNoArena();
}
inline void S2C::set_apilevel(const ::std::string& value) {
  set_has_apilevel();
  apilevel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GetUserInfo.S2C.apiLevel)
}
#if LANG_CXX11
inline void S2C::set_apilevel(::std::string&& value) {
  set_has_apilevel();
  apilevel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetUserInfo.S2C.apiLevel)
}
#endif
inline void S2C::set_apilevel(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_apilevel();
  apilevel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetUserInfo.S2C.apiLevel)
}
inline void S2C::set_apilevel(const char* value, size_t size) {
  set_has_apilevel();
  apilevel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetUserInfo.S2C.apiLevel)
}
inline ::std::string* S2C::mutable_apilevel() {
  set_has_apilevel();
  // @@protoc_insertion_point(field_mutable:GetUserInfo.S2C.apiLevel)
  return apilevel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2C::release_apilevel() {
  // @@protoc_insertion_point(field_release:GetUserInfo.S2C.apiLevel)
  clear_has_apilevel();
  return apilevel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2C::set_allocated_apilevel(::std::string* apilevel) {
  if (apilevel != NULL) {
    set_has_apilevel();
  } else {
    clear_has_apilevel();
  }
  apilevel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), apilevel);
  // @@protoc_insertion_point(field_set_allocated:GetUserInfo.S2C.apiLevel)
}

// optional int32 hkQotRight = 4;
inline bool S2C::has_hkqotright() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2C::set_has_hkqotright() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2C::clear_has_hkqotright() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2C::clear_hkqotright() {
  hkqotright_ = 0;
  clear_has_hkqotright();
}
inline ::google::protobuf::int32 S2C::hkqotright() const {
  // @@protoc_insertion_point(field_get:GetUserInfo.S2C.hkQotRight)
  return hkqotright_;
}
inline void S2C::set_hkqotright(::google::protobuf::int32 value) {
  set_has_hkqotright();
  hkqotright_ = value;
  // @@protoc_insertion_point(field_set:GetUserInfo.S2C.hkQotRight)
}

// optional int32 usQotRight = 5;
inline bool S2C::has_usqotright() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void S2C::set_has_usqotright() {
  _has_bits_[0] |= 0x00000020u;
}
inline void S2C::clear_has_usqotright() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void S2C::clear_usqotright() {
  usqotright_ = 0;
  clear_has_usqotright();
}
inline ::google::protobuf::int32 S2C::usqotright() const {
  // @@protoc_insertion_point(field_get:GetUserInfo.S2C.usQotRight)
  return usqotright_;
}
inline void S2C::set_usqotright(::google::protobuf::int32 value) {
  set_has_usqotright();
  usqotright_ = value;
  // @@protoc_insertion_point(field_set:GetUserInfo.S2C.usQotRight)
}

// optional int32 cnQotRight = 6;
inline bool S2C::has_cnqotright() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void S2C::set_has_cnqotright() {
  _has_bits_[0] |= 0x00000040u;
}
inline void S2C::clear_has_cnqotright() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void S2C::clear_cnqotright() {
  cnqotright_ = 0;
  clear_has_cnqotright();
}
inline ::google::protobuf::int32 S2C::cnqotright() const {
  // @@protoc_insertion_point(field_get:GetUserInfo.S2C.cnQotRight)
  return cnqotright_;
}
inline void S2C::set_cnqotright(::google::protobuf::int32 value) {
  set_has_cnqotright();
  cnqotright_ = value;
  // @@protoc_insertion_point(field_set:GetUserInfo.S2C.cnQotRight)
}

// optional bool isNeedAgreeDisclaimer = 7;
inline bool S2C::has_isneedagreedisclaimer() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void S2C::set_has_isneedagreedisclaimer() {
  _has_bits_[0] |= 0x00000200u;
}
inline void S2C::clear_has_isneedagreedisclaimer() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void S2C::clear_isneedagreedisclaimer() {
  isneedagreedisclaimer_ = false;
  clear_has_isneedagreedisclaimer();
}
inline bool S2C::isneedagreedisclaimer() const {
  // @@protoc_insertion_point(field_get:GetUserInfo.S2C.isNeedAgreeDisclaimer)
  return isneedagreedisclaimer_;
}
inline void S2C::set_isneedagreedisclaimer(bool value) {
  set_has_isneedagreedisclaimer();
  isneedagreedisclaimer_ = value;
  // @@protoc_insertion_point(field_set:GetUserInfo.S2C.isNeedAgreeDisclaimer)
}

// optional int64 userID = 8;
inline bool S2C::has_userid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void S2C::set_has_userid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void S2C::clear_has_userid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void S2C::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::int64 S2C::userid() const {
  // @@protoc_insertion_point(field_get:GetUserInfo.S2C.userID)
  return userid_;
}
inline void S2C::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:GetUserInfo.S2C.userID)
}

// optional int32 updateType = 9;
inline bool S2C::has_updatetype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void S2C::set_has_updatetype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void S2C::clear_has_updatetype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void S2C::clear_updatetype() {
  updatetype_ = 0;
  clear_has_updatetype();
}
inline ::google::protobuf::int32 S2C::updatetype() const {
  // @@protoc_insertion_point(field_get:GetUserInfo.S2C.updateType)
  return updatetype_;
}
inline void S2C::set_updatetype(::google::protobuf::int32 value) {
  set_has_updatetype();
  updatetype_ = value;
  // @@protoc_insertion_point(field_set:GetUserInfo.S2C.updateType)
}

// optional string webKey = 10;
inline bool S2C::has_webkey() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2C::set_has_webkey() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2C::clear_has_webkey() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2C::clear_webkey() {
  webkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_webkey();
}
inline const ::std::string& S2C::webkey() const {
  // @@protoc_insertion_point(field_get:GetUserInfo.S2C.webKey)
  return webkey_.GetNoArena();
}
inline void S2C::set_webkey(const ::std::string& value) {
  set_has_webkey();
  webkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GetUserInfo.S2C.webKey)
}
#if LANG_CXX11
inline void S2C::set_webkey(::std::string&& value) {
  set_has_webkey();
  webkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetUserInfo.S2C.webKey)
}
#endif
inline void S2C::set_webkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_webkey();
  webkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetUserInfo.S2C.webKey)
}
inline void S2C::set_webkey(const char* value, size_t size) {
  set_has_webkey();
  webkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetUserInfo.S2C.webKey)
}
inline ::std::string* S2C::mutable_webkey() {
  set_has_webkey();
  // @@protoc_insertion_point(field_mutable:GetUserInfo.S2C.webKey)
  return webkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2C::release_webkey() {
  // @@protoc_insertion_point(field_release:GetUserInfo.S2C.webKey)
  clear_has_webkey();
  return webkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2C::set_allocated_webkey(::std::string* webkey) {
  if (webkey != NULL) {
    set_has_webkey();
  } else {
    clear_has_webkey();
  }
  webkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), webkey);
  // @@protoc_insertion_point(field_set_allocated:GetUserInfo.S2C.webKey)
}

// optional int32 hkOptionQotRight = 11;
inline bool S2C::has_hkoptionqotright() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void S2C::set_has_hkoptionqotright() {
  _has_bits_[0] |= 0x00000800u;
}
inline void S2C::clear_has_hkoptionqotright() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void S2C::clear_hkoptionqotright() {
  hkoptionqotright_ = 0;
  clear_has_hkoptionqotright();
}
inline ::google::protobuf::int32 S2C::hkoptionqotright() const {
  // @@protoc_insertion_point(field_get:GetUserInfo.S2C.hkOptionQotRight)
  return hkoptionqotright_;
}
inline void S2C::set_hkoptionqotright(::google::protobuf::int32 value) {
  set_has_hkoptionqotright();
  hkoptionqotright_ = value;
  // @@protoc_insertion_point(field_set:GetUserInfo.S2C.hkOptionQotRight)
}

// optional bool hasUSOptionQotRight = 12;
inline bool S2C::has_hasusoptionqotright() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void S2C::set_has_hasusoptionqotright() {
  _has_bits_[0] |= 0x00000400u;
}
inline void S2C::clear_has_hasusoptionqotright() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void S2C::clear_hasusoptionqotright() {
  hasusoptionqotright_ = false;
  clear_has_hasusoptionqotright();
}
inline bool S2C::hasusoptionqotright() const {
  // @@protoc_insertion_point(field_get:GetUserInfo.S2C.hasUSOptionQotRight)
  return hasusoptionqotright_;
}
inline void S2C::set_hasusoptionqotright(bool value) {
  set_has_hasusoptionqotright();
  hasusoptionqotright_ = value;
  // @@protoc_insertion_point(field_set:GetUserInfo.S2C.hasUSOptionQotRight)
}

// optional int32 hkFutureQotRight = 13;
inline bool S2C::has_hkfutureqotright() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void S2C::set_has_hkfutureqotright() {
  _has_bits_[0] |= 0x00001000u;
}
inline void S2C::clear_has_hkfutureqotright() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void S2C::clear_hkfutureqotright() {
  hkfutureqotright_ = 0;
  clear_has_hkfutureqotright();
}
inline ::google::protobuf::int32 S2C::hkfutureqotright() const {
  // @@protoc_insertion_point(field_get:GetUserInfo.S2C.hkFutureQotRight)
  return hkfutureqotright_;
}
inline void S2C::set_hkfutureqotright(::google::protobuf::int32 value) {
  set_has_hkfutureqotright();
  hkfutureqotright_ = value;
  // @@protoc_insertion_point(field_set:GetUserInfo.S2C.hkFutureQotRight)
}

// -------------------------------------------------------------------

// Request

// required .GetUserInfo.C2S c2s = 1;
inline bool Request::has_c2s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_c2s() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_c2s() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_c2s() {
  if (c2s_ != NULL) c2s_->Clear();
  clear_has_c2s();
}
inline const ::GetUserInfo::C2S& Request::c2s() const {
  const ::GetUserInfo::C2S* p = c2s_;
  // @@protoc_insertion_point(field_get:GetUserInfo.Request.c2s)
  return p != NULL ? *p : *reinterpret_cast<const ::GetUserInfo::C2S*>(
      &::GetUserInfo::_C2S_default_instance_);
}
inline ::GetUserInfo::C2S* Request::release_c2s() {
  // @@protoc_insertion_point(field_release:GetUserInfo.Request.c2s)
  clear_has_c2s();
  ::GetUserInfo::C2S* temp = c2s_;
  c2s_ = NULL;
  return temp;
}
inline ::GetUserInfo::C2S* Request::mutable_c2s() {
  set_has_c2s();
  if (c2s_ == NULL) {
    c2s_ = new ::GetUserInfo::C2S;
  }
  // @@protoc_insertion_point(field_mutable:GetUserInfo.Request.c2s)
  return c2s_;
}
inline void Request::set_allocated_c2s(::GetUserInfo::C2S* c2s) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete c2s_;
  }
  if (c2s) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      c2s = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, c2s, submessage_arena);
    }
    set_has_c2s();
  } else {
    clear_has_c2s();
  }
  c2s_ = c2s;
  // @@protoc_insertion_point(field_set_allocated:GetUserInfo.Request.c2s)
}

// -------------------------------------------------------------------

// Response

// required int32 retType = 1 [default = -400];
inline bool Response::has_rettype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Response::set_has_rettype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Response::clear_has_rettype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Response::clear_rettype() {
  rettype_ = -400;
  clear_has_rettype();
}
inline ::google::protobuf::int32 Response::rettype() const {
  // @@protoc_insertion_point(field_get:GetUserInfo.Response.retType)
  return rettype_;
}
inline void Response::set_rettype(::google::protobuf::int32 value) {
  set_has_rettype();
  rettype_ = value;
  // @@protoc_insertion_point(field_set:GetUserInfo.Response.retType)
}

// optional string retMsg = 2;
inline bool Response::has_retmsg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::set_has_retmsg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response::clear_has_retmsg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response::clear_retmsg() {
  retmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_retmsg();
}
inline const ::std::string& Response::retmsg() const {
  // @@protoc_insertion_point(field_get:GetUserInfo.Response.retMsg)
  return retmsg_.GetNoArena();
}
inline void Response::set_retmsg(const ::std::string& value) {
  set_has_retmsg();
  retmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GetUserInfo.Response.retMsg)
}
#if LANG_CXX11
inline void Response::set_retmsg(::std::string&& value) {
  set_has_retmsg();
  retmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetUserInfo.Response.retMsg)
}
#endif
inline void Response::set_retmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_retmsg();
  retmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetUserInfo.Response.retMsg)
}
inline void Response::set_retmsg(const char* value, size_t size) {
  set_has_retmsg();
  retmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetUserInfo.Response.retMsg)
}
inline ::std::string* Response::mutable_retmsg() {
  set_has_retmsg();
  // @@protoc_insertion_point(field_mutable:GetUserInfo.Response.retMsg)
  return retmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_retmsg() {
  // @@protoc_insertion_point(field_release:GetUserInfo.Response.retMsg)
  clear_has_retmsg();
  return retmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_retmsg(::std::string* retmsg) {
  if (retmsg != NULL) {
    set_has_retmsg();
  } else {
    clear_has_retmsg();
  }
  retmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), retmsg);
  // @@protoc_insertion_point(field_set_allocated:GetUserInfo.Response.retMsg)
}

// optional int32 errCode = 3;
inline bool Response::has_errcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Response::set_has_errcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Response::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Response::clear_errcode() {
  errcode_ = 0;
  clear_has_errcode();
}
inline ::google::protobuf::int32 Response::errcode() const {
  // @@protoc_insertion_point(field_get:GetUserInfo.Response.errCode)
  return errcode_;
}
inline void Response::set_errcode(::google::protobuf::int32 value) {
  set_has_errcode();
  errcode_ = value;
  // @@protoc_insertion_point(field_set:GetUserInfo.Response.errCode)
}

// optional .GetUserInfo.S2C s2c = 4;
inline bool Response::has_s2c() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response::set_has_s2c() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Response::clear_has_s2c() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Response::clear_s2c() {
  if (s2c_ != NULL) s2c_->Clear();
  clear_has_s2c();
}
inline const ::GetUserInfo::S2C& Response::s2c() const {
  const ::GetUserInfo::S2C* p = s2c_;
  // @@protoc_insertion_point(field_get:GetUserInfo.Response.s2c)
  return p != NULL ? *p : *reinterpret_cast<const ::GetUserInfo::S2C*>(
      &::GetUserInfo::_S2C_default_instance_);
}
inline ::GetUserInfo::S2C* Response::release_s2c() {
  // @@protoc_insertion_point(field_release:GetUserInfo.Response.s2c)
  clear_has_s2c();
  ::GetUserInfo::S2C* temp = s2c_;
  s2c_ = NULL;
  return temp;
}
inline ::GetUserInfo::S2C* Response::mutable_s2c() {
  set_has_s2c();
  if (s2c_ == NULL) {
    s2c_ = new ::GetUserInfo::S2C;
  }
  // @@protoc_insertion_point(field_mutable:GetUserInfo.Response.s2c)
  return s2c_;
}
inline void Response::set_allocated_s2c(::GetUserInfo::S2C* s2c) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete s2c_;
  }
  if (s2c) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      s2c = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, s2c, submessage_arena);
    }
    set_has_s2c();
  } else {
    clear_has_s2c();
  }
  s2c_ = s2c;
  // @@protoc_insertion_point(field_set_allocated:GetUserInfo.Response.s2c)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace GetUserInfo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::GetUserInfo::UpdateType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GetUserInfo::UpdateType>() {
  return ::GetUserInfo::UpdateType_descriptor();
}
template <> struct is_proto_enum< ::GetUserInfo::UserInfoField> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GetUserInfo::UserInfoField>() {
  return ::GetUserInfo::UserInfoField_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GetUserInfo_2eproto__INCLUDED
