// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Qot_Common.proto

#ifndef PROTOBUF_Qot_5fCommon_2eproto__INCLUDED
#define PROTOBUF_Qot_5fCommon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Common.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_Qot_5fCommon_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[21];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsSecurityImpl();
void InitDefaultsSecurity();
void InitDefaultsKLineImpl();
void InitDefaultsKLine();
void InitDefaultsOptionBasicQotExDataImpl();
void InitDefaultsOptionBasicQotExData();
void InitDefaultsPreAfterMarketDataImpl();
void InitDefaultsPreAfterMarketData();
void InitDefaultsFutureBasicQotExDataImpl();
void InitDefaultsFutureBasicQotExData();
void InitDefaultsBasicQotImpl();
void InitDefaultsBasicQot();
void InitDefaultsTimeShareImpl();
void InitDefaultsTimeShare();
void InitDefaultsSecurityStaticBasicImpl();
void InitDefaultsSecurityStaticBasic();
void InitDefaultsWarrantStaticExDataImpl();
void InitDefaultsWarrantStaticExData();
void InitDefaultsOptionStaticExDataImpl();
void InitDefaultsOptionStaticExData();
void InitDefaultsFutureStaticExDataImpl();
void InitDefaultsFutureStaticExData();
void InitDefaultsSecurityStaticInfoImpl();
void InitDefaultsSecurityStaticInfo();
void InitDefaultsBrokerImpl();
void InitDefaultsBroker();
void InitDefaultsTickerImpl();
void InitDefaultsTicker();
void InitDefaultsOrderBookImpl();
void InitDefaultsOrderBook();
void InitDefaultsOrderDetailImpl();
void InitDefaultsOrderDetail();
void InitDefaultsShareHoldingChangeImpl();
void InitDefaultsShareHoldingChange();
void InitDefaultsSubInfoImpl();
void InitDefaultsSubInfo();
void InitDefaultsConnSubInfoImpl();
void InitDefaultsConnSubInfo();
void InitDefaultsPlateInfoImpl();
void InitDefaultsPlateInfo();
void InitDefaultsRehabImpl();
void InitDefaultsRehab();
inline void InitDefaults() {
  InitDefaultsSecurity();
  InitDefaultsKLine();
  InitDefaultsOptionBasicQotExData();
  InitDefaultsPreAfterMarketData();
  InitDefaultsFutureBasicQotExData();
  InitDefaultsBasicQot();
  InitDefaultsTimeShare();
  InitDefaultsSecurityStaticBasic();
  InitDefaultsWarrantStaticExData();
  InitDefaultsOptionStaticExData();
  InitDefaultsFutureStaticExData();
  InitDefaultsSecurityStaticInfo();
  InitDefaultsBroker();
  InitDefaultsTicker();
  InitDefaultsOrderBook();
  InitDefaultsOrderDetail();
  InitDefaultsShareHoldingChange();
  InitDefaultsSubInfo();
  InitDefaultsConnSubInfo();
  InitDefaultsPlateInfo();
  InitDefaultsRehab();
}
}  // namespace protobuf_Qot_5fCommon_2eproto
namespace Qot_Common {
class BasicQot;
class BasicQotDefaultTypeInternal;
extern BasicQotDefaultTypeInternal _BasicQot_default_instance_;
class Broker;
class BrokerDefaultTypeInternal;
extern BrokerDefaultTypeInternal _Broker_default_instance_;
class ConnSubInfo;
class ConnSubInfoDefaultTypeInternal;
extern ConnSubInfoDefaultTypeInternal _ConnSubInfo_default_instance_;
class FutureBasicQotExData;
class FutureBasicQotExDataDefaultTypeInternal;
extern FutureBasicQotExDataDefaultTypeInternal _FutureBasicQotExData_default_instance_;
class FutureStaticExData;
class FutureStaticExDataDefaultTypeInternal;
extern FutureStaticExDataDefaultTypeInternal _FutureStaticExData_default_instance_;
class KLine;
class KLineDefaultTypeInternal;
extern KLineDefaultTypeInternal _KLine_default_instance_;
class OptionBasicQotExData;
class OptionBasicQotExDataDefaultTypeInternal;
extern OptionBasicQotExDataDefaultTypeInternal _OptionBasicQotExData_default_instance_;
class OptionStaticExData;
class OptionStaticExDataDefaultTypeInternal;
extern OptionStaticExDataDefaultTypeInternal _OptionStaticExData_default_instance_;
class OrderBook;
class OrderBookDefaultTypeInternal;
extern OrderBookDefaultTypeInternal _OrderBook_default_instance_;
class OrderDetail;
class OrderDetailDefaultTypeInternal;
extern OrderDetailDefaultTypeInternal _OrderDetail_default_instance_;
class PlateInfo;
class PlateInfoDefaultTypeInternal;
extern PlateInfoDefaultTypeInternal _PlateInfo_default_instance_;
class PreAfterMarketData;
class PreAfterMarketDataDefaultTypeInternal;
extern PreAfterMarketDataDefaultTypeInternal _PreAfterMarketData_default_instance_;
class Rehab;
class RehabDefaultTypeInternal;
extern RehabDefaultTypeInternal _Rehab_default_instance_;
class Security;
class SecurityDefaultTypeInternal;
extern SecurityDefaultTypeInternal _Security_default_instance_;
class SecurityStaticBasic;
class SecurityStaticBasicDefaultTypeInternal;
extern SecurityStaticBasicDefaultTypeInternal _SecurityStaticBasic_default_instance_;
class SecurityStaticInfo;
class SecurityStaticInfoDefaultTypeInternal;
extern SecurityStaticInfoDefaultTypeInternal _SecurityStaticInfo_default_instance_;
class ShareHoldingChange;
class ShareHoldingChangeDefaultTypeInternal;
extern ShareHoldingChangeDefaultTypeInternal _ShareHoldingChange_default_instance_;
class SubInfo;
class SubInfoDefaultTypeInternal;
extern SubInfoDefaultTypeInternal _SubInfo_default_instance_;
class Ticker;
class TickerDefaultTypeInternal;
extern TickerDefaultTypeInternal _Ticker_default_instance_;
class TimeShare;
class TimeShareDefaultTypeInternal;
extern TimeShareDefaultTypeInternal _TimeShare_default_instance_;
class WarrantStaticExData;
class WarrantStaticExDataDefaultTypeInternal;
extern WarrantStaticExDataDefaultTypeInternal _WarrantStaticExData_default_instance_;
}  // namespace Qot_Common
namespace Qot_Common {

enum QotMarket {
  QotMarket_Unknown = 0,
  QotMarket_HK_Security = 1,
  QotMarket_HK_Future = 2,
  QotMarket_US_Security = 11,
  QotMarket_CNSH_Security = 21,
  QotMarket_CNSZ_Security = 22
};
bool QotMarket_IsValid(int value);
const QotMarket QotMarket_MIN = QotMarket_Unknown;
const QotMarket QotMarket_MAX = QotMarket_CNSZ_Security;
const int QotMarket_ARRAYSIZE = QotMarket_MAX + 1;

const ::google::protobuf::EnumDescriptor* QotMarket_descriptor();
inline const ::std::string& QotMarket_Name(QotMarket value) {
  return ::google::protobuf::internal::NameOfEnum(
    QotMarket_descriptor(), value);
}
inline bool QotMarket_Parse(
    const ::std::string& name, QotMarket* value) {
  return ::google::protobuf::internal::ParseNamedEnum<QotMarket>(
    QotMarket_descriptor(), name, value);
}
enum SecurityType {
  SecurityType_Unknown = 0,
  SecurityType_Bond = 1,
  SecurityType_Bwrt = 2,
  SecurityType_Eqty = 3,
  SecurityType_Trust = 4,
  SecurityType_Warrant = 5,
  SecurityType_Index = 6,
  SecurityType_Plate = 7,
  SecurityType_Drvt = 8,
  SecurityType_PlateSet = 9,
  SecurityType_Future = 10
};
bool SecurityType_IsValid(int value);
const SecurityType SecurityType_MIN = SecurityType_Unknown;
const SecurityType SecurityType_MAX = SecurityType_Future;
const int SecurityType_ARRAYSIZE = SecurityType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SecurityType_descriptor();
inline const ::std::string& SecurityType_Name(SecurityType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SecurityType_descriptor(), value);
}
inline bool SecurityType_Parse(
    const ::std::string& name, SecurityType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SecurityType>(
    SecurityType_descriptor(), name, value);
}
enum PlateSetType {
  PlateSetType_All = 0,
  PlateSetType_Industry = 1,
  PlateSetType_Region = 2,
  PlateSetType_Concept = 3,
  PlateSetType_Other = 4
};
bool PlateSetType_IsValid(int value);
const PlateSetType PlateSetType_MIN = PlateSetType_All;
const PlateSetType PlateSetType_MAX = PlateSetType_Other;
const int PlateSetType_ARRAYSIZE = PlateSetType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlateSetType_descriptor();
inline const ::std::string& PlateSetType_Name(PlateSetType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlateSetType_descriptor(), value);
}
inline bool PlateSetType_Parse(
    const ::std::string& name, PlateSetType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlateSetType>(
    PlateSetType_descriptor(), name, value);
}
enum WarrantType {
  WarrantType_Unknown = 0,
  WarrantType_Buy = 1,
  WarrantType_Sell = 2,
  WarrantType_Bull = 3,
  WarrantType_Bear = 4,
  WarrantType_InLine = 5
};
bool WarrantType_IsValid(int value);
const WarrantType WarrantType_MIN = WarrantType_Unknown;
const WarrantType WarrantType_MAX = WarrantType_InLine;
const int WarrantType_ARRAYSIZE = WarrantType_MAX + 1;

const ::google::protobuf::EnumDescriptor* WarrantType_descriptor();
inline const ::std::string& WarrantType_Name(WarrantType value) {
  return ::google::protobuf::internal::NameOfEnum(
    WarrantType_descriptor(), value);
}
inline bool WarrantType_Parse(
    const ::std::string& name, WarrantType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WarrantType>(
    WarrantType_descriptor(), name, value);
}
enum OptionType {
  OptionType_Unknown = 0,
  OptionType_Call = 1,
  OptionType_Put = 2
};
bool OptionType_IsValid(int value);
const OptionType OptionType_MIN = OptionType_Unknown;
const OptionType OptionType_MAX = OptionType_Put;
const int OptionType_ARRAYSIZE = OptionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* OptionType_descriptor();
inline const ::std::string& OptionType_Name(OptionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OptionType_descriptor(), value);
}
inline bool OptionType_Parse(
    const ::std::string& name, OptionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OptionType>(
    OptionType_descriptor(), name, value);
}
enum IndexOptionType {
  IndexOptionType_Unknown = 0,
  IndexOptionType_Normal = 1,
  IndexOptionType_Small = 2
};
bool IndexOptionType_IsValid(int value);
const IndexOptionType IndexOptionType_MIN = IndexOptionType_Unknown;
const IndexOptionType IndexOptionType_MAX = IndexOptionType_Small;
const int IndexOptionType_ARRAYSIZE = IndexOptionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* IndexOptionType_descriptor();
inline const ::std::string& IndexOptionType_Name(IndexOptionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    IndexOptionType_descriptor(), value);
}
inline bool IndexOptionType_Parse(
    const ::std::string& name, IndexOptionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IndexOptionType>(
    IndexOptionType_descriptor(), name, value);
}
enum OptionAreaType {
  OptionAreaType_Unknown = 0,
  OptionAreaType_American = 1,
  OptionAreaType_European = 2,
  OptionAreaType_Bermuda = 3
};
bool OptionAreaType_IsValid(int value);
const OptionAreaType OptionAreaType_MIN = OptionAreaType_Unknown;
const OptionAreaType OptionAreaType_MAX = OptionAreaType_Bermuda;
const int OptionAreaType_ARRAYSIZE = OptionAreaType_MAX + 1;

const ::google::protobuf::EnumDescriptor* OptionAreaType_descriptor();
inline const ::std::string& OptionAreaType_Name(OptionAreaType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OptionAreaType_descriptor(), value);
}
inline bool OptionAreaType_Parse(
    const ::std::string& name, OptionAreaType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OptionAreaType>(
    OptionAreaType_descriptor(), name, value);
}
enum QotMarketState {
  QotMarketState_None = 0,
  QotMarketState_Auction = 1,
  QotMarketState_WaitingOpen = 2,
  QotMarketState_Morning = 3,
  QotMarketState_Rest = 4,
  QotMarketState_Afternoon = 5,
  QotMarketState_Closed = 6,
  QotMarketState_PreMarketBegin = 8,
  QotMarketState_PreMarketEnd = 9,
  QotMarketState_AfterHoursBegin = 10,
  QotMarketState_AfterHoursEnd = 11,
  QotMarketState_NightOpen = 13,
  QotMarketState_NightEnd = 14,
  QotMarketState_FutureDayOpen = 15,
  QotMarketState_FutureDayBreak = 16,
  QotMarketState_FutureDayClose = 17,
  QotMarketState_FutureDayWaitForOpen = 18,
  QotMarketState_HkCas = 19
};
bool QotMarketState_IsValid(int value);
const QotMarketState QotMarketState_MIN = QotMarketState_None;
const QotMarketState QotMarketState_MAX = QotMarketState_HkCas;
const int QotMarketState_ARRAYSIZE = QotMarketState_MAX + 1;

const ::google::protobuf::EnumDescriptor* QotMarketState_descriptor();
inline const ::std::string& QotMarketState_Name(QotMarketState value) {
  return ::google::protobuf::internal::NameOfEnum(
    QotMarketState_descriptor(), value);
}
inline bool QotMarketState_Parse(
    const ::std::string& name, QotMarketState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<QotMarketState>(
    QotMarketState_descriptor(), name, value);
}
enum TradeDateType {
  TradeDateType_Whole = 0,
  TradeDateType_Morning = 1,
  TradeDateType_Afternoon = 2
};
bool TradeDateType_IsValid(int value);
const TradeDateType TradeDateType_MIN = TradeDateType_Whole;
const TradeDateType TradeDateType_MAX = TradeDateType_Afternoon;
const int TradeDateType_ARRAYSIZE = TradeDateType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TradeDateType_descriptor();
inline const ::std::string& TradeDateType_Name(TradeDateType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TradeDateType_descriptor(), value);
}
inline bool TradeDateType_Parse(
    const ::std::string& name, TradeDateType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TradeDateType>(
    TradeDateType_descriptor(), name, value);
}
enum RehabType {
  RehabType_None = 0,
  RehabType_Forward = 1,
  RehabType_Backward = 2
};
bool RehabType_IsValid(int value);
const RehabType RehabType_MIN = RehabType_None;
const RehabType RehabType_MAX = RehabType_Backward;
const int RehabType_ARRAYSIZE = RehabType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RehabType_descriptor();
inline const ::std::string& RehabType_Name(RehabType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RehabType_descriptor(), value);
}
inline bool RehabType_Parse(
    const ::std::string& name, RehabType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RehabType>(
    RehabType_descriptor(), name, value);
}
enum KLType {
  KLType_Unknown = 0,
  KLType_1Min = 1,
  KLType_Day = 2,
  KLType_Week = 3,
  KLType_Month = 4,
  KLType_Year = 5,
  KLType_5Min = 6,
  KLType_15Min = 7,
  KLType_30Min = 8,
  KLType_60Min = 9,
  KLType_3Min = 10,
  KLType_Quarter = 11
};
bool KLType_IsValid(int value);
const KLType KLType_MIN = KLType_Unknown;
const KLType KLType_MAX = KLType_Quarter;
const int KLType_ARRAYSIZE = KLType_MAX + 1;

const ::google::protobuf::EnumDescriptor* KLType_descriptor();
inline const ::std::string& KLType_Name(KLType value) {
  return ::google::protobuf::internal::NameOfEnum(
    KLType_descriptor(), value);
}
inline bool KLType_Parse(
    const ::std::string& name, KLType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<KLType>(
    KLType_descriptor(), name, value);
}
enum KLFields {
  KLFields_None = 0,
  KLFields_High = 1,
  KLFields_Open = 2,
  KLFields_Low = 4,
  KLFields_Close = 8,
  KLFields_LastClose = 16,
  KLFields_Volume = 32,
  KLFields_Turnover = 64,
  KLFields_TurnoverRate = 128,
  KLFields_PE = 256,
  KLFields_ChangeRate = 512
};
bool KLFields_IsValid(int value);
const KLFields KLFields_MIN = KLFields_None;
const KLFields KLFields_MAX = KLFields_ChangeRate;
const int KLFields_ARRAYSIZE = KLFields_MAX + 1;

const ::google::protobuf::EnumDescriptor* KLFields_descriptor();
inline const ::std::string& KLFields_Name(KLFields value) {
  return ::google::protobuf::internal::NameOfEnum(
    KLFields_descriptor(), value);
}
inline bool KLFields_Parse(
    const ::std::string& name, KLFields* value) {
  return ::google::protobuf::internal::ParseNamedEnum<KLFields>(
    KLFields_descriptor(), name, value);
}
enum SubType {
  SubType_None = 0,
  SubType_Basic = 1,
  SubType_OrderBook = 2,
  SubType_Ticker = 4,
  SubType_RT = 5,
  SubType_KL_Day = 6,
  SubType_KL_5Min = 7,
  SubType_KL_15Min = 8,
  SubType_KL_30Min = 9,
  SubType_KL_60Min = 10,
  SubType_KL_1Min = 11,
  SubType_KL_Week = 12,
  SubType_KL_Month = 13,
  SubType_Broker = 14,
  SubType_KL_Qurater = 15,
  SubType_KL_Year = 16,
  SubType_KL_3Min = 17,
  SubType_OrderDetail = 18
};
bool SubType_IsValid(int value);
const SubType SubType_MIN = SubType_None;
const SubType SubType_MAX = SubType_OrderDetail;
const int SubType_ARRAYSIZE = SubType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SubType_descriptor();
inline const ::std::string& SubType_Name(SubType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SubType_descriptor(), value);
}
inline bool SubType_Parse(
    const ::std::string& name, SubType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SubType>(
    SubType_descriptor(), name, value);
}
enum TickerDirection {
  TickerDirection_Unknown = 0,
  TickerDirection_Bid = 1,
  TickerDirection_Ask = 2,
  TickerDirection_Neutral = 3
};
bool TickerDirection_IsValid(int value);
const TickerDirection TickerDirection_MIN = TickerDirection_Unknown;
const TickerDirection TickerDirection_MAX = TickerDirection_Neutral;
const int TickerDirection_ARRAYSIZE = TickerDirection_MAX + 1;

const ::google::protobuf::EnumDescriptor* TickerDirection_descriptor();
inline const ::std::string& TickerDirection_Name(TickerDirection value) {
  return ::google::protobuf::internal::NameOfEnum(
    TickerDirection_descriptor(), value);
}
inline bool TickerDirection_Parse(
    const ::std::string& name, TickerDirection* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TickerDirection>(
    TickerDirection_descriptor(), name, value);
}
enum TickerType {
  TickerType_Unknown = 0,
  TickerType_Automatch = 1,
  TickerType_Late = 2,
  TickerType_NoneAutomatch = 3,
  TickerType_InterAutomatch = 4,
  TickerType_InterNoneAutomatch = 5,
  TickerType_OddLot = 6,
  TickerType_Auction = 7,
  TickerType_Bulk = 8,
  TickerType_Crash = 9,
  TickerType_CrossMarket = 10,
  TickerType_BulkSold = 11,
  TickerType_FreeOnBoard = 12,
  TickerType_Rule127Or155 = 13,
  TickerType_Delay = 14,
  TickerType_MarketCenterClosePrice = 15,
  TickerType_NextDay = 16,
  TickerType_MarketCenterOpening = 17,
  TickerType_PriorReferencePrice = 18,
  TickerType_MarketCenterOpenPrice = 19,
  TickerType_Seller = 20,
  TickerType_T = 21,
  TickerType_ExtendedTradingHours = 22,
  TickerType_Contingent = 23,
  TickerType_AvgPrice = 24,
  TickerType_OTCSold = 25,
  TickerType_OddLotCrossMarket = 26,
  TickerType_DerivativelyPriced = 27,
  TickerType_ReOpeningPriced = 28,
  TickerType_ClosingPriced = 29,
  TickerType_ComprehensiveDelayPrice = 30
};
bool TickerType_IsValid(int value);
const TickerType TickerType_MIN = TickerType_Unknown;
const TickerType TickerType_MAX = TickerType_ComprehensiveDelayPrice;
const int TickerType_ARRAYSIZE = TickerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TickerType_descriptor();
inline const ::std::string& TickerType_Name(TickerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TickerType_descriptor(), value);
}
inline bool TickerType_Parse(
    const ::std::string& name, TickerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TickerType>(
    TickerType_descriptor(), name, value);
}
enum DarkStatus {
  DarkStatus_None = 0,
  DarkStatus_Trading = 1,
  DarkStatus_End = 2
};
bool DarkStatus_IsValid(int value);
const DarkStatus DarkStatus_MIN = DarkStatus_None;
const DarkStatus DarkStatus_MAX = DarkStatus_End;
const int DarkStatus_ARRAYSIZE = DarkStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* DarkStatus_descriptor();
inline const ::std::string& DarkStatus_Name(DarkStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    DarkStatus_descriptor(), value);
}
inline bool DarkStatus_Parse(
    const ::std::string& name, DarkStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DarkStatus>(
    DarkStatus_descriptor(), name, value);
}
enum SecurityStatus {
  SecurityStatus_Unknown = 0,
  SecurityStatus_Normal = 1,
  SecurityStatus_Listing = 2,
  SecurityStatus_Purchasing = 3,
  SecurityStatus_Subscribing = 4,
  SecurityStatus_BeforeDrakTradeOpening = 5,
  SecurityStatus_DrakTrading = 6,
  SecurityStatus_DrakTradeEnd = 7,
  SecurityStatus_ToBeOpen = 8,
  SecurityStatus_Suspended = 9,
  SecurityStatus_Called = 10,
  SecurityStatus_ExpiredLastTradingDate = 11,
  SecurityStatus_Expired = 12,
  SecurityStatus_Delisted = 13,
  SecurityStatus_ChangeToTemporaryCode = 14,
  SecurityStatus_TemporaryCodeTradeEnd = 15,
  SecurityStatus_ChangedPlateTradeEnd = 16,
  SecurityStatus_ChangedCodeTradeEnd = 17,
  SecurityStatus_RecoverableCircuitBreaker = 18,
  SecurityStatus_UnRecoverableCircuitBreaker = 19,
  SecurityStatus_AfterCombination = 20,
  SecurityStatus_AfterTransation = 21
};
bool SecurityStatus_IsValid(int value);
const SecurityStatus SecurityStatus_MIN = SecurityStatus_Unknown;
const SecurityStatus SecurityStatus_MAX = SecurityStatus_AfterTransation;
const int SecurityStatus_ARRAYSIZE = SecurityStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* SecurityStatus_descriptor();
inline const ::std::string& SecurityStatus_Name(SecurityStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    SecurityStatus_descriptor(), value);
}
inline bool SecurityStatus_Parse(
    const ::std::string& name, SecurityStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SecurityStatus>(
    SecurityStatus_descriptor(), name, value);
}
enum HolderCategory {
  HolderCategory_Unknow = 0,
  HolderCategory_Agency = 1,
  HolderCategory_Fund = 2,
  HolderCategory_SeniorManager = 3
};
bool HolderCategory_IsValid(int value);
const HolderCategory HolderCategory_MIN = HolderCategory_Unknow;
const HolderCategory HolderCategory_MAX = HolderCategory_SeniorManager;
const int HolderCategory_ARRAYSIZE = HolderCategory_MAX + 1;

const ::google::protobuf::EnumDescriptor* HolderCategory_descriptor();
inline const ::std::string& HolderCategory_Name(HolderCategory value) {
  return ::google::protobuf::internal::NameOfEnum(
    HolderCategory_descriptor(), value);
}
inline bool HolderCategory_Parse(
    const ::std::string& name, HolderCategory* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HolderCategory>(
    HolderCategory_descriptor(), name, value);
}
enum PushDataType {
  PushDataType_Unknow = 0,
  PushDataType_Realtime = 1,
  PushDataType_ByDisConn = 2,
  PushDataType_Cache = 3
};
bool PushDataType_IsValid(int value);
const PushDataType PushDataType_MIN = PushDataType_Unknow;
const PushDataType PushDataType_MAX = PushDataType_Cache;
const int PushDataType_ARRAYSIZE = PushDataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PushDataType_descriptor();
inline const ::std::string& PushDataType_Name(PushDataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PushDataType_descriptor(), value);
}
inline bool PushDataType_Parse(
    const ::std::string& name, PushDataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PushDataType>(
    PushDataType_descriptor(), name, value);
}
enum SortField {
  SortField_Unknow = 0,
  SortField_Code = 1,
  SortField_CurPrice = 2,
  SortField_PriceChangeVal = 3,
  SortField_ChangeRate = 4,
  SortField_Status = 5,
  SortField_BidPrice = 6,
  SortField_AskPrice = 7,
  SortField_BidVol = 8,
  SortField_AskVol = 9,
  SortField_Volume = 10,
  SortField_Turnover = 11,
  SortField_Amplitude = 30,
  SortField_Score = 12,
  SortField_Premium = 13,
  SortField_EffectiveLeverage = 14,
  SortField_Delta = 15,
  SortField_ImpliedVolatility = 16,
  SortField_Type = 17,
  SortField_StrikePrice = 18,
  SortField_BreakEvenPoint = 19,
  SortField_MaturityTime = 20,
  SortField_ListTime = 21,
  SortField_LastTradeTime = 22,
  SortField_Leverage = 23,
  SortField_InOutMoney = 24,
  SortField_RecoveryPrice = 25,
  SortField_ChangePrice = 26,
  SortField_Change = 27,
  SortField_StreetRate = 28,
  SortField_StreetVol = 29,
  SortField_WarrantName = 31,
  SortField_Issuer = 32,
  SortField_LotSize = 33,
  SortField_IssueSize = 34,
  SortField_UpperStrikePrice = 45,
  SortField_LowerStrikePrice = 46,
  SortField_InLinePriceStatus = 47,
  SortField_PreCurPrice = 35,
  SortField_AfterCurPrice = 36,
  SortField_PrePriceChangeVal = 37,
  SortField_AfterPriceChangeVal = 38,
  SortField_PreChangeRate = 39,
  SortField_AfterChangeRate = 40,
  SortField_PreAmplitude = 41,
  SortField_AfterAmplitude = 42,
  SortField_PreTurnover = 43,
  SortField_AfterTurnover = 44,
  SortField_LastSettlePrice = 48,
  SortField_Position = 49,
  SortField_PositionChange = 50
};
bool SortField_IsValid(int value);
const SortField SortField_MIN = SortField_Unknow;
const SortField SortField_MAX = SortField_PositionChange;
const int SortField_ARRAYSIZE = SortField_MAX + 1;

const ::google::protobuf::EnumDescriptor* SortField_descriptor();
inline const ::std::string& SortField_Name(SortField value) {
  return ::google::protobuf::internal::NameOfEnum(
    SortField_descriptor(), value);
}
inline bool SortField_Parse(
    const ::std::string& name, SortField* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SortField>(
    SortField_descriptor(), name, value);
}
enum Issuer {
  Issuer_Unknow = 0,
  Issuer_SG = 1,
  Issuer_BP = 2,
  Issuer_CS = 3,
  Issuer_CT = 4,
  Issuer_EA = 5,
  Issuer_GS = 6,
  Issuer_HS = 7,
  Issuer_JP = 8,
  Issuer_MB = 9,
  Issuer_SC = 10,
  Issuer_UB = 11,
  Issuer_BI = 12,
  Issuer_DB = 13,
  Issuer_DC = 14,
  Issuer_ML = 15,
  Issuer_NM = 16,
  Issuer_RB = 17,
  Issuer_RS = 18,
  Issuer_BC = 19,
  Issuer_HT = 20,
  Issuer_VT = 21,
  Issuer_KC = 22,
  Issuer_MS = 23
};
bool Issuer_IsValid(int value);
const Issuer Issuer_MIN = Issuer_Unknow;
const Issuer Issuer_MAX = Issuer_MS;
const int Issuer_ARRAYSIZE = Issuer_MAX + 1;

const ::google::protobuf::EnumDescriptor* Issuer_descriptor();
inline const ::std::string& Issuer_Name(Issuer value) {
  return ::google::protobuf::internal::NameOfEnum(
    Issuer_descriptor(), value);
}
inline bool Issuer_Parse(
    const ::std::string& name, Issuer* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Issuer>(
    Issuer_descriptor(), name, value);
}
enum IpoPeriod {
  IpoPeriod_Unknow = 0,
  IpoPeriod_Today = 1,
  IpoPeriod_Tomorrow = 2,
  IpoPeriod_Nextweek = 3,
  IpoPeriod_Lastweek = 4,
  IpoPeriod_Lastmonth = 5
};
bool IpoPeriod_IsValid(int value);
const IpoPeriod IpoPeriod_MIN = IpoPeriod_Unknow;
const IpoPeriod IpoPeriod_MAX = IpoPeriod_Lastmonth;
const int IpoPeriod_ARRAYSIZE = IpoPeriod_MAX + 1;

const ::google::protobuf::EnumDescriptor* IpoPeriod_descriptor();
inline const ::std::string& IpoPeriod_Name(IpoPeriod value) {
  return ::google::protobuf::internal::NameOfEnum(
    IpoPeriod_descriptor(), value);
}
inline bool IpoPeriod_Parse(
    const ::std::string& name, IpoPeriod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IpoPeriod>(
    IpoPeriod_descriptor(), name, value);
}
enum PriceType {
  PriceType_Unknow = 0,
  PriceType_Outside = 1,
  PriceType_WithIn = 2
};
bool PriceType_IsValid(int value);
const PriceType PriceType_MIN = PriceType_Unknow;
const PriceType PriceType_MAX = PriceType_WithIn;
const int PriceType_ARRAYSIZE = PriceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PriceType_descriptor();
inline const ::std::string& PriceType_Name(PriceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PriceType_descriptor(), value);
}
inline bool PriceType_Parse(
    const ::std::string& name, PriceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PriceType>(
    PriceType_descriptor(), name, value);
}
enum WarrantStatus {
  WarrantStatus_Unknow = 0,
  WarrantStatus_Normal = 1,
  WarrantStatus_Suspend = 2,
  WarrantStatus_StopTrade = 3,
  WarrantStatus_PendingListing = 4
};
bool WarrantStatus_IsValid(int value);
const WarrantStatus WarrantStatus_MIN = WarrantStatus_Unknow;
const WarrantStatus WarrantStatus_MAX = WarrantStatus_PendingListing;
const int WarrantStatus_ARRAYSIZE = WarrantStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* WarrantStatus_descriptor();
inline const ::std::string& WarrantStatus_Name(WarrantStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    WarrantStatus_descriptor(), value);
}
inline bool WarrantStatus_Parse(
    const ::std::string& name, WarrantStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WarrantStatus>(
    WarrantStatus_descriptor(), name, value);
}
enum CompanyAct {
  CompanyAct_None = 0,
  CompanyAct_Split = 1,
  CompanyAct_Join = 2,
  CompanyAct_Bonus = 4,
  CompanyAct_Transfer = 8,
  CompanyAct_Allot = 16,
  CompanyAct_Add = 32,
  CompanyAct_Dividend = 64,
  CompanyAct_SPDividend = 128
};
bool CompanyAct_IsValid(int value);
const CompanyAct CompanyAct_MIN = CompanyAct_None;
const CompanyAct CompanyAct_MAX = CompanyAct_SPDividend;
const int CompanyAct_ARRAYSIZE = CompanyAct_MAX + 1;

const ::google::protobuf::EnumDescriptor* CompanyAct_descriptor();
inline const ::std::string& CompanyAct_Name(CompanyAct value) {
  return ::google::protobuf::internal::NameOfEnum(
    CompanyAct_descriptor(), value);
}
inline bool CompanyAct_Parse(
    const ::std::string& name, CompanyAct* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CompanyAct>(
    CompanyAct_descriptor(), name, value);
}
enum QotRight {
  QotRight_Unknow = 0,
  QotRight_Bmp = 1,
  QotRight_Level1 = 2,
  QotRight_Level2 = 3
};
bool QotRight_IsValid(int value);
const QotRight QotRight_MIN = QotRight_Unknow;
const QotRight QotRight_MAX = QotRight_Level2;
const int QotRight_ARRAYSIZE = QotRight_MAX + 1;

const ::google::protobuf::EnumDescriptor* QotRight_descriptor();
inline const ::std::string& QotRight_Name(QotRight value) {
  return ::google::protobuf::internal::NameOfEnum(
    QotRight_descriptor(), value);
}
inline bool QotRight_Parse(
    const ::std::string& name, QotRight* value) {
  return ::google::protobuf::internal::ParseNamedEnum<QotRight>(
    QotRight_descriptor(), name, value);
}
// ===================================================================

class Security : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_Common.Security) */ {
 public:
  Security();
  virtual ~Security();

  Security(const Security& from);

  inline Security& operator=(const Security& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Security(Security&& from) noexcept
    : Security() {
    *this = ::std::move(from);
  }

  inline Security& operator=(Security&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Security& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Security* internal_default_instance() {
    return reinterpret_cast<const Security*>(
               &_Security_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Security* other);
  friend void swap(Security& a, Security& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Security* New() const PROTOBUF_FINAL { return New(NULL); }

  Security* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Security& from);
  void MergeFrom(const Security& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Security* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string code = 2;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // required int32 market = 1;
  bool has_market() const;
  void clear_market();
  static const int kMarketFieldNumber = 1;
  ::google::protobuf::int32 market() const;
  void set_market(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Qot_Common.Security)
 private:
  void set_has_market();
  void clear_has_market();
  void set_has_code();
  void clear_has_code();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::int32 market_;
  friend struct ::protobuf_Qot_5fCommon_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fCommon_2eproto::InitDefaultsSecurityImpl();
};
// -------------------------------------------------------------------

class KLine : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_Common.KLine) */ {
 public:
  KLine();
  virtual ~KLine();

  KLine(const KLine& from);

  inline KLine& operator=(const KLine& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KLine(KLine&& from) noexcept
    : KLine() {
    *this = ::std::move(from);
  }

  inline KLine& operator=(KLine&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KLine& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KLine* internal_default_instance() {
    return reinterpret_cast<const KLine*>(
               &_KLine_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(KLine* other);
  friend void swap(KLine& a, KLine& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KLine* New() const PROTOBUF_FINAL { return New(NULL); }

  KLine* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const KLine& from);
  void MergeFrom(const KLine& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(KLine* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string time = 1;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  const ::std::string& time() const;
  void set_time(const ::std::string& value);
  #if LANG_CXX11
  void set_time(::std::string&& value);
  #endif
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  ::std::string* mutable_time();
  ::std::string* release_time();
  void set_allocated_time(::std::string* time);

  // optional double highPrice = 3;
  bool has_highprice() const;
  void clear_highprice();
  static const int kHighPriceFieldNumber = 3;
  double highprice() const;
  void set_highprice(double value);

  // optional double openPrice = 4;
  bool has_openprice() const;
  void clear_openprice();
  static const int kOpenPriceFieldNumber = 4;
  double openprice() const;
  void set_openprice(double value);

  // optional double lowPrice = 5;
  bool has_lowprice() const;
  void clear_lowprice();
  static const int kLowPriceFieldNumber = 5;
  double lowprice() const;
  void set_lowprice(double value);

  // optional double closePrice = 6;
  bool has_closeprice() const;
  void clear_closeprice();
  static const int kClosePriceFieldNumber = 6;
  double closeprice() const;
  void set_closeprice(double value);

  // optional double lastClosePrice = 7;
  bool has_lastcloseprice() const;
  void clear_lastcloseprice();
  static const int kLastClosePriceFieldNumber = 7;
  double lastcloseprice() const;
  void set_lastcloseprice(double value);

  // optional int64 volume = 8;
  bool has_volume() const;
  void clear_volume();
  static const int kVolumeFieldNumber = 8;
  ::google::protobuf::int64 volume() const;
  void set_volume(::google::protobuf::int64 value);

  // optional double turnover = 9;
  bool has_turnover() const;
  void clear_turnover();
  static const int kTurnoverFieldNumber = 9;
  double turnover() const;
  void set_turnover(double value);

  // optional double turnoverRate = 10;
  bool has_turnoverrate() const;
  void clear_turnoverrate();
  static const int kTurnoverRateFieldNumber = 10;
  double turnoverrate() const;
  void set_turnoverrate(double value);

  // optional double pe = 11;
  bool has_pe() const;
  void clear_pe();
  static const int kPeFieldNumber = 11;
  double pe() const;
  void set_pe(double value);

  // optional double changeRate = 12;
  bool has_changerate() const;
  void clear_changerate();
  static const int kChangeRateFieldNumber = 12;
  double changerate() const;
  void set_changerate(double value);

  // optional double timestamp = 13;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 13;
  double timestamp() const;
  void set_timestamp(double value);

  // required bool isBlank = 2;
  bool has_isblank() const;
  void clear_isblank();
  static const int kIsBlankFieldNumber = 2;
  bool isblank() const;
  void set_isblank(bool value);

  // @@protoc_insertion_point(class_scope:Qot_Common.KLine)
 private:
  void set_has_time();
  void clear_has_time();
  void set_has_isblank();
  void clear_has_isblank();
  void set_has_highprice();
  void clear_has_highprice();
  void set_has_openprice();
  void clear_has_openprice();
  void set_has_lowprice();
  void clear_has_lowprice();
  void set_has_closeprice();
  void clear_has_closeprice();
  void set_has_lastcloseprice();
  void clear_has_lastcloseprice();
  void set_has_volume();
  void clear_has_volume();
  void set_has_turnover();
  void clear_has_turnover();
  void set_has_turnoverrate();
  void clear_has_turnoverrate();
  void set_has_pe();
  void clear_has_pe();
  void set_has_changerate();
  void clear_has_changerate();
  void set_has_timestamp();
  void clear_has_timestamp();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr time_;
  double highprice_;
  double openprice_;
  double lowprice_;
  double closeprice_;
  double lastcloseprice_;
  ::google::protobuf::int64 volume_;
  double turnover_;
  double turnoverrate_;
  double pe_;
  double changerate_;
  double timestamp_;
  bool isblank_;
  friend struct ::protobuf_Qot_5fCommon_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fCommon_2eproto::InitDefaultsKLineImpl();
};
// -------------------------------------------------------------------

class OptionBasicQotExData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_Common.OptionBasicQotExData) */ {
 public:
  OptionBasicQotExData();
  virtual ~OptionBasicQotExData();

  OptionBasicQotExData(const OptionBasicQotExData& from);

  inline OptionBasicQotExData& operator=(const OptionBasicQotExData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OptionBasicQotExData(OptionBasicQotExData&& from) noexcept
    : OptionBasicQotExData() {
    *this = ::std::move(from);
  }

  inline OptionBasicQotExData& operator=(OptionBasicQotExData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionBasicQotExData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionBasicQotExData* internal_default_instance() {
    return reinterpret_cast<const OptionBasicQotExData*>(
               &_OptionBasicQotExData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(OptionBasicQotExData* other);
  friend void swap(OptionBasicQotExData& a, OptionBasicQotExData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OptionBasicQotExData* New() const PROTOBUF_FINAL { return New(NULL); }

  OptionBasicQotExData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OptionBasicQotExData& from);
  void MergeFrom(const OptionBasicQotExData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OptionBasicQotExData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double strikePrice = 1;
  bool has_strikeprice() const;
  void clear_strikeprice();
  static const int kStrikePriceFieldNumber = 1;
  double strikeprice() const;
  void set_strikeprice(double value);

  // required int32 contractSize = 2;
  bool has_contractsize() const;
  void clear_contractsize();
  static const int kContractSizeFieldNumber = 2;
  ::google::protobuf::int32 contractsize() const;
  void set_contractsize(::google::protobuf::int32 value);

  // required int32 openInterest = 3;
  bool has_openinterest() const;
  void clear_openinterest();
  static const int kOpenInterestFieldNumber = 3;
  ::google::protobuf::int32 openinterest() const;
  void set_openinterest(::google::protobuf::int32 value);

  // required double impliedVolatility = 4;
  bool has_impliedvolatility() const;
  void clear_impliedvolatility();
  static const int kImpliedVolatilityFieldNumber = 4;
  double impliedvolatility() const;
  void set_impliedvolatility(double value);

  // required double premium = 5;
  bool has_premium() const;
  void clear_premium();
  static const int kPremiumFieldNumber = 5;
  double premium() const;
  void set_premium(double value);

  // required double delta = 6;
  bool has_delta() const;
  void clear_delta();
  static const int kDeltaFieldNumber = 6;
  double delta() const;
  void set_delta(double value);

  // required double gamma = 7;
  bool has_gamma() const;
  void clear_gamma();
  static const int kGammaFieldNumber = 7;
  double gamma() const;
  void set_gamma(double value);

  // required double vega = 8;
  bool has_vega() const;
  void clear_vega();
  static const int kVegaFieldNumber = 8;
  double vega() const;
  void set_vega(double value);

  // required double theta = 9;
  bool has_theta() const;
  void clear_theta();
  static const int kThetaFieldNumber = 9;
  double theta() const;
  void set_theta(double value);

  // required double rho = 10;
  bool has_rho() const;
  void clear_rho();
  static const int kRhoFieldNumber = 10;
  double rho() const;
  void set_rho(double value);

  // optional int32 netOpenInterest = 11;
  bool has_netopeninterest() const;
  void clear_netopeninterest();
  static const int kNetOpenInterestFieldNumber = 11;
  ::google::protobuf::int32 netopeninterest() const;
  void set_netopeninterest(::google::protobuf::int32 value);

  // optional int32 expiryDateDistance = 12;
  bool has_expirydatedistance() const;
  void clear_expirydatedistance();
  static const int kExpiryDateDistanceFieldNumber = 12;
  ::google::protobuf::int32 expirydatedistance() const;
  void set_expirydatedistance(::google::protobuf::int32 value);

  // optional double contractNominalValue = 13;
  bool has_contractnominalvalue() const;
  void clear_contractnominalvalue();
  static const int kContractNominalValueFieldNumber = 13;
  double contractnominalvalue() const;
  void set_contractnominalvalue(double value);

  // optional double ownerLotMultiplier = 14;
  bool has_ownerlotmultiplier() const;
  void clear_ownerlotmultiplier();
  static const int kOwnerLotMultiplierFieldNumber = 14;
  double ownerlotmultiplier() const;
  void set_ownerlotmultiplier(double value);

  // optional double contractMultiplier = 16;
  bool has_contractmultiplier() const;
  void clear_contractmultiplier();
  static const int kContractMultiplierFieldNumber = 16;
  double contractmultiplier() const;
  void set_contractmultiplier(double value);

  // optional int32 optionAreaType = 15;
  bool has_optionareatype() const;
  void clear_optionareatype();
  static const int kOptionAreaTypeFieldNumber = 15;
  ::google::protobuf::int32 optionareatype() const;
  void set_optionareatype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Qot_Common.OptionBasicQotExData)
 private:
  void set_has_strikeprice();
  void clear_has_strikeprice();
  void set_has_contractsize();
  void clear_has_contractsize();
  void set_has_openinterest();
  void clear_has_openinterest();
  void set_has_impliedvolatility();
  void clear_has_impliedvolatility();
  void set_has_premium();
  void clear_has_premium();
  void set_has_delta();
  void clear_has_delta();
  void set_has_gamma();
  void clear_has_gamma();
  void set_has_vega();
  void clear_has_vega();
  void set_has_theta();
  void clear_has_theta();
  void set_has_rho();
  void clear_has_rho();
  void set_has_netopeninterest();
  void clear_has_netopeninterest();
  void set_has_expirydatedistance();
  void clear_has_expirydatedistance();
  void set_has_contractnominalvalue();
  void clear_has_contractnominalvalue();
  void set_has_ownerlotmultiplier();
  void clear_has_ownerlotmultiplier();
  void set_has_optionareatype();
  void clear_has_optionareatype();
  void set_has_contractmultiplier();
  void clear_has_contractmultiplier();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double strikeprice_;
  ::google::protobuf::int32 contractsize_;
  ::google::protobuf::int32 openinterest_;
  double impliedvolatility_;
  double premium_;
  double delta_;
  double gamma_;
  double vega_;
  double theta_;
  double rho_;
  ::google::protobuf::int32 netopeninterest_;
  ::google::protobuf::int32 expirydatedistance_;
  double contractnominalvalue_;
  double ownerlotmultiplier_;
  double contractmultiplier_;
  ::google::protobuf::int32 optionareatype_;
  friend struct ::protobuf_Qot_5fCommon_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fCommon_2eproto::InitDefaultsOptionBasicQotExDataImpl();
};
// -------------------------------------------------------------------

class PreAfterMarketData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_Common.PreAfterMarketData) */ {
 public:
  PreAfterMarketData();
  virtual ~PreAfterMarketData();

  PreAfterMarketData(const PreAfterMarketData& from);

  inline PreAfterMarketData& operator=(const PreAfterMarketData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PreAfterMarketData(PreAfterMarketData&& from) noexcept
    : PreAfterMarketData() {
    *this = ::std::move(from);
  }

  inline PreAfterMarketData& operator=(PreAfterMarketData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PreAfterMarketData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PreAfterMarketData* internal_default_instance() {
    return reinterpret_cast<const PreAfterMarketData*>(
               &_PreAfterMarketData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(PreAfterMarketData* other);
  friend void swap(PreAfterMarketData& a, PreAfterMarketData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PreAfterMarketData* New() const PROTOBUF_FINAL { return New(NULL); }

  PreAfterMarketData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PreAfterMarketData& from);
  void MergeFrom(const PreAfterMarketData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PreAfterMarketData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double price = 1;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 1;
  double price() const;
  void set_price(double value);

  // optional double highPrice = 2;
  bool has_highprice() const;
  void clear_highprice();
  static const int kHighPriceFieldNumber = 2;
  double highprice() const;
  void set_highprice(double value);

  // optional double lowPrice = 3;
  bool has_lowprice() const;
  void clear_lowprice();
  static const int kLowPriceFieldNumber = 3;
  double lowprice() const;
  void set_lowprice(double value);

  // optional int64 volume = 4;
  bool has_volume() const;
  void clear_volume();
  static const int kVolumeFieldNumber = 4;
  ::google::protobuf::int64 volume() const;
  void set_volume(::google::protobuf::int64 value);

  // optional double turnover = 5;
  bool has_turnover() const;
  void clear_turnover();
  static const int kTurnoverFieldNumber = 5;
  double turnover() const;
  void set_turnover(double value);

  // optional double changeVal = 6;
  bool has_changeval() const;
  void clear_changeval();
  static const int kChangeValFieldNumber = 6;
  double changeval() const;
  void set_changeval(double value);

  // optional double changeRate = 7;
  bool has_changerate() const;
  void clear_changerate();
  static const int kChangeRateFieldNumber = 7;
  double changerate() const;
  void set_changerate(double value);

  // optional double amplitude = 8;
  bool has_amplitude() const;
  void clear_amplitude();
  static const int kAmplitudeFieldNumber = 8;
  double amplitude() const;
  void set_amplitude(double value);

  // @@protoc_insertion_point(class_scope:Qot_Common.PreAfterMarketData)
 private:
  void set_has_price();
  void clear_has_price();
  void set_has_highprice();
  void clear_has_highprice();
  void set_has_lowprice();
  void clear_has_lowprice();
  void set_has_volume();
  void clear_has_volume();
  void set_has_turnover();
  void clear_has_turnover();
  void set_has_changeval();
  void clear_has_changeval();
  void set_has_changerate();
  void clear_has_changerate();
  void set_has_amplitude();
  void clear_has_amplitude();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double price_;
  double highprice_;
  double lowprice_;
  ::google::protobuf::int64 volume_;
  double turnover_;
  double changeval_;
  double changerate_;
  double amplitude_;
  friend struct ::protobuf_Qot_5fCommon_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fCommon_2eproto::InitDefaultsPreAfterMarketDataImpl();
};
// -------------------------------------------------------------------

class FutureBasicQotExData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_Common.FutureBasicQotExData) */ {
 public:
  FutureBasicQotExData();
  virtual ~FutureBasicQotExData();

  FutureBasicQotExData(const FutureBasicQotExData& from);

  inline FutureBasicQotExData& operator=(const FutureBasicQotExData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FutureBasicQotExData(FutureBasicQotExData&& from) noexcept
    : FutureBasicQotExData() {
    *this = ::std::move(from);
  }

  inline FutureBasicQotExData& operator=(FutureBasicQotExData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FutureBasicQotExData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FutureBasicQotExData* internal_default_instance() {
    return reinterpret_cast<const FutureBasicQotExData*>(
               &_FutureBasicQotExData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(FutureBasicQotExData* other);
  friend void swap(FutureBasicQotExData& a, FutureBasicQotExData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FutureBasicQotExData* New() const PROTOBUF_FINAL { return New(NULL); }

  FutureBasicQotExData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FutureBasicQotExData& from);
  void MergeFrom(const FutureBasicQotExData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FutureBasicQotExData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double lastSettlePrice = 1;
  bool has_lastsettleprice() const;
  void clear_lastsettleprice();
  static const int kLastSettlePriceFieldNumber = 1;
  double lastsettleprice() const;
  void set_lastsettleprice(double value);

  // required int32 position = 2;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  ::google::protobuf::int32 position() const;
  void set_position(::google::protobuf::int32 value);

  // required int32 positionChange = 3;
  bool has_positionchange() const;
  void clear_positionchange();
  static const int kPositionChangeFieldNumber = 3;
  ::google::protobuf::int32 positionchange() const;
  void set_positionchange(::google::protobuf::int32 value);

  // optional int32 expiryDateDistance = 4;
  bool has_expirydatedistance() const;
  void clear_expirydatedistance();
  static const int kExpiryDateDistanceFieldNumber = 4;
  ::google::protobuf::int32 expirydatedistance() const;
  void set_expirydatedistance(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Qot_Common.FutureBasicQotExData)
 private:
  void set_has_lastsettleprice();
  void clear_has_lastsettleprice();
  void set_has_position();
  void clear_has_position();
  void set_has_positionchange();
  void clear_has_positionchange();
  void set_has_expirydatedistance();
  void clear_has_expirydatedistance();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double lastsettleprice_;
  ::google::protobuf::int32 position_;
  ::google::protobuf::int32 positionchange_;
  ::google::protobuf::int32 expirydatedistance_;
  friend struct ::protobuf_Qot_5fCommon_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fCommon_2eproto::InitDefaultsFutureBasicQotExDataImpl();
};
// -------------------------------------------------------------------

class BasicQot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_Common.BasicQot) */ {
 public:
  BasicQot();
  virtual ~BasicQot();

  BasicQot(const BasicQot& from);

  inline BasicQot& operator=(const BasicQot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BasicQot(BasicQot&& from) noexcept
    : BasicQot() {
    *this = ::std::move(from);
  }

  inline BasicQot& operator=(BasicQot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BasicQot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BasicQot* internal_default_instance() {
    return reinterpret_cast<const BasicQot*>(
               &_BasicQot_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(BasicQot* other);
  friend void swap(BasicQot& a, BasicQot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BasicQot* New() const PROTOBUF_FINAL { return New(NULL); }

  BasicQot* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BasicQot& from);
  void MergeFrom(const BasicQot& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BasicQot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string listTime = 3;
  bool has_listtime() const;
  void clear_listtime();
  static const int kListTimeFieldNumber = 3;
  const ::std::string& listtime() const;
  void set_listtime(const ::std::string& value);
  #if LANG_CXX11
  void set_listtime(::std::string&& value);
  #endif
  void set_listtime(const char* value);
  void set_listtime(const char* value, size_t size);
  ::std::string* mutable_listtime();
  ::std::string* release_listtime();
  void set_allocated_listtime(::std::string* listtime);

  // required string updateTime = 5;
  bool has_updatetime() const;
  void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 5;
  const ::std::string& updatetime() const;
  void set_updatetime(const ::std::string& value);
  #if LANG_CXX11
  void set_updatetime(::std::string&& value);
  #endif
  void set_updatetime(const char* value);
  void set_updatetime(const char* value, size_t size);
  ::std::string* mutable_updatetime();
  ::std::string* release_updatetime();
  void set_allocated_updatetime(::std::string* updatetime);

  // required .Qot_Common.Security security = 1;
  bool has_security() const;
  void clear_security();
  static const int kSecurityFieldNumber = 1;
  const ::Qot_Common::Security& security() const;
  ::Qot_Common::Security* release_security();
  ::Qot_Common::Security* mutable_security();
  void set_allocated_security(::Qot_Common::Security* security);

  // optional .Qot_Common.OptionBasicQotExData optionExData = 16;
  bool has_optionexdata() const;
  void clear_optionexdata();
  static const int kOptionExDataFieldNumber = 16;
  const ::Qot_Common::OptionBasicQotExData& optionexdata() const;
  ::Qot_Common::OptionBasicQotExData* release_optionexdata();
  ::Qot_Common::OptionBasicQotExData* mutable_optionexdata();
  void set_allocated_optionexdata(::Qot_Common::OptionBasicQotExData* optionexdata);

  // optional .Qot_Common.PreAfterMarketData preMarket = 19;
  bool has_premarket() const;
  void clear_premarket();
  static const int kPreMarketFieldNumber = 19;
  const ::Qot_Common::PreAfterMarketData& premarket() const;
  ::Qot_Common::PreAfterMarketData* release_premarket();
  ::Qot_Common::PreAfterMarketData* mutable_premarket();
  void set_allocated_premarket(::Qot_Common::PreAfterMarketData* premarket);

  // optional .Qot_Common.PreAfterMarketData afterMarket = 20;
  bool has_aftermarket() const;
  void clear_aftermarket();
  static const int kAfterMarketFieldNumber = 20;
  const ::Qot_Common::PreAfterMarketData& aftermarket() const;
  ::Qot_Common::PreAfterMarketData* release_aftermarket();
  ::Qot_Common::PreAfterMarketData* mutable_aftermarket();
  void set_allocated_aftermarket(::Qot_Common::PreAfterMarketData* aftermarket);

  // optional .Qot_Common.FutureBasicQotExData futureExData = 22;
  bool has_futureexdata() const;
  void clear_futureexdata();
  static const int kFutureExDataFieldNumber = 22;
  const ::Qot_Common::FutureBasicQotExData& futureexdata() const;
  ::Qot_Common::FutureBasicQotExData* release_futureexdata();
  ::Qot_Common::FutureBasicQotExData* mutable_futureexdata();
  void set_allocated_futureexdata(::Qot_Common::FutureBasicQotExData* futureexdata);

  // required double priceSpread = 4;
  bool has_pricespread() const;
  void clear_pricespread();
  static const int kPriceSpreadFieldNumber = 4;
  double pricespread() const;
  void set_pricespread(double value);

  // required double highPrice = 6;
  bool has_highprice() const;
  void clear_highprice();
  static const int kHighPriceFieldNumber = 6;
  double highprice() const;
  void set_highprice(double value);

  // required double openPrice = 7;
  bool has_openprice() const;
  void clear_openprice();
  static const int kOpenPriceFieldNumber = 7;
  double openprice() const;
  void set_openprice(double value);

  // required double lowPrice = 8;
  bool has_lowprice() const;
  void clear_lowprice();
  static const int kLowPriceFieldNumber = 8;
  double lowprice() const;
  void set_lowprice(double value);

  // required bool isSuspended = 2;
  bool has_issuspended() const;
  void clear_issuspended();
  static const int kIsSuspendedFieldNumber = 2;
  bool issuspended() const;
  void set_issuspended(bool value);

  // optional int32 darkStatus = 15;
  bool has_darkstatus() const;
  void clear_darkstatus();
  static const int kDarkStatusFieldNumber = 15;
  ::google::protobuf::int32 darkstatus() const;
  void set_darkstatus(::google::protobuf::int32 value);

  // required double curPrice = 9;
  bool has_curprice() const;
  void clear_curprice();
  static const int kCurPriceFieldNumber = 9;
  double curprice() const;
  void set_curprice(double value);

  // required double lastClosePrice = 10;
  bool has_lastcloseprice() const;
  void clear_lastcloseprice();
  static const int kLastClosePriceFieldNumber = 10;
  double lastcloseprice() const;
  void set_lastcloseprice(double value);

  // required int64 volume = 11;
  bool has_volume() const;
  void clear_volume();
  static const int kVolumeFieldNumber = 11;
  ::google::protobuf::int64 volume() const;
  void set_volume(::google::protobuf::int64 value);

  // required double turnover = 12;
  bool has_turnover() const;
  void clear_turnover();
  static const int kTurnoverFieldNumber = 12;
  double turnover() const;
  void set_turnover(double value);

  // required double turnoverRate = 13;
  bool has_turnoverrate() const;
  void clear_turnoverrate();
  static const int kTurnoverRateFieldNumber = 13;
  double turnoverrate() const;
  void set_turnoverrate(double value);

  // required double amplitude = 14;
  bool has_amplitude() const;
  void clear_amplitude();
  static const int kAmplitudeFieldNumber = 14;
  double amplitude() const;
  void set_amplitude(double value);

  // optional double listTimestamp = 17;
  bool has_listtimestamp() const;
  void clear_listtimestamp();
  static const int kListTimestampFieldNumber = 17;
  double listtimestamp() const;
  void set_listtimestamp(double value);

  // optional double updateTimestamp = 18;
  bool has_updatetimestamp() const;
  void clear_updatetimestamp();
  static const int kUpdateTimestampFieldNumber = 18;
  double updatetimestamp() const;
  void set_updatetimestamp(double value);

  // optional int32 secStatus = 21;
  bool has_secstatus() const;
  void clear_secstatus();
  static const int kSecStatusFieldNumber = 21;
  ::google::protobuf::int32 secstatus() const;
  void set_secstatus(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Qot_Common.BasicQot)
 private:
  void set_has_security();
  void clear_has_security();
  void set_has_issuspended();
  void clear_has_issuspended();
  void set_has_listtime();
  void clear_has_listtime();
  void set_has_pricespread();
  void clear_has_pricespread();
  void set_has_updatetime();
  void clear_has_updatetime();
  void set_has_highprice();
  void clear_has_highprice();
  void set_has_openprice();
  void clear_has_openprice();
  void set_has_lowprice();
  void clear_has_lowprice();
  void set_has_curprice();
  void clear_has_curprice();
  void set_has_lastcloseprice();
  void clear_has_lastcloseprice();
  void set_has_volume();
  void clear_has_volume();
  void set_has_turnover();
  void clear_has_turnover();
  void set_has_turnoverrate();
  void clear_has_turnoverrate();
  void set_has_amplitude();
  void clear_has_amplitude();
  void set_has_darkstatus();
  void clear_has_darkstatus();
  void set_has_optionexdata();
  void clear_has_optionexdata();
  void set_has_listtimestamp();
  void clear_has_listtimestamp();
  void set_has_updatetimestamp();
  void clear_has_updatetimestamp();
  void set_has_premarket();
  void clear_has_premarket();
  void set_has_aftermarket();
  void clear_has_aftermarket();
  void set_has_secstatus();
  void clear_has_secstatus();
  void set_has_futureexdata();
  void clear_has_futureexdata();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr listtime_;
  ::google::protobuf::internal::ArenaStringPtr updatetime_;
  ::Qot_Common::Security* security_;
  ::Qot_Common::OptionBasicQotExData* optionexdata_;
  ::Qot_Common::PreAfterMarketData* premarket_;
  ::Qot_Common::PreAfterMarketData* aftermarket_;
  ::Qot_Common::FutureBasicQotExData* futureexdata_;
  double pricespread_;
  double highprice_;
  double openprice_;
  double lowprice_;
  bool issuspended_;
  ::google::protobuf::int32 darkstatus_;
  double curprice_;
  double lastcloseprice_;
  ::google::protobuf::int64 volume_;
  double turnover_;
  double turnoverrate_;
  double amplitude_;
  double listtimestamp_;
  double updatetimestamp_;
  ::google::protobuf::int32 secstatus_;
  friend struct ::protobuf_Qot_5fCommon_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fCommon_2eproto::InitDefaultsBasicQotImpl();
};
// -------------------------------------------------------------------

class TimeShare : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_Common.TimeShare) */ {
 public:
  TimeShare();
  virtual ~TimeShare();

  TimeShare(const TimeShare& from);

  inline TimeShare& operator=(const TimeShare& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TimeShare(TimeShare&& from) noexcept
    : TimeShare() {
    *this = ::std::move(from);
  }

  inline TimeShare& operator=(TimeShare&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TimeShare& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeShare* internal_default_instance() {
    return reinterpret_cast<const TimeShare*>(
               &_TimeShare_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(TimeShare* other);
  friend void swap(TimeShare& a, TimeShare& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TimeShare* New() const PROTOBUF_FINAL { return New(NULL); }

  TimeShare* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TimeShare& from);
  void MergeFrom(const TimeShare& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TimeShare* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string time = 1;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  const ::std::string& time() const;
  void set_time(const ::std::string& value);
  #if LANG_CXX11
  void set_time(::std::string&& value);
  #endif
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  ::std::string* mutable_time();
  ::std::string* release_time();
  void set_allocated_time(::std::string* time);

  // required int32 minute = 2;
  bool has_minute() const;
  void clear_minute();
  static const int kMinuteFieldNumber = 2;
  ::google::protobuf::int32 minute() const;
  void set_minute(::google::protobuf::int32 value);

  // required bool isBlank = 3;
  bool has_isblank() const;
  void clear_isblank();
  static const int kIsBlankFieldNumber = 3;
  bool isblank() const;
  void set_isblank(bool value);

  // optional double price = 4;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 4;
  double price() const;
  void set_price(double value);

  // optional double lastClosePrice = 5;
  bool has_lastcloseprice() const;
  void clear_lastcloseprice();
  static const int kLastClosePriceFieldNumber = 5;
  double lastcloseprice() const;
  void set_lastcloseprice(double value);

  // optional double avgPrice = 6;
  bool has_avgprice() const;
  void clear_avgprice();
  static const int kAvgPriceFieldNumber = 6;
  double avgprice() const;
  void set_avgprice(double value);

  // optional int64 volume = 7;
  bool has_volume() const;
  void clear_volume();
  static const int kVolumeFieldNumber = 7;
  ::google::protobuf::int64 volume() const;
  void set_volume(::google::protobuf::int64 value);

  // optional double turnover = 8;
  bool has_turnover() const;
  void clear_turnover();
  static const int kTurnoverFieldNumber = 8;
  double turnover() const;
  void set_turnover(double value);

  // optional double timestamp = 9;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 9;
  double timestamp() const;
  void set_timestamp(double value);

  // @@protoc_insertion_point(class_scope:Qot_Common.TimeShare)
 private:
  void set_has_time();
  void clear_has_time();
  void set_has_minute();
  void clear_has_minute();
  void set_has_isblank();
  void clear_has_isblank();
  void set_has_price();
  void clear_has_price();
  void set_has_lastcloseprice();
  void clear_has_lastcloseprice();
  void set_has_avgprice();
  void clear_has_avgprice();
  void set_has_volume();
  void clear_has_volume();
  void set_has_turnover();
  void clear_has_turnover();
  void set_has_timestamp();
  void clear_has_timestamp();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr time_;
  ::google::protobuf::int32 minute_;
  bool isblank_;
  double price_;
  double lastcloseprice_;
  double avgprice_;
  ::google::protobuf::int64 volume_;
  double turnover_;
  double timestamp_;
  friend struct ::protobuf_Qot_5fCommon_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fCommon_2eproto::InitDefaultsTimeShareImpl();
};
// -------------------------------------------------------------------

class SecurityStaticBasic : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_Common.SecurityStaticBasic) */ {
 public:
  SecurityStaticBasic();
  virtual ~SecurityStaticBasic();

  SecurityStaticBasic(const SecurityStaticBasic& from);

  inline SecurityStaticBasic& operator=(const SecurityStaticBasic& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SecurityStaticBasic(SecurityStaticBasic&& from) noexcept
    : SecurityStaticBasic() {
    *this = ::std::move(from);
  }

  inline SecurityStaticBasic& operator=(SecurityStaticBasic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SecurityStaticBasic& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecurityStaticBasic* internal_default_instance() {
    return reinterpret_cast<const SecurityStaticBasic*>(
               &_SecurityStaticBasic_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(SecurityStaticBasic* other);
  friend void swap(SecurityStaticBasic& a, SecurityStaticBasic& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SecurityStaticBasic* New() const PROTOBUF_FINAL { return New(NULL); }

  SecurityStaticBasic* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SecurityStaticBasic& from);
  void MergeFrom(const SecurityStaticBasic& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SecurityStaticBasic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 5;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 5;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string listTime = 6;
  bool has_listtime() const;
  void clear_listtime();
  static const int kListTimeFieldNumber = 6;
  const ::std::string& listtime() const;
  void set_listtime(const ::std::string& value);
  #if LANG_CXX11
  void set_listtime(::std::string&& value);
  #endif
  void set_listtime(const char* value);
  void set_listtime(const char* value, size_t size);
  ::std::string* mutable_listtime();
  ::std::string* release_listtime();
  void set_allocated_listtime(::std::string* listtime);

  // required .Qot_Common.Security security = 1;
  bool has_security() const;
  void clear_security();
  static const int kSecurityFieldNumber = 1;
  const ::Qot_Common::Security& security() const;
  ::Qot_Common::Security* release_security();
  ::Qot_Common::Security* mutable_security();
  void set_allocated_security(::Qot_Common::Security* security);

  // required int64 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // required int32 lotSize = 3;
  bool has_lotsize() const;
  void clear_lotsize();
  static const int kLotSizeFieldNumber = 3;
  ::google::protobuf::int32 lotsize() const;
  void set_lotsize(::google::protobuf::int32 value);

  // required int32 secType = 4;
  bool has_sectype() const;
  void clear_sectype();
  static const int kSecTypeFieldNumber = 4;
  ::google::protobuf::int32 sectype() const;
  void set_sectype(::google::protobuf::int32 value);

  // optional double listTimestamp = 8;
  bool has_listtimestamp() const;
  void clear_listtimestamp();
  static const int kListTimestampFieldNumber = 8;
  double listtimestamp() const;
  void set_listtimestamp(double value);

  // optional bool delisting = 7;
  bool has_delisting() const;
  void clear_delisting();
  static const int kDelistingFieldNumber = 7;
  bool delisting() const;
  void set_delisting(bool value);

  // @@protoc_insertion_point(class_scope:Qot_Common.SecurityStaticBasic)
 private:
  void set_has_security();
  void clear_has_security();
  void set_has_id();
  void clear_has_id();
  void set_has_lotsize();
  void clear_has_lotsize();
  void set_has_sectype();
  void clear_has_sectype();
  void set_has_name();
  void clear_has_name();
  void set_has_listtime();
  void clear_has_listtime();
  void set_has_delisting();
  void clear_has_delisting();
  void set_has_listtimestamp();
  void clear_has_listtimestamp();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr listtime_;
  ::Qot_Common::Security* security_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 lotsize_;
  ::google::protobuf::int32 sectype_;
  double listtimestamp_;
  bool delisting_;
  friend struct ::protobuf_Qot_5fCommon_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fCommon_2eproto::InitDefaultsSecurityStaticBasicImpl();
};
// -------------------------------------------------------------------

class WarrantStaticExData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_Common.WarrantStaticExData) */ {
 public:
  WarrantStaticExData();
  virtual ~WarrantStaticExData();

  WarrantStaticExData(const WarrantStaticExData& from);

  inline WarrantStaticExData& operator=(const WarrantStaticExData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WarrantStaticExData(WarrantStaticExData&& from) noexcept
    : WarrantStaticExData() {
    *this = ::std::move(from);
  }

  inline WarrantStaticExData& operator=(WarrantStaticExData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WarrantStaticExData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WarrantStaticExData* internal_default_instance() {
    return reinterpret_cast<const WarrantStaticExData*>(
               &_WarrantStaticExData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(WarrantStaticExData* other);
  friend void swap(WarrantStaticExData& a, WarrantStaticExData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WarrantStaticExData* New() const PROTOBUF_FINAL { return New(NULL); }

  WarrantStaticExData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WarrantStaticExData& from);
  void MergeFrom(const WarrantStaticExData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WarrantStaticExData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Qot_Common.Security owner = 2;
  bool has_owner() const;
  void clear_owner();
  static const int kOwnerFieldNumber = 2;
  const ::Qot_Common::Security& owner() const;
  ::Qot_Common::Security* release_owner();
  ::Qot_Common::Security* mutable_owner();
  void set_allocated_owner(::Qot_Common::Security* owner);

  // required int32 type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Qot_Common.WarrantStaticExData)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_owner();
  void clear_has_owner();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::Qot_Common::Security* owner_;
  ::google::protobuf::int32 type_;
  friend struct ::protobuf_Qot_5fCommon_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fCommon_2eproto::InitDefaultsWarrantStaticExDataImpl();
};
// -------------------------------------------------------------------

class OptionStaticExData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_Common.OptionStaticExData) */ {
 public:
  OptionStaticExData();
  virtual ~OptionStaticExData();

  OptionStaticExData(const OptionStaticExData& from);

  inline OptionStaticExData& operator=(const OptionStaticExData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OptionStaticExData(OptionStaticExData&& from) noexcept
    : OptionStaticExData() {
    *this = ::std::move(from);
  }

  inline OptionStaticExData& operator=(OptionStaticExData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionStaticExData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionStaticExData* internal_default_instance() {
    return reinterpret_cast<const OptionStaticExData*>(
               &_OptionStaticExData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(OptionStaticExData* other);
  friend void swap(OptionStaticExData& a, OptionStaticExData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OptionStaticExData* New() const PROTOBUF_FINAL { return New(NULL); }

  OptionStaticExData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OptionStaticExData& from);
  void MergeFrom(const OptionStaticExData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OptionStaticExData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string strikeTime = 3;
  bool has_striketime() const;
  void clear_striketime();
  static const int kStrikeTimeFieldNumber = 3;
  const ::std::string& striketime() const;
  void set_striketime(const ::std::string& value);
  #if LANG_CXX11
  void set_striketime(::std::string&& value);
  #endif
  void set_striketime(const char* value);
  void set_striketime(const char* value, size_t size);
  ::std::string* mutable_striketime();
  ::std::string* release_striketime();
  void set_allocated_striketime(::std::string* striketime);

  // required string market = 6;
  bool has_market() const;
  void clear_market();
  static const int kMarketFieldNumber = 6;
  const ::std::string& market() const;
  void set_market(const ::std::string& value);
  #if LANG_CXX11
  void set_market(::std::string&& value);
  #endif
  void set_market(const char* value);
  void set_market(const char* value, size_t size);
  ::std::string* mutable_market();
  ::std::string* release_market();
  void set_allocated_market(::std::string* market);

  // required .Qot_Common.Security owner = 2;
  bool has_owner() const;
  void clear_owner();
  static const int kOwnerFieldNumber = 2;
  const ::Qot_Common::Security& owner() const;
  ::Qot_Common::Security* release_owner();
  ::Qot_Common::Security* mutable_owner();
  void set_allocated_owner(::Qot_Common::Security* owner);

  // required int32 type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required bool suspend = 5;
  bool has_suspend() const;
  void clear_suspend();
  static const int kSuspendFieldNumber = 5;
  bool suspend() const;
  void set_suspend(bool value);

  // required double strikePrice = 4;
  bool has_strikeprice() const;
  void clear_strikeprice();
  static const int kStrikePriceFieldNumber = 4;
  double strikeprice() const;
  void set_strikeprice(double value);

  // optional double strikeTimestamp = 7;
  bool has_striketimestamp() const;
  void clear_striketimestamp();
  static const int kStrikeTimestampFieldNumber = 7;
  double striketimestamp() const;
  void set_striketimestamp(double value);

  // optional int32 indexOptionType = 8;
  bool has_indexoptiontype() const;
  void clear_indexoptiontype();
  static const int kIndexOptionTypeFieldNumber = 8;
  ::google::protobuf::int32 indexoptiontype() const;
  void set_indexoptiontype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Qot_Common.OptionStaticExData)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_owner();
  void clear_has_owner();
  void set_has_striketime();
  void clear_has_striketime();
  void set_has_strikeprice();
  void clear_has_strikeprice();
  void set_has_suspend();
  void clear_has_suspend();
  void set_has_market();
  void clear_has_market();
  void set_has_striketimestamp();
  void clear_has_striketimestamp();
  void set_has_indexoptiontype();
  void clear_has_indexoptiontype();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr striketime_;
  ::google::protobuf::internal::ArenaStringPtr market_;
  ::Qot_Common::Security* owner_;
  ::google::protobuf::int32 type_;
  bool suspend_;
  double strikeprice_;
  double striketimestamp_;
  ::google::protobuf::int32 indexoptiontype_;
  friend struct ::protobuf_Qot_5fCommon_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fCommon_2eproto::InitDefaultsOptionStaticExDataImpl();
};
// -------------------------------------------------------------------

class FutureStaticExData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_Common.FutureStaticExData) */ {
 public:
  FutureStaticExData();
  virtual ~FutureStaticExData();

  FutureStaticExData(const FutureStaticExData& from);

  inline FutureStaticExData& operator=(const FutureStaticExData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FutureStaticExData(FutureStaticExData&& from) noexcept
    : FutureStaticExData() {
    *this = ::std::move(from);
  }

  inline FutureStaticExData& operator=(FutureStaticExData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FutureStaticExData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FutureStaticExData* internal_default_instance() {
    return reinterpret_cast<const FutureStaticExData*>(
               &_FutureStaticExData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(FutureStaticExData* other);
  friend void swap(FutureStaticExData& a, FutureStaticExData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FutureStaticExData* New() const PROTOBUF_FINAL { return New(NULL); }

  FutureStaticExData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FutureStaticExData& from);
  void MergeFrom(const FutureStaticExData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FutureStaticExData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string lastTradeTime = 1;
  bool has_lasttradetime() const;
  void clear_lasttradetime();
  static const int kLastTradeTimeFieldNumber = 1;
  const ::std::string& lasttradetime() const;
  void set_lasttradetime(const ::std::string& value);
  #if LANG_CXX11
  void set_lasttradetime(::std::string&& value);
  #endif
  void set_lasttradetime(const char* value);
  void set_lasttradetime(const char* value, size_t size);
  ::std::string* mutable_lasttradetime();
  ::std::string* release_lasttradetime();
  void set_allocated_lasttradetime(::std::string* lasttradetime);

  // optional double lastTradeTimestamp = 2;
  bool has_lasttradetimestamp() const;
  void clear_lasttradetimestamp();
  static const int kLastTradeTimestampFieldNumber = 2;
  double lasttradetimestamp() const;
  void set_lasttradetimestamp(double value);

  // required bool isMainContract = 3;
  bool has_ismaincontract() const;
  void clear_ismaincontract();
  static const int kIsMainContractFieldNumber = 3;
  bool ismaincontract() const;
  void set_ismaincontract(bool value);

  // @@protoc_insertion_point(class_scope:Qot_Common.FutureStaticExData)
 private:
  void set_has_lasttradetime();
  void clear_has_lasttradetime();
  void set_has_lasttradetimestamp();
  void clear_has_lasttradetimestamp();
  void set_has_ismaincontract();
  void clear_has_ismaincontract();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr lasttradetime_;
  double lasttradetimestamp_;
  bool ismaincontract_;
  friend struct ::protobuf_Qot_5fCommon_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fCommon_2eproto::InitDefaultsFutureStaticExDataImpl();
};
// -------------------------------------------------------------------

class SecurityStaticInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_Common.SecurityStaticInfo) */ {
 public:
  SecurityStaticInfo();
  virtual ~SecurityStaticInfo();

  SecurityStaticInfo(const SecurityStaticInfo& from);

  inline SecurityStaticInfo& operator=(const SecurityStaticInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SecurityStaticInfo(SecurityStaticInfo&& from) noexcept
    : SecurityStaticInfo() {
    *this = ::std::move(from);
  }

  inline SecurityStaticInfo& operator=(SecurityStaticInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SecurityStaticInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecurityStaticInfo* internal_default_instance() {
    return reinterpret_cast<const SecurityStaticInfo*>(
               &_SecurityStaticInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(SecurityStaticInfo* other);
  friend void swap(SecurityStaticInfo& a, SecurityStaticInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SecurityStaticInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  SecurityStaticInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SecurityStaticInfo& from);
  void MergeFrom(const SecurityStaticInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SecurityStaticInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Qot_Common.SecurityStaticBasic basic = 1;
  bool has_basic() const;
  void clear_basic();
  static const int kBasicFieldNumber = 1;
  const ::Qot_Common::SecurityStaticBasic& basic() const;
  ::Qot_Common::SecurityStaticBasic* release_basic();
  ::Qot_Common::SecurityStaticBasic* mutable_basic();
  void set_allocated_basic(::Qot_Common::SecurityStaticBasic* basic);

  // optional .Qot_Common.WarrantStaticExData warrantExData = 2;
  bool has_warrantexdata() const;
  void clear_warrantexdata();
  static const int kWarrantExDataFieldNumber = 2;
  const ::Qot_Common::WarrantStaticExData& warrantexdata() const;
  ::Qot_Common::WarrantStaticExData* release_warrantexdata();
  ::Qot_Common::WarrantStaticExData* mutable_warrantexdata();
  void set_allocated_warrantexdata(::Qot_Common::WarrantStaticExData* warrantexdata);

  // optional .Qot_Common.OptionStaticExData optionExData = 3;
  bool has_optionexdata() const;
  void clear_optionexdata();
  static const int kOptionExDataFieldNumber = 3;
  const ::Qot_Common::OptionStaticExData& optionexdata() const;
  ::Qot_Common::OptionStaticExData* release_optionexdata();
  ::Qot_Common::OptionStaticExData* mutable_optionexdata();
  void set_allocated_optionexdata(::Qot_Common::OptionStaticExData* optionexdata);

  // optional .Qot_Common.FutureStaticExData futureExData = 4;
  bool has_futureexdata() const;
  void clear_futureexdata();
  static const int kFutureExDataFieldNumber = 4;
  const ::Qot_Common::FutureStaticExData& futureexdata() const;
  ::Qot_Common::FutureStaticExData* release_futureexdata();
  ::Qot_Common::FutureStaticExData* mutable_futureexdata();
  void set_allocated_futureexdata(::Qot_Common::FutureStaticExData* futureexdata);

  // @@protoc_insertion_point(class_scope:Qot_Common.SecurityStaticInfo)
 private:
  void set_has_basic();
  void clear_has_basic();
  void set_has_warrantexdata();
  void clear_has_warrantexdata();
  void set_has_optionexdata();
  void clear_has_optionexdata();
  void set_has_futureexdata();
  void clear_has_futureexdata();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::Qot_Common::SecurityStaticBasic* basic_;
  ::Qot_Common::WarrantStaticExData* warrantexdata_;
  ::Qot_Common::OptionStaticExData* optionexdata_;
  ::Qot_Common::FutureStaticExData* futureexdata_;
  friend struct ::protobuf_Qot_5fCommon_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fCommon_2eproto::InitDefaultsSecurityStaticInfoImpl();
};
// -------------------------------------------------------------------

class Broker : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_Common.Broker) */ {
 public:
  Broker();
  virtual ~Broker();

  Broker(const Broker& from);

  inline Broker& operator=(const Broker& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Broker(Broker&& from) noexcept
    : Broker() {
    *this = ::std::move(from);
  }

  inline Broker& operator=(Broker&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Broker& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Broker* internal_default_instance() {
    return reinterpret_cast<const Broker*>(
               &_Broker_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(Broker* other);
  friend void swap(Broker& a, Broker& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Broker* New() const PROTOBUF_FINAL { return New(NULL); }

  Broker* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Broker& from);
  void MergeFrom(const Broker& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Broker* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required int64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // required int32 pos = 3;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 3;
  ::google::protobuf::int32 pos() const;
  void set_pos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Qot_Common.Broker)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_name();
  void clear_has_name();
  void set_has_pos();
  void clear_has_pos();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 pos_;
  friend struct ::protobuf_Qot_5fCommon_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fCommon_2eproto::InitDefaultsBrokerImpl();
};
// -------------------------------------------------------------------

class Ticker : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_Common.Ticker) */ {
 public:
  Ticker();
  virtual ~Ticker();

  Ticker(const Ticker& from);

  inline Ticker& operator=(const Ticker& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ticker(Ticker&& from) noexcept
    : Ticker() {
    *this = ::std::move(from);
  }

  inline Ticker& operator=(Ticker&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ticker& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ticker* internal_default_instance() {
    return reinterpret_cast<const Ticker*>(
               &_Ticker_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(Ticker* other);
  friend void swap(Ticker& a, Ticker& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ticker* New() const PROTOBUF_FINAL { return New(NULL); }

  Ticker* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ticker& from);
  void MergeFrom(const Ticker& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ticker* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string time = 1;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  const ::std::string& time() const;
  void set_time(const ::std::string& value);
  #if LANG_CXX11
  void set_time(::std::string&& value);
  #endif
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  ::std::string* mutable_time();
  ::std::string* release_time();
  void set_allocated_time(::std::string* time);

  // required int64 sequence = 2;
  bool has_sequence() const;
  void clear_sequence();
  static const int kSequenceFieldNumber = 2;
  ::google::protobuf::int64 sequence() const;
  void set_sequence(::google::protobuf::int64 value);

  // required double price = 4;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 4;
  double price() const;
  void set_price(double value);

  // required int64 volume = 5;
  bool has_volume() const;
  void clear_volume();
  static const int kVolumeFieldNumber = 5;
  ::google::protobuf::int64 volume() const;
  void set_volume(::google::protobuf::int64 value);

  // required int32 dir = 3;
  bool has_dir() const;
  void clear_dir();
  static const int kDirFieldNumber = 3;
  ::google::protobuf::int32 dir() const;
  void set_dir(::google::protobuf::int32 value);

  // optional int32 type = 8;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 8;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required double turnover = 6;
  bool has_turnover() const;
  void clear_turnover();
  static const int kTurnoverFieldNumber = 6;
  double turnover() const;
  void set_turnover(double value);

  // optional double recvTime = 7;
  bool has_recvtime() const;
  void clear_recvtime();
  static const int kRecvTimeFieldNumber = 7;
  double recvtime() const;
  void set_recvtime(double value);

  // optional int32 typeSign = 9;
  bool has_typesign() const;
  void clear_typesign();
  static const int kTypeSignFieldNumber = 9;
  ::google::protobuf::int32 typesign() const;
  void set_typesign(::google::protobuf::int32 value);

  // optional int32 pushDataType = 10;
  bool has_pushdatatype() const;
  void clear_pushdatatype();
  static const int kPushDataTypeFieldNumber = 10;
  ::google::protobuf::int32 pushdatatype() const;
  void set_pushdatatype(::google::protobuf::int32 value);

  // optional double timestamp = 11;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 11;
  double timestamp() const;
  void set_timestamp(double value);

  // @@protoc_insertion_point(class_scope:Qot_Common.Ticker)
 private:
  void set_has_time();
  void clear_has_time();
  void set_has_sequence();
  void clear_has_sequence();
  void set_has_dir();
  void clear_has_dir();
  void set_has_price();
  void clear_has_price();
  void set_has_volume();
  void clear_has_volume();
  void set_has_turnover();
  void clear_has_turnover();
  void set_has_recvtime();
  void clear_has_recvtime();
  void set_has_type();
  void clear_has_type();
  void set_has_typesign();
  void clear_has_typesign();
  void set_has_pushdatatype();
  void clear_has_pushdatatype();
  void set_has_timestamp();
  void clear_has_timestamp();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr time_;
  ::google::protobuf::int64 sequence_;
  double price_;
  ::google::protobuf::int64 volume_;
  ::google::protobuf::int32 dir_;
  ::google::protobuf::int32 type_;
  double turnover_;
  double recvtime_;
  ::google::protobuf::int32 typesign_;
  ::google::protobuf::int32 pushdatatype_;
  double timestamp_;
  friend struct ::protobuf_Qot_5fCommon_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fCommon_2eproto::InitDefaultsTickerImpl();
};
// -------------------------------------------------------------------

class OrderBook : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_Common.OrderBook) */ {
 public:
  OrderBook();
  virtual ~OrderBook();

  OrderBook(const OrderBook& from);

  inline OrderBook& operator=(const OrderBook& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OrderBook(OrderBook&& from) noexcept
    : OrderBook() {
    *this = ::std::move(from);
  }

  inline OrderBook& operator=(OrderBook&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OrderBook& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrderBook* internal_default_instance() {
    return reinterpret_cast<const OrderBook*>(
               &_OrderBook_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(OrderBook* other);
  friend void swap(OrderBook& a, OrderBook& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OrderBook* New() const PROTOBUF_FINAL { return New(NULL); }

  OrderBook* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OrderBook& from);
  void MergeFrom(const OrderBook& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OrderBook* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double price = 1;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 1;
  double price() const;
  void set_price(double value);

  // required int64 volume = 2;
  bool has_volume() const;
  void clear_volume();
  static const int kVolumeFieldNumber = 2;
  ::google::protobuf::int64 volume() const;
  void set_volume(::google::protobuf::int64 value);

  // required int32 orederCount = 3;
  bool has_oredercount() const;
  void clear_oredercount();
  static const int kOrederCountFieldNumber = 3;
  ::google::protobuf::int32 oredercount() const;
  void set_oredercount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Qot_Common.OrderBook)
 private:
  void set_has_price();
  void clear_has_price();
  void set_has_volume();
  void clear_has_volume();
  void set_has_oredercount();
  void clear_has_oredercount();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double price_;
  ::google::protobuf::int64 volume_;
  ::google::protobuf::int32 oredercount_;
  friend struct ::protobuf_Qot_5fCommon_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fCommon_2eproto::InitDefaultsOrderBookImpl();
};
// -------------------------------------------------------------------

class OrderDetail : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_Common.OrderDetail) */ {
 public:
  OrderDetail();
  virtual ~OrderDetail();

  OrderDetail(const OrderDetail& from);

  inline OrderDetail& operator=(const OrderDetail& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OrderDetail(OrderDetail&& from) noexcept
    : OrderDetail() {
    *this = ::std::move(from);
  }

  inline OrderDetail& operator=(OrderDetail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OrderDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrderDetail* internal_default_instance() {
    return reinterpret_cast<const OrderDetail*>(
               &_OrderDetail_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(OrderDetail* other);
  friend void swap(OrderDetail& a, OrderDetail& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OrderDetail* New() const PROTOBUF_FINAL { return New(NULL); }

  OrderDetail* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OrderDetail& from);
  void MergeFrom(const OrderDetail& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OrderDetail* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double orderVol = 2;
  int ordervol_size() const;
  void clear_ordervol();
  static const int kOrderVolFieldNumber = 2;
  double ordervol(int index) const;
  void set_ordervol(int index, double value);
  void add_ordervol(double value);
  const ::google::protobuf::RepeatedField< double >&
      ordervol() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_ordervol();

  // required int32 orderCount = 1;
  bool has_ordercount() const;
  void clear_ordercount();
  static const int kOrderCountFieldNumber = 1;
  ::google::protobuf::int32 ordercount() const;
  void set_ordercount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Qot_Common.OrderDetail)
 private:
  void set_has_ordercount();
  void clear_has_ordercount();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > ordervol_;
  ::google::protobuf::int32 ordercount_;
  friend struct ::protobuf_Qot_5fCommon_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fCommon_2eproto::InitDefaultsOrderDetailImpl();
};
// -------------------------------------------------------------------

class ShareHoldingChange : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_Common.ShareHoldingChange) */ {
 public:
  ShareHoldingChange();
  virtual ~ShareHoldingChange();

  ShareHoldingChange(const ShareHoldingChange& from);

  inline ShareHoldingChange& operator=(const ShareHoldingChange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShareHoldingChange(ShareHoldingChange&& from) noexcept
    : ShareHoldingChange() {
    *this = ::std::move(from);
  }

  inline ShareHoldingChange& operator=(ShareHoldingChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShareHoldingChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShareHoldingChange* internal_default_instance() {
    return reinterpret_cast<const ShareHoldingChange*>(
               &_ShareHoldingChange_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(ShareHoldingChange* other);
  friend void swap(ShareHoldingChange& a, ShareHoldingChange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShareHoldingChange* New() const PROTOBUF_FINAL { return New(NULL); }

  ShareHoldingChange* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ShareHoldingChange& from);
  void MergeFrom(const ShareHoldingChange& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ShareHoldingChange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string holderName = 1;
  bool has_holdername() const;
  void clear_holdername();
  static const int kHolderNameFieldNumber = 1;
  const ::std::string& holdername() const;
  void set_holdername(const ::std::string& value);
  #if LANG_CXX11
  void set_holdername(::std::string&& value);
  #endif
  void set_holdername(const char* value);
  void set_holdername(const char* value, size_t size);
  ::std::string* mutable_holdername();
  ::std::string* release_holdername();
  void set_allocated_holdername(::std::string* holdername);

  // required string time = 6;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 6;
  const ::std::string& time() const;
  void set_time(const ::std::string& value);
  #if LANG_CXX11
  void set_time(::std::string&& value);
  #endif
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  ::std::string* mutable_time();
  ::std::string* release_time();
  void set_allocated_time(::std::string* time);

  // required double holdingQty = 2;
  bool has_holdingqty() const;
  void clear_holdingqty();
  static const int kHoldingQtyFieldNumber = 2;
  double holdingqty() const;
  void set_holdingqty(double value);

  // required double holdingRatio = 3;
  bool has_holdingratio() const;
  void clear_holdingratio();
  static const int kHoldingRatioFieldNumber = 3;
  double holdingratio() const;
  void set_holdingratio(double value);

  // required double changeQty = 4;
  bool has_changeqty() const;
  void clear_changeqty();
  static const int kChangeQtyFieldNumber = 4;
  double changeqty() const;
  void set_changeqty(double value);

  // required double changeRatio = 5;
  bool has_changeratio() const;
  void clear_changeratio();
  static const int kChangeRatioFieldNumber = 5;
  double changeratio() const;
  void set_changeratio(double value);

  // optional double timestamp = 7;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 7;
  double timestamp() const;
  void set_timestamp(double value);

  // @@protoc_insertion_point(class_scope:Qot_Common.ShareHoldingChange)
 private:
  void set_has_holdername();
  void clear_has_holdername();
  void set_has_holdingqty();
  void clear_has_holdingqty();
  void set_has_holdingratio();
  void clear_has_holdingratio();
  void set_has_changeqty();
  void clear_has_changeqty();
  void set_has_changeratio();
  void clear_has_changeratio();
  void set_has_time();
  void clear_has_time();
  void set_has_timestamp();
  void clear_has_timestamp();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr holdername_;
  ::google::protobuf::internal::ArenaStringPtr time_;
  double holdingqty_;
  double holdingratio_;
  double changeqty_;
  double changeratio_;
  double timestamp_;
  friend struct ::protobuf_Qot_5fCommon_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fCommon_2eproto::InitDefaultsShareHoldingChangeImpl();
};
// -------------------------------------------------------------------

class SubInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_Common.SubInfo) */ {
 public:
  SubInfo();
  virtual ~SubInfo();

  SubInfo(const SubInfo& from);

  inline SubInfo& operator=(const SubInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SubInfo(SubInfo&& from) noexcept
    : SubInfo() {
    *this = ::std::move(from);
  }

  inline SubInfo& operator=(SubInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubInfo* internal_default_instance() {
    return reinterpret_cast<const SubInfo*>(
               &_SubInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(SubInfo* other);
  friend void swap(SubInfo& a, SubInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  SubInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SubInfo& from);
  void MergeFrom(const SubInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SubInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Qot_Common.Security securityList = 2;
  int securitylist_size() const;
  void clear_securitylist();
  static const int kSecurityListFieldNumber = 2;
  const ::Qot_Common::Security& securitylist(int index) const;
  ::Qot_Common::Security* mutable_securitylist(int index);
  ::Qot_Common::Security* add_securitylist();
  ::google::protobuf::RepeatedPtrField< ::Qot_Common::Security >*
      mutable_securitylist();
  const ::google::protobuf::RepeatedPtrField< ::Qot_Common::Security >&
      securitylist() const;

  // required int32 subType = 1;
  bool has_subtype() const;
  void clear_subtype();
  static const int kSubTypeFieldNumber = 1;
  ::google::protobuf::int32 subtype() const;
  void set_subtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Qot_Common.SubInfo)
 private:
  void set_has_subtype();
  void clear_has_subtype();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Qot_Common::Security > securitylist_;
  ::google::protobuf::int32 subtype_;
  friend struct ::protobuf_Qot_5fCommon_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fCommon_2eproto::InitDefaultsSubInfoImpl();
};
// -------------------------------------------------------------------

class ConnSubInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_Common.ConnSubInfo) */ {
 public:
  ConnSubInfo();
  virtual ~ConnSubInfo();

  ConnSubInfo(const ConnSubInfo& from);

  inline ConnSubInfo& operator=(const ConnSubInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConnSubInfo(ConnSubInfo&& from) noexcept
    : ConnSubInfo() {
    *this = ::std::move(from);
  }

  inline ConnSubInfo& operator=(ConnSubInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnSubInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnSubInfo* internal_default_instance() {
    return reinterpret_cast<const ConnSubInfo*>(
               &_ConnSubInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(ConnSubInfo* other);
  friend void swap(ConnSubInfo& a, ConnSubInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConnSubInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ConnSubInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConnSubInfo& from);
  void MergeFrom(const ConnSubInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConnSubInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Qot_Common.SubInfo subInfoList = 1;
  int subinfolist_size() const;
  void clear_subinfolist();
  static const int kSubInfoListFieldNumber = 1;
  const ::Qot_Common::SubInfo& subinfolist(int index) const;
  ::Qot_Common::SubInfo* mutable_subinfolist(int index);
  ::Qot_Common::SubInfo* add_subinfolist();
  ::google::protobuf::RepeatedPtrField< ::Qot_Common::SubInfo >*
      mutable_subinfolist();
  const ::google::protobuf::RepeatedPtrField< ::Qot_Common::SubInfo >&
      subinfolist() const;

  // required int32 usedQuota = 2;
  bool has_usedquota() const;
  void clear_usedquota();
  static const int kUsedQuotaFieldNumber = 2;
  ::google::protobuf::int32 usedquota() const;
  void set_usedquota(::google::protobuf::int32 value);

  // required bool isOwnConnData = 3;
  bool has_isownconndata() const;
  void clear_isownconndata();
  static const int kIsOwnConnDataFieldNumber = 3;
  bool isownconndata() const;
  void set_isownconndata(bool value);

  // @@protoc_insertion_point(class_scope:Qot_Common.ConnSubInfo)
 private:
  void set_has_usedquota();
  void clear_has_usedquota();
  void set_has_isownconndata();
  void clear_has_isownconndata();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Qot_Common::SubInfo > subinfolist_;
  ::google::protobuf::int32 usedquota_;
  bool isownconndata_;
  friend struct ::protobuf_Qot_5fCommon_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fCommon_2eproto::InitDefaultsConnSubInfoImpl();
};
// -------------------------------------------------------------------

class PlateInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_Common.PlateInfo) */ {
 public:
  PlateInfo();
  virtual ~PlateInfo();

  PlateInfo(const PlateInfo& from);

  inline PlateInfo& operator=(const PlateInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlateInfo(PlateInfo&& from) noexcept
    : PlateInfo() {
    *this = ::std::move(from);
  }

  inline PlateInfo& operator=(PlateInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlateInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlateInfo* internal_default_instance() {
    return reinterpret_cast<const PlateInfo*>(
               &_PlateInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(PlateInfo* other);
  friend void swap(PlateInfo& a, PlateInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlateInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  PlateInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlateInfo& from);
  void MergeFrom(const PlateInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlateInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required .Qot_Common.Security plate = 1;
  bool has_plate() const;
  void clear_plate();
  static const int kPlateFieldNumber = 1;
  const ::Qot_Common::Security& plate() const;
  ::Qot_Common::Security* release_plate();
  ::Qot_Common::Security* mutable_plate();
  void set_allocated_plate(::Qot_Common::Security* plate);

  // optional int32 plateType = 3;
  bool has_platetype() const;
  void clear_platetype();
  static const int kPlateTypeFieldNumber = 3;
  ::google::protobuf::int32 platetype() const;
  void set_platetype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Qot_Common.PlateInfo)
 private:
  void set_has_plate();
  void clear_has_plate();
  void set_has_name();
  void clear_has_name();
  void set_has_platetype();
  void clear_has_platetype();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::Qot_Common::Security* plate_;
  ::google::protobuf::int32 platetype_;
  friend struct ::protobuf_Qot_5fCommon_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fCommon_2eproto::InitDefaultsPlateInfoImpl();
};
// -------------------------------------------------------------------

class Rehab : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_Common.Rehab) */ {
 public:
  Rehab();
  virtual ~Rehab();

  Rehab(const Rehab& from);

  inline Rehab& operator=(const Rehab& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rehab(Rehab&& from) noexcept
    : Rehab() {
    *this = ::std::move(from);
  }

  inline Rehab& operator=(Rehab&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Rehab& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rehab* internal_default_instance() {
    return reinterpret_cast<const Rehab*>(
               &_Rehab_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(Rehab* other);
  friend void swap(Rehab& a, Rehab& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rehab* New() const PROTOBUF_FINAL { return New(NULL); }

  Rehab* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Rehab& from);
  void MergeFrom(const Rehab& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Rehab* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string time = 1;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  const ::std::string& time() const;
  void set_time(const ::std::string& value);
  #if LANG_CXX11
  void set_time(::std::string&& value);
  #endif
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  ::std::string* mutable_time();
  ::std::string* release_time();
  void set_allocated_time(::std::string* time);

  // required int64 companyActFlag = 2;
  bool has_companyactflag() const;
  void clear_companyactflag();
  static const int kCompanyActFlagFieldNumber = 2;
  ::google::protobuf::int64 companyactflag() const;
  void set_companyactflag(::google::protobuf::int64 value);

  // required double fwdFactorA = 3;
  bool has_fwdfactora() const;
  void clear_fwdfactora();
  static const int kFwdFactorAFieldNumber = 3;
  double fwdfactora() const;
  void set_fwdfactora(double value);

  // required double fwdFactorB = 4;
  bool has_fwdfactorb() const;
  void clear_fwdfactorb();
  static const int kFwdFactorBFieldNumber = 4;
  double fwdfactorb() const;
  void set_fwdfactorb(double value);

  // required double bwdFactorA = 5;
  bool has_bwdfactora() const;
  void clear_bwdfactora();
  static const int kBwdFactorAFieldNumber = 5;
  double bwdfactora() const;
  void set_bwdfactora(double value);

  // required double bwdFactorB = 6;
  bool has_bwdfactorb() const;
  void clear_bwdfactorb();
  static const int kBwdFactorBFieldNumber = 6;
  double bwdfactorb() const;
  void set_bwdfactorb(double value);

  // optional int32 splitBase = 7;
  bool has_splitbase() const;
  void clear_splitbase();
  static const int kSplitBaseFieldNumber = 7;
  ::google::protobuf::int32 splitbase() const;
  void set_splitbase(::google::protobuf::int32 value);

  // optional int32 splitErt = 8;
  bool has_splitert() const;
  void clear_splitert();
  static const int kSplitErtFieldNumber = 8;
  ::google::protobuf::int32 splitert() const;
  void set_splitert(::google::protobuf::int32 value);

  // optional int32 joinBase = 9;
  bool has_joinbase() const;
  void clear_joinbase();
  static const int kJoinBaseFieldNumber = 9;
  ::google::protobuf::int32 joinbase() const;
  void set_joinbase(::google::protobuf::int32 value);

  // optional int32 joinErt = 10;
  bool has_joinert() const;
  void clear_joinert();
  static const int kJoinErtFieldNumber = 10;
  ::google::protobuf::int32 joinert() const;
  void set_joinert(::google::protobuf::int32 value);

  // optional int32 bonusBase = 11;
  bool has_bonusbase() const;
  void clear_bonusbase();
  static const int kBonusBaseFieldNumber = 11;
  ::google::protobuf::int32 bonusbase() const;
  void set_bonusbase(::google::protobuf::int32 value);

  // optional int32 bonusErt = 12;
  bool has_bonusert() const;
  void clear_bonusert();
  static const int kBonusErtFieldNumber = 12;
  ::google::protobuf::int32 bonusert() const;
  void set_bonusert(::google::protobuf::int32 value);

  // optional int32 transferBase = 13;
  bool has_transferbase() const;
  void clear_transferbase();
  static const int kTransferBaseFieldNumber = 13;
  ::google::protobuf::int32 transferbase() const;
  void set_transferbase(::google::protobuf::int32 value);

  // optional int32 transferErt = 14;
  bool has_transferert() const;
  void clear_transferert();
  static const int kTransferErtFieldNumber = 14;
  ::google::protobuf::int32 transferert() const;
  void set_transferert(::google::protobuf::int32 value);

  // optional int32 allotBase = 15;
  bool has_allotbase() const;
  void clear_allotbase();
  static const int kAllotBaseFieldNumber = 15;
  ::google::protobuf::int32 allotbase() const;
  void set_allotbase(::google::protobuf::int32 value);

  // optional int32 allotErt = 16;
  bool has_allotert() const;
  void clear_allotert();
  static const int kAllotErtFieldNumber = 16;
  ::google::protobuf::int32 allotert() const;
  void set_allotert(::google::protobuf::int32 value);

  // optional double allotPrice = 17;
  bool has_allotprice() const;
  void clear_allotprice();
  static const int kAllotPriceFieldNumber = 17;
  double allotprice() const;
  void set_allotprice(double value);

  // optional int32 addBase = 18;
  bool has_addbase() const;
  void clear_addbase();
  static const int kAddBaseFieldNumber = 18;
  ::google::protobuf::int32 addbase() const;
  void set_addbase(::google::protobuf::int32 value);

  // optional int32 addErt = 19;
  bool has_addert() const;
  void clear_addert();
  static const int kAddErtFieldNumber = 19;
  ::google::protobuf::int32 addert() const;
  void set_addert(::google::protobuf::int32 value);

  // optional double addPrice = 20;
  bool has_addprice() const;
  void clear_addprice();
  static const int kAddPriceFieldNumber = 20;
  double addprice() const;
  void set_addprice(double value);

  // optional double dividend = 21;
  bool has_dividend() const;
  void clear_dividend();
  static const int kDividendFieldNumber = 21;
  double dividend() const;
  void set_dividend(double value);

  // optional double spDividend = 22;
  bool has_spdividend() const;
  void clear_spdividend();
  static const int kSpDividendFieldNumber = 22;
  double spdividend() const;
  void set_spdividend(double value);

  // optional double timestamp = 23;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 23;
  double timestamp() const;
  void set_timestamp(double value);

  // @@protoc_insertion_point(class_scope:Qot_Common.Rehab)
 private:
  void set_has_time();
  void clear_has_time();
  void set_has_companyactflag();
  void clear_has_companyactflag();
  void set_has_fwdfactora();
  void clear_has_fwdfactora();
  void set_has_fwdfactorb();
  void clear_has_fwdfactorb();
  void set_has_bwdfactora();
  void clear_has_bwdfactora();
  void set_has_bwdfactorb();
  void clear_has_bwdfactorb();
  void set_has_splitbase();
  void clear_has_splitbase();
  void set_has_splitert();
  void clear_has_splitert();
  void set_has_joinbase();
  void clear_has_joinbase();
  void set_has_joinert();
  void clear_has_joinert();
  void set_has_bonusbase();
  void clear_has_bonusbase();
  void set_has_bonusert();
  void clear_has_bonusert();
  void set_has_transferbase();
  void clear_has_transferbase();
  void set_has_transferert();
  void clear_has_transferert();
  void set_has_allotbase();
  void clear_has_allotbase();
  void set_has_allotert();
  void clear_has_allotert();
  void set_has_allotprice();
  void clear_has_allotprice();
  void set_has_addbase();
  void clear_has_addbase();
  void set_has_addert();
  void clear_has_addert();
  void set_has_addprice();
  void clear_has_addprice();
  void set_has_dividend();
  void clear_has_dividend();
  void set_has_spdividend();
  void clear_has_spdividend();
  void set_has_timestamp();
  void clear_has_timestamp();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr time_;
  ::google::protobuf::int64 companyactflag_;
  double fwdfactora_;
  double fwdfactorb_;
  double bwdfactora_;
  double bwdfactorb_;
  ::google::protobuf::int32 splitbase_;
  ::google::protobuf::int32 splitert_;
  ::google::protobuf::int32 joinbase_;
  ::google::protobuf::int32 joinert_;
  ::google::protobuf::int32 bonusbase_;
  ::google::protobuf::int32 bonusert_;
  ::google::protobuf::int32 transferbase_;
  ::google::protobuf::int32 transferert_;
  ::google::protobuf::int32 allotbase_;
  ::google::protobuf::int32 allotert_;
  double allotprice_;
  ::google::protobuf::int32 addbase_;
  ::google::protobuf::int32 addert_;
  double addprice_;
  double dividend_;
  double spdividend_;
  double timestamp_;
  friend struct ::protobuf_Qot_5fCommon_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fCommon_2eproto::InitDefaultsRehabImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Security

// required int32 market = 1;
inline bool Security::has_market() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Security::set_has_market() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Security::clear_has_market() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Security::clear_market() {
  market_ = 0;
  clear_has_market();
}
inline ::google::protobuf::int32 Security::market() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Security.market)
  return market_;
}
inline void Security::set_market(::google::protobuf::int32 value) {
  set_has_market();
  market_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.Security.market)
}

// required string code = 2;
inline bool Security::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Security::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Security::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Security::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& Security::code() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Security.code)
  return code_.GetNoArena();
}
inline void Security::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_Common.Security.code)
}
#if LANG_CXX11
inline void Security::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_Common.Security.code)
}
#endif
inline void Security::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_Common.Security.code)
}
inline void Security::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_Common.Security.code)
}
inline ::std::string* Security::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:Qot_Common.Security.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Security::release_code() {
  // @@protoc_insertion_point(field_release:Qot_Common.Security.code)
  clear_has_code();
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Security::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:Qot_Common.Security.code)
}

// -------------------------------------------------------------------

// KLine

// required string time = 1;
inline bool KLine::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KLine::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KLine::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KLine::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_time();
}
inline const ::std::string& KLine::time() const {
  // @@protoc_insertion_point(field_get:Qot_Common.KLine.time)
  return time_.GetNoArena();
}
inline void KLine::set_time(const ::std::string& value) {
  set_has_time();
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_Common.KLine.time)
}
#if LANG_CXX11
inline void KLine::set_time(::std::string&& value) {
  set_has_time();
  time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_Common.KLine.time)
}
#endif
inline void KLine::set_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_time();
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_Common.KLine.time)
}
inline void KLine::set_time(const char* value, size_t size) {
  set_has_time();
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_Common.KLine.time)
}
inline ::std::string* KLine::mutable_time() {
  set_has_time();
  // @@protoc_insertion_point(field_mutable:Qot_Common.KLine.time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KLine::release_time() {
  // @@protoc_insertion_point(field_release:Qot_Common.KLine.time)
  clear_has_time();
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KLine::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    set_has_time();
  } else {
    clear_has_time();
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:Qot_Common.KLine.time)
}

// required bool isBlank = 2;
inline bool KLine::has_isblank() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void KLine::set_has_isblank() {
  _has_bits_[0] |= 0x00001000u;
}
inline void KLine::clear_has_isblank() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void KLine::clear_isblank() {
  isblank_ = false;
  clear_has_isblank();
}
inline bool KLine::isblank() const {
  // @@protoc_insertion_point(field_get:Qot_Common.KLine.isBlank)
  return isblank_;
}
inline void KLine::set_isblank(bool value) {
  set_has_isblank();
  isblank_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.KLine.isBlank)
}

// optional double highPrice = 3;
inline bool KLine::has_highprice() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KLine::set_has_highprice() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KLine::clear_has_highprice() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KLine::clear_highprice() {
  highprice_ = 0;
  clear_has_highprice();
}
inline double KLine::highprice() const {
  // @@protoc_insertion_point(field_get:Qot_Common.KLine.highPrice)
  return highprice_;
}
inline void KLine::set_highprice(double value) {
  set_has_highprice();
  highprice_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.KLine.highPrice)
}

// optional double openPrice = 4;
inline bool KLine::has_openprice() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KLine::set_has_openprice() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KLine::clear_has_openprice() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KLine::clear_openprice() {
  openprice_ = 0;
  clear_has_openprice();
}
inline double KLine::openprice() const {
  // @@protoc_insertion_point(field_get:Qot_Common.KLine.openPrice)
  return openprice_;
}
inline void KLine::set_openprice(double value) {
  set_has_openprice();
  openprice_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.KLine.openPrice)
}

// optional double lowPrice = 5;
inline bool KLine::has_lowprice() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void KLine::set_has_lowprice() {
  _has_bits_[0] |= 0x00000008u;
}
inline void KLine::clear_has_lowprice() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void KLine::clear_lowprice() {
  lowprice_ = 0;
  clear_has_lowprice();
}
inline double KLine::lowprice() const {
  // @@protoc_insertion_point(field_get:Qot_Common.KLine.lowPrice)
  return lowprice_;
}
inline void KLine::set_lowprice(double value) {
  set_has_lowprice();
  lowprice_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.KLine.lowPrice)
}

// optional double closePrice = 6;
inline bool KLine::has_closeprice() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void KLine::set_has_closeprice() {
  _has_bits_[0] |= 0x00000010u;
}
inline void KLine::clear_has_closeprice() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void KLine::clear_closeprice() {
  closeprice_ = 0;
  clear_has_closeprice();
}
inline double KLine::closeprice() const {
  // @@protoc_insertion_point(field_get:Qot_Common.KLine.closePrice)
  return closeprice_;
}
inline void KLine::set_closeprice(double value) {
  set_has_closeprice();
  closeprice_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.KLine.closePrice)
}

// optional double lastClosePrice = 7;
inline bool KLine::has_lastcloseprice() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void KLine::set_has_lastcloseprice() {
  _has_bits_[0] |= 0x00000020u;
}
inline void KLine::clear_has_lastcloseprice() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void KLine::clear_lastcloseprice() {
  lastcloseprice_ = 0;
  clear_has_lastcloseprice();
}
inline double KLine::lastcloseprice() const {
  // @@protoc_insertion_point(field_get:Qot_Common.KLine.lastClosePrice)
  return lastcloseprice_;
}
inline void KLine::set_lastcloseprice(double value) {
  set_has_lastcloseprice();
  lastcloseprice_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.KLine.lastClosePrice)
}

// optional int64 volume = 8;
inline bool KLine::has_volume() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void KLine::set_has_volume() {
  _has_bits_[0] |= 0x00000040u;
}
inline void KLine::clear_has_volume() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void KLine::clear_volume() {
  volume_ = GOOGLE_LONGLONG(0);
  clear_has_volume();
}
inline ::google::protobuf::int64 KLine::volume() const {
  // @@protoc_insertion_point(field_get:Qot_Common.KLine.volume)
  return volume_;
}
inline void KLine::set_volume(::google::protobuf::int64 value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.KLine.volume)
}

// optional double turnover = 9;
inline bool KLine::has_turnover() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void KLine::set_has_turnover() {
  _has_bits_[0] |= 0x00000080u;
}
inline void KLine::clear_has_turnover() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void KLine::clear_turnover() {
  turnover_ = 0;
  clear_has_turnover();
}
inline double KLine::turnover() const {
  // @@protoc_insertion_point(field_get:Qot_Common.KLine.turnover)
  return turnover_;
}
inline void KLine::set_turnover(double value) {
  set_has_turnover();
  turnover_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.KLine.turnover)
}

// optional double turnoverRate = 10;
inline bool KLine::has_turnoverrate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void KLine::set_has_turnoverrate() {
  _has_bits_[0] |= 0x00000100u;
}
inline void KLine::clear_has_turnoverrate() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void KLine::clear_turnoverrate() {
  turnoverrate_ = 0;
  clear_has_turnoverrate();
}
inline double KLine::turnoverrate() const {
  // @@protoc_insertion_point(field_get:Qot_Common.KLine.turnoverRate)
  return turnoverrate_;
}
inline void KLine::set_turnoverrate(double value) {
  set_has_turnoverrate();
  turnoverrate_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.KLine.turnoverRate)
}

// optional double pe = 11;
inline bool KLine::has_pe() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void KLine::set_has_pe() {
  _has_bits_[0] |= 0x00000200u;
}
inline void KLine::clear_has_pe() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void KLine::clear_pe() {
  pe_ = 0;
  clear_has_pe();
}
inline double KLine::pe() const {
  // @@protoc_insertion_point(field_get:Qot_Common.KLine.pe)
  return pe_;
}
inline void KLine::set_pe(double value) {
  set_has_pe();
  pe_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.KLine.pe)
}

// optional double changeRate = 12;
inline bool KLine::has_changerate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void KLine::set_has_changerate() {
  _has_bits_[0] |= 0x00000400u;
}
inline void KLine::clear_has_changerate() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void KLine::clear_changerate() {
  changerate_ = 0;
  clear_has_changerate();
}
inline double KLine::changerate() const {
  // @@protoc_insertion_point(field_get:Qot_Common.KLine.changeRate)
  return changerate_;
}
inline void KLine::set_changerate(double value) {
  set_has_changerate();
  changerate_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.KLine.changeRate)
}

// optional double timestamp = 13;
inline bool KLine::has_timestamp() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void KLine::set_has_timestamp() {
  _has_bits_[0] |= 0x00000800u;
}
inline void KLine::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void KLine::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline double KLine::timestamp() const {
  // @@protoc_insertion_point(field_get:Qot_Common.KLine.timestamp)
  return timestamp_;
}
inline void KLine::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.KLine.timestamp)
}

// -------------------------------------------------------------------

// OptionBasicQotExData

// required double strikePrice = 1;
inline bool OptionBasicQotExData::has_strikeprice() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OptionBasicQotExData::set_has_strikeprice() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OptionBasicQotExData::clear_has_strikeprice() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OptionBasicQotExData::clear_strikeprice() {
  strikeprice_ = 0;
  clear_has_strikeprice();
}
inline double OptionBasicQotExData::strikeprice() const {
  // @@protoc_insertion_point(field_get:Qot_Common.OptionBasicQotExData.strikePrice)
  return strikeprice_;
}
inline void OptionBasicQotExData::set_strikeprice(double value) {
  set_has_strikeprice();
  strikeprice_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.OptionBasicQotExData.strikePrice)
}

// required int32 contractSize = 2;
inline bool OptionBasicQotExData::has_contractsize() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OptionBasicQotExData::set_has_contractsize() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OptionBasicQotExData::clear_has_contractsize() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OptionBasicQotExData::clear_contractsize() {
  contractsize_ = 0;
  clear_has_contractsize();
}
inline ::google::protobuf::int32 OptionBasicQotExData::contractsize() const {
  // @@protoc_insertion_point(field_get:Qot_Common.OptionBasicQotExData.contractSize)
  return contractsize_;
}
inline void OptionBasicQotExData::set_contractsize(::google::protobuf::int32 value) {
  set_has_contractsize();
  contractsize_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.OptionBasicQotExData.contractSize)
}

// required int32 openInterest = 3;
inline bool OptionBasicQotExData::has_openinterest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OptionBasicQotExData::set_has_openinterest() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OptionBasicQotExData::clear_has_openinterest() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OptionBasicQotExData::clear_openinterest() {
  openinterest_ = 0;
  clear_has_openinterest();
}
inline ::google::protobuf::int32 OptionBasicQotExData::openinterest() const {
  // @@protoc_insertion_point(field_get:Qot_Common.OptionBasicQotExData.openInterest)
  return openinterest_;
}
inline void OptionBasicQotExData::set_openinterest(::google::protobuf::int32 value) {
  set_has_openinterest();
  openinterest_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.OptionBasicQotExData.openInterest)
}

// required double impliedVolatility = 4;
inline bool OptionBasicQotExData::has_impliedvolatility() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OptionBasicQotExData::set_has_impliedvolatility() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OptionBasicQotExData::clear_has_impliedvolatility() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OptionBasicQotExData::clear_impliedvolatility() {
  impliedvolatility_ = 0;
  clear_has_impliedvolatility();
}
inline double OptionBasicQotExData::impliedvolatility() const {
  // @@protoc_insertion_point(field_get:Qot_Common.OptionBasicQotExData.impliedVolatility)
  return impliedvolatility_;
}
inline void OptionBasicQotExData::set_impliedvolatility(double value) {
  set_has_impliedvolatility();
  impliedvolatility_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.OptionBasicQotExData.impliedVolatility)
}

// required double premium = 5;
inline bool OptionBasicQotExData::has_premium() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OptionBasicQotExData::set_has_premium() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OptionBasicQotExData::clear_has_premium() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OptionBasicQotExData::clear_premium() {
  premium_ = 0;
  clear_has_premium();
}
inline double OptionBasicQotExData::premium() const {
  // @@protoc_insertion_point(field_get:Qot_Common.OptionBasicQotExData.premium)
  return premium_;
}
inline void OptionBasicQotExData::set_premium(double value) {
  set_has_premium();
  premium_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.OptionBasicQotExData.premium)
}

// required double delta = 6;
inline bool OptionBasicQotExData::has_delta() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OptionBasicQotExData::set_has_delta() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OptionBasicQotExData::clear_has_delta() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OptionBasicQotExData::clear_delta() {
  delta_ = 0;
  clear_has_delta();
}
inline double OptionBasicQotExData::delta() const {
  // @@protoc_insertion_point(field_get:Qot_Common.OptionBasicQotExData.delta)
  return delta_;
}
inline void OptionBasicQotExData::set_delta(double value) {
  set_has_delta();
  delta_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.OptionBasicQotExData.delta)
}

// required double gamma = 7;
inline bool OptionBasicQotExData::has_gamma() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OptionBasicQotExData::set_has_gamma() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OptionBasicQotExData::clear_has_gamma() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OptionBasicQotExData::clear_gamma() {
  gamma_ = 0;
  clear_has_gamma();
}
inline double OptionBasicQotExData::gamma() const {
  // @@protoc_insertion_point(field_get:Qot_Common.OptionBasicQotExData.gamma)
  return gamma_;
}
inline void OptionBasicQotExData::set_gamma(double value) {
  set_has_gamma();
  gamma_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.OptionBasicQotExData.gamma)
}

// required double vega = 8;
inline bool OptionBasicQotExData::has_vega() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OptionBasicQotExData::set_has_vega() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OptionBasicQotExData::clear_has_vega() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OptionBasicQotExData::clear_vega() {
  vega_ = 0;
  clear_has_vega();
}
inline double OptionBasicQotExData::vega() const {
  // @@protoc_insertion_point(field_get:Qot_Common.OptionBasicQotExData.vega)
  return vega_;
}
inline void OptionBasicQotExData::set_vega(double value) {
  set_has_vega();
  vega_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.OptionBasicQotExData.vega)
}

// required double theta = 9;
inline bool OptionBasicQotExData::has_theta() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OptionBasicQotExData::set_has_theta() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OptionBasicQotExData::clear_has_theta() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OptionBasicQotExData::clear_theta() {
  theta_ = 0;
  clear_has_theta();
}
inline double OptionBasicQotExData::theta() const {
  // @@protoc_insertion_point(field_get:Qot_Common.OptionBasicQotExData.theta)
  return theta_;
}
inline void OptionBasicQotExData::set_theta(double value) {
  set_has_theta();
  theta_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.OptionBasicQotExData.theta)
}

// required double rho = 10;
inline bool OptionBasicQotExData::has_rho() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OptionBasicQotExData::set_has_rho() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OptionBasicQotExData::clear_has_rho() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OptionBasicQotExData::clear_rho() {
  rho_ = 0;
  clear_has_rho();
}
inline double OptionBasicQotExData::rho() const {
  // @@protoc_insertion_point(field_get:Qot_Common.OptionBasicQotExData.rho)
  return rho_;
}
inline void OptionBasicQotExData::set_rho(double value) {
  set_has_rho();
  rho_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.OptionBasicQotExData.rho)
}

// optional int32 netOpenInterest = 11;
inline bool OptionBasicQotExData::has_netopeninterest() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OptionBasicQotExData::set_has_netopeninterest() {
  _has_bits_[0] |= 0x00000400u;
}
inline void OptionBasicQotExData::clear_has_netopeninterest() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void OptionBasicQotExData::clear_netopeninterest() {
  netopeninterest_ = 0;
  clear_has_netopeninterest();
}
inline ::google::protobuf::int32 OptionBasicQotExData::netopeninterest() const {
  // @@protoc_insertion_point(field_get:Qot_Common.OptionBasicQotExData.netOpenInterest)
  return netopeninterest_;
}
inline void OptionBasicQotExData::set_netopeninterest(::google::protobuf::int32 value) {
  set_has_netopeninterest();
  netopeninterest_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.OptionBasicQotExData.netOpenInterest)
}

// optional int32 expiryDateDistance = 12;
inline bool OptionBasicQotExData::has_expirydatedistance() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void OptionBasicQotExData::set_has_expirydatedistance() {
  _has_bits_[0] |= 0x00000800u;
}
inline void OptionBasicQotExData::clear_has_expirydatedistance() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void OptionBasicQotExData::clear_expirydatedistance() {
  expirydatedistance_ = 0;
  clear_has_expirydatedistance();
}
inline ::google::protobuf::int32 OptionBasicQotExData::expirydatedistance() const {
  // @@protoc_insertion_point(field_get:Qot_Common.OptionBasicQotExData.expiryDateDistance)
  return expirydatedistance_;
}
inline void OptionBasicQotExData::set_expirydatedistance(::google::protobuf::int32 value) {
  set_has_expirydatedistance();
  expirydatedistance_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.OptionBasicQotExData.expiryDateDistance)
}

// optional double contractNominalValue = 13;
inline bool OptionBasicQotExData::has_contractnominalvalue() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void OptionBasicQotExData::set_has_contractnominalvalue() {
  _has_bits_[0] |= 0x00001000u;
}
inline void OptionBasicQotExData::clear_has_contractnominalvalue() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void OptionBasicQotExData::clear_contractnominalvalue() {
  contractnominalvalue_ = 0;
  clear_has_contractnominalvalue();
}
inline double OptionBasicQotExData::contractnominalvalue() const {
  // @@protoc_insertion_point(field_get:Qot_Common.OptionBasicQotExData.contractNominalValue)
  return contractnominalvalue_;
}
inline void OptionBasicQotExData::set_contractnominalvalue(double value) {
  set_has_contractnominalvalue();
  contractnominalvalue_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.OptionBasicQotExData.contractNominalValue)
}

// optional double ownerLotMultiplier = 14;
inline bool OptionBasicQotExData::has_ownerlotmultiplier() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void OptionBasicQotExData::set_has_ownerlotmultiplier() {
  _has_bits_[0] |= 0x00002000u;
}
inline void OptionBasicQotExData::clear_has_ownerlotmultiplier() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void OptionBasicQotExData::clear_ownerlotmultiplier() {
  ownerlotmultiplier_ = 0;
  clear_has_ownerlotmultiplier();
}
inline double OptionBasicQotExData::ownerlotmultiplier() const {
  // @@protoc_insertion_point(field_get:Qot_Common.OptionBasicQotExData.ownerLotMultiplier)
  return ownerlotmultiplier_;
}
inline void OptionBasicQotExData::set_ownerlotmultiplier(double value) {
  set_has_ownerlotmultiplier();
  ownerlotmultiplier_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.OptionBasicQotExData.ownerLotMultiplier)
}

// optional int32 optionAreaType = 15;
inline bool OptionBasicQotExData::has_optionareatype() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void OptionBasicQotExData::set_has_optionareatype() {
  _has_bits_[0] |= 0x00008000u;
}
inline void OptionBasicQotExData::clear_has_optionareatype() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void OptionBasicQotExData::clear_optionareatype() {
  optionareatype_ = 0;
  clear_has_optionareatype();
}
inline ::google::protobuf::int32 OptionBasicQotExData::optionareatype() const {
  // @@protoc_insertion_point(field_get:Qot_Common.OptionBasicQotExData.optionAreaType)
  return optionareatype_;
}
inline void OptionBasicQotExData::set_optionareatype(::google::protobuf::int32 value) {
  set_has_optionareatype();
  optionareatype_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.OptionBasicQotExData.optionAreaType)
}

// optional double contractMultiplier = 16;
inline bool OptionBasicQotExData::has_contractmultiplier() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void OptionBasicQotExData::set_has_contractmultiplier() {
  _has_bits_[0] |= 0x00004000u;
}
inline void OptionBasicQotExData::clear_has_contractmultiplier() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void OptionBasicQotExData::clear_contractmultiplier() {
  contractmultiplier_ = 0;
  clear_has_contractmultiplier();
}
inline double OptionBasicQotExData::contractmultiplier() const {
  // @@protoc_insertion_point(field_get:Qot_Common.OptionBasicQotExData.contractMultiplier)
  return contractmultiplier_;
}
inline void OptionBasicQotExData::set_contractmultiplier(double value) {
  set_has_contractmultiplier();
  contractmultiplier_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.OptionBasicQotExData.contractMultiplier)
}

// -------------------------------------------------------------------

// PreAfterMarketData

// optional double price = 1;
inline bool PreAfterMarketData::has_price() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PreAfterMarketData::set_has_price() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PreAfterMarketData::clear_has_price() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PreAfterMarketData::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline double PreAfterMarketData::price() const {
  // @@protoc_insertion_point(field_get:Qot_Common.PreAfterMarketData.price)
  return price_;
}
inline void PreAfterMarketData::set_price(double value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.PreAfterMarketData.price)
}

// optional double highPrice = 2;
inline bool PreAfterMarketData::has_highprice() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PreAfterMarketData::set_has_highprice() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PreAfterMarketData::clear_has_highprice() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PreAfterMarketData::clear_highprice() {
  highprice_ = 0;
  clear_has_highprice();
}
inline double PreAfterMarketData::highprice() const {
  // @@protoc_insertion_point(field_get:Qot_Common.PreAfterMarketData.highPrice)
  return highprice_;
}
inline void PreAfterMarketData::set_highprice(double value) {
  set_has_highprice();
  highprice_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.PreAfterMarketData.highPrice)
}

// optional double lowPrice = 3;
inline bool PreAfterMarketData::has_lowprice() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PreAfterMarketData::set_has_lowprice() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PreAfterMarketData::clear_has_lowprice() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PreAfterMarketData::clear_lowprice() {
  lowprice_ = 0;
  clear_has_lowprice();
}
inline double PreAfterMarketData::lowprice() const {
  // @@protoc_insertion_point(field_get:Qot_Common.PreAfterMarketData.lowPrice)
  return lowprice_;
}
inline void PreAfterMarketData::set_lowprice(double value) {
  set_has_lowprice();
  lowprice_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.PreAfterMarketData.lowPrice)
}

// optional int64 volume = 4;
inline bool PreAfterMarketData::has_volume() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PreAfterMarketData::set_has_volume() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PreAfterMarketData::clear_has_volume() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PreAfterMarketData::clear_volume() {
  volume_ = GOOGLE_LONGLONG(0);
  clear_has_volume();
}
inline ::google::protobuf::int64 PreAfterMarketData::volume() const {
  // @@protoc_insertion_point(field_get:Qot_Common.PreAfterMarketData.volume)
  return volume_;
}
inline void PreAfterMarketData::set_volume(::google::protobuf::int64 value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.PreAfterMarketData.volume)
}

// optional double turnover = 5;
inline bool PreAfterMarketData::has_turnover() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PreAfterMarketData::set_has_turnover() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PreAfterMarketData::clear_has_turnover() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PreAfterMarketData::clear_turnover() {
  turnover_ = 0;
  clear_has_turnover();
}
inline double PreAfterMarketData::turnover() const {
  // @@protoc_insertion_point(field_get:Qot_Common.PreAfterMarketData.turnover)
  return turnover_;
}
inline void PreAfterMarketData::set_turnover(double value) {
  set_has_turnover();
  turnover_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.PreAfterMarketData.turnover)
}

// optional double changeVal = 6;
inline bool PreAfterMarketData::has_changeval() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PreAfterMarketData::set_has_changeval() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PreAfterMarketData::clear_has_changeval() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PreAfterMarketData::clear_changeval() {
  changeval_ = 0;
  clear_has_changeval();
}
inline double PreAfterMarketData::changeval() const {
  // @@protoc_insertion_point(field_get:Qot_Common.PreAfterMarketData.changeVal)
  return changeval_;
}
inline void PreAfterMarketData::set_changeval(double value) {
  set_has_changeval();
  changeval_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.PreAfterMarketData.changeVal)
}

// optional double changeRate = 7;
inline bool PreAfterMarketData::has_changerate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PreAfterMarketData::set_has_changerate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PreAfterMarketData::clear_has_changerate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PreAfterMarketData::clear_changerate() {
  changerate_ = 0;
  clear_has_changerate();
}
inline double PreAfterMarketData::changerate() const {
  // @@protoc_insertion_point(field_get:Qot_Common.PreAfterMarketData.changeRate)
  return changerate_;
}
inline void PreAfterMarketData::set_changerate(double value) {
  set_has_changerate();
  changerate_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.PreAfterMarketData.changeRate)
}

// optional double amplitude = 8;
inline bool PreAfterMarketData::has_amplitude() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PreAfterMarketData::set_has_amplitude() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PreAfterMarketData::clear_has_amplitude() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PreAfterMarketData::clear_amplitude() {
  amplitude_ = 0;
  clear_has_amplitude();
}
inline double PreAfterMarketData::amplitude() const {
  // @@protoc_insertion_point(field_get:Qot_Common.PreAfterMarketData.amplitude)
  return amplitude_;
}
inline void PreAfterMarketData::set_amplitude(double value) {
  set_has_amplitude();
  amplitude_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.PreAfterMarketData.amplitude)
}

// -------------------------------------------------------------------

// FutureBasicQotExData

// required double lastSettlePrice = 1;
inline bool FutureBasicQotExData::has_lastsettleprice() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FutureBasicQotExData::set_has_lastsettleprice() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FutureBasicQotExData::clear_has_lastsettleprice() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FutureBasicQotExData::clear_lastsettleprice() {
  lastsettleprice_ = 0;
  clear_has_lastsettleprice();
}
inline double FutureBasicQotExData::lastsettleprice() const {
  // @@protoc_insertion_point(field_get:Qot_Common.FutureBasicQotExData.lastSettlePrice)
  return lastsettleprice_;
}
inline void FutureBasicQotExData::set_lastsettleprice(double value) {
  set_has_lastsettleprice();
  lastsettleprice_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.FutureBasicQotExData.lastSettlePrice)
}

// required int32 position = 2;
inline bool FutureBasicQotExData::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FutureBasicQotExData::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FutureBasicQotExData::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FutureBasicQotExData::clear_position() {
  position_ = 0;
  clear_has_position();
}
inline ::google::protobuf::int32 FutureBasicQotExData::position() const {
  // @@protoc_insertion_point(field_get:Qot_Common.FutureBasicQotExData.position)
  return position_;
}
inline void FutureBasicQotExData::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.FutureBasicQotExData.position)
}

// required int32 positionChange = 3;
inline bool FutureBasicQotExData::has_positionchange() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FutureBasicQotExData::set_has_positionchange() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FutureBasicQotExData::clear_has_positionchange() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FutureBasicQotExData::clear_positionchange() {
  positionchange_ = 0;
  clear_has_positionchange();
}
inline ::google::protobuf::int32 FutureBasicQotExData::positionchange() const {
  // @@protoc_insertion_point(field_get:Qot_Common.FutureBasicQotExData.positionChange)
  return positionchange_;
}
inline void FutureBasicQotExData::set_positionchange(::google::protobuf::int32 value) {
  set_has_positionchange();
  positionchange_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.FutureBasicQotExData.positionChange)
}

// optional int32 expiryDateDistance = 4;
inline bool FutureBasicQotExData::has_expirydatedistance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FutureBasicQotExData::set_has_expirydatedistance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FutureBasicQotExData::clear_has_expirydatedistance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FutureBasicQotExData::clear_expirydatedistance() {
  expirydatedistance_ = 0;
  clear_has_expirydatedistance();
}
inline ::google::protobuf::int32 FutureBasicQotExData::expirydatedistance() const {
  // @@protoc_insertion_point(field_get:Qot_Common.FutureBasicQotExData.expiryDateDistance)
  return expirydatedistance_;
}
inline void FutureBasicQotExData::set_expirydatedistance(::google::protobuf::int32 value) {
  set_has_expirydatedistance();
  expirydatedistance_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.FutureBasicQotExData.expiryDateDistance)
}

// -------------------------------------------------------------------

// BasicQot

// required .Qot_Common.Security security = 1;
inline bool BasicQot::has_security() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BasicQot::set_has_security() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BasicQot::clear_has_security() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BasicQot::clear_security() {
  if (security_ != NULL) security_->Clear();
  clear_has_security();
}
inline const ::Qot_Common::Security& BasicQot::security() const {
  const ::Qot_Common::Security* p = security_;
  // @@protoc_insertion_point(field_get:Qot_Common.BasicQot.security)
  return p != NULL ? *p : *reinterpret_cast<const ::Qot_Common::Security*>(
      &::Qot_Common::_Security_default_instance_);
}
inline ::Qot_Common::Security* BasicQot::release_security() {
  // @@protoc_insertion_point(field_release:Qot_Common.BasicQot.security)
  clear_has_security();
  ::Qot_Common::Security* temp = security_;
  security_ = NULL;
  return temp;
}
inline ::Qot_Common::Security* BasicQot::mutable_security() {
  set_has_security();
  if (security_ == NULL) {
    security_ = new ::Qot_Common::Security;
  }
  // @@protoc_insertion_point(field_mutable:Qot_Common.BasicQot.security)
  return security_;
}
inline void BasicQot::set_allocated_security(::Qot_Common::Security* security) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete security_;
  }
  if (security) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      security = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, security, submessage_arena);
    }
    set_has_security();
  } else {
    clear_has_security();
  }
  security_ = security;
  // @@protoc_insertion_point(field_set_allocated:Qot_Common.BasicQot.security)
}

// required bool isSuspended = 2;
inline bool BasicQot::has_issuspended() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BasicQot::set_has_issuspended() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BasicQot::clear_has_issuspended() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BasicQot::clear_issuspended() {
  issuspended_ = false;
  clear_has_issuspended();
}
inline bool BasicQot::issuspended() const {
  // @@protoc_insertion_point(field_get:Qot_Common.BasicQot.isSuspended)
  return issuspended_;
}
inline void BasicQot::set_issuspended(bool value) {
  set_has_issuspended();
  issuspended_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.BasicQot.isSuspended)
}

// required string listTime = 3;
inline bool BasicQot::has_listtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BasicQot::set_has_listtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BasicQot::clear_has_listtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BasicQot::clear_listtime() {
  listtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_listtime();
}
inline const ::std::string& BasicQot::listtime() const {
  // @@protoc_insertion_point(field_get:Qot_Common.BasicQot.listTime)
  return listtime_.GetNoArena();
}
inline void BasicQot::set_listtime(const ::std::string& value) {
  set_has_listtime();
  listtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_Common.BasicQot.listTime)
}
#if LANG_CXX11
inline void BasicQot::set_listtime(::std::string&& value) {
  set_has_listtime();
  listtime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_Common.BasicQot.listTime)
}
#endif
inline void BasicQot::set_listtime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_listtime();
  listtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_Common.BasicQot.listTime)
}
inline void BasicQot::set_listtime(const char* value, size_t size) {
  set_has_listtime();
  listtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_Common.BasicQot.listTime)
}
inline ::std::string* BasicQot::mutable_listtime() {
  set_has_listtime();
  // @@protoc_insertion_point(field_mutable:Qot_Common.BasicQot.listTime)
  return listtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BasicQot::release_listtime() {
  // @@protoc_insertion_point(field_release:Qot_Common.BasicQot.listTime)
  clear_has_listtime();
  return listtime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BasicQot::set_allocated_listtime(::std::string* listtime) {
  if (listtime != NULL) {
    set_has_listtime();
  } else {
    clear_has_listtime();
  }
  listtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), listtime);
  // @@protoc_insertion_point(field_set_allocated:Qot_Common.BasicQot.listTime)
}

// required double priceSpread = 4;
inline bool BasicQot::has_pricespread() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BasicQot::set_has_pricespread() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BasicQot::clear_has_pricespread() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BasicQot::clear_pricespread() {
  pricespread_ = 0;
  clear_has_pricespread();
}
inline double BasicQot::pricespread() const {
  // @@protoc_insertion_point(field_get:Qot_Common.BasicQot.priceSpread)
  return pricespread_;
}
inline void BasicQot::set_pricespread(double value) {
  set_has_pricespread();
  pricespread_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.BasicQot.priceSpread)
}

// required string updateTime = 5;
inline bool BasicQot::has_updatetime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BasicQot::set_has_updatetime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BasicQot::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BasicQot::clear_updatetime() {
  updatetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_updatetime();
}
inline const ::std::string& BasicQot::updatetime() const {
  // @@protoc_insertion_point(field_get:Qot_Common.BasicQot.updateTime)
  return updatetime_.GetNoArena();
}
inline void BasicQot::set_updatetime(const ::std::string& value) {
  set_has_updatetime();
  updatetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_Common.BasicQot.updateTime)
}
#if LANG_CXX11
inline void BasicQot::set_updatetime(::std::string&& value) {
  set_has_updatetime();
  updatetime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_Common.BasicQot.updateTime)
}
#endif
inline void BasicQot::set_updatetime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_updatetime();
  updatetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_Common.BasicQot.updateTime)
}
inline void BasicQot::set_updatetime(const char* value, size_t size) {
  set_has_updatetime();
  updatetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_Common.BasicQot.updateTime)
}
inline ::std::string* BasicQot::mutable_updatetime() {
  set_has_updatetime();
  // @@protoc_insertion_point(field_mutable:Qot_Common.BasicQot.updateTime)
  return updatetime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BasicQot::release_updatetime() {
  // @@protoc_insertion_point(field_release:Qot_Common.BasicQot.updateTime)
  clear_has_updatetime();
  return updatetime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BasicQot::set_allocated_updatetime(::std::string* updatetime) {
  if (updatetime != NULL) {
    set_has_updatetime();
  } else {
    clear_has_updatetime();
  }
  updatetime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), updatetime);
  // @@protoc_insertion_point(field_set_allocated:Qot_Common.BasicQot.updateTime)
}

// required double highPrice = 6;
inline bool BasicQot::has_highprice() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BasicQot::set_has_highprice() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BasicQot::clear_has_highprice() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BasicQot::clear_highprice() {
  highprice_ = 0;
  clear_has_highprice();
}
inline double BasicQot::highprice() const {
  // @@protoc_insertion_point(field_get:Qot_Common.BasicQot.highPrice)
  return highprice_;
}
inline void BasicQot::set_highprice(double value) {
  set_has_highprice();
  highprice_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.BasicQot.highPrice)
}

// required double openPrice = 7;
inline bool BasicQot::has_openprice() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BasicQot::set_has_openprice() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BasicQot::clear_has_openprice() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BasicQot::clear_openprice() {
  openprice_ = 0;
  clear_has_openprice();
}
inline double BasicQot::openprice() const {
  // @@protoc_insertion_point(field_get:Qot_Common.BasicQot.openPrice)
  return openprice_;
}
inline void BasicQot::set_openprice(double value) {
  set_has_openprice();
  openprice_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.BasicQot.openPrice)
}

// required double lowPrice = 8;
inline bool BasicQot::has_lowprice() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BasicQot::set_has_lowprice() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BasicQot::clear_has_lowprice() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BasicQot::clear_lowprice() {
  lowprice_ = 0;
  clear_has_lowprice();
}
inline double BasicQot::lowprice() const {
  // @@protoc_insertion_point(field_get:Qot_Common.BasicQot.lowPrice)
  return lowprice_;
}
inline void BasicQot::set_lowprice(double value) {
  set_has_lowprice();
  lowprice_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.BasicQot.lowPrice)
}

// required double curPrice = 9;
inline bool BasicQot::has_curprice() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BasicQot::set_has_curprice() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BasicQot::clear_has_curprice() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BasicQot::clear_curprice() {
  curprice_ = 0;
  clear_has_curprice();
}
inline double BasicQot::curprice() const {
  // @@protoc_insertion_point(field_get:Qot_Common.BasicQot.curPrice)
  return curprice_;
}
inline void BasicQot::set_curprice(double value) {
  set_has_curprice();
  curprice_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.BasicQot.curPrice)
}

// required double lastClosePrice = 10;
inline bool BasicQot::has_lastcloseprice() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BasicQot::set_has_lastcloseprice() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BasicQot::clear_has_lastcloseprice() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BasicQot::clear_lastcloseprice() {
  lastcloseprice_ = 0;
  clear_has_lastcloseprice();
}
inline double BasicQot::lastcloseprice() const {
  // @@protoc_insertion_point(field_get:Qot_Common.BasicQot.lastClosePrice)
  return lastcloseprice_;
}
inline void BasicQot::set_lastcloseprice(double value) {
  set_has_lastcloseprice();
  lastcloseprice_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.BasicQot.lastClosePrice)
}

// required int64 volume = 11;
inline bool BasicQot::has_volume() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BasicQot::set_has_volume() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BasicQot::clear_has_volume() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BasicQot::clear_volume() {
  volume_ = GOOGLE_LONGLONG(0);
  clear_has_volume();
}
inline ::google::protobuf::int64 BasicQot::volume() const {
  // @@protoc_insertion_point(field_get:Qot_Common.BasicQot.volume)
  return volume_;
}
inline void BasicQot::set_volume(::google::protobuf::int64 value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.BasicQot.volume)
}

// required double turnover = 12;
inline bool BasicQot::has_turnover() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void BasicQot::set_has_turnover() {
  _has_bits_[0] |= 0x00010000u;
}
inline void BasicQot::clear_has_turnover() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void BasicQot::clear_turnover() {
  turnover_ = 0;
  clear_has_turnover();
}
inline double BasicQot::turnover() const {
  // @@protoc_insertion_point(field_get:Qot_Common.BasicQot.turnover)
  return turnover_;
}
inline void BasicQot::set_turnover(double value) {
  set_has_turnover();
  turnover_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.BasicQot.turnover)
}

// required double turnoverRate = 13;
inline bool BasicQot::has_turnoverrate() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void BasicQot::set_has_turnoverrate() {
  _has_bits_[0] |= 0x00020000u;
}
inline void BasicQot::clear_has_turnoverrate() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void BasicQot::clear_turnoverrate() {
  turnoverrate_ = 0;
  clear_has_turnoverrate();
}
inline double BasicQot::turnoverrate() const {
  // @@protoc_insertion_point(field_get:Qot_Common.BasicQot.turnoverRate)
  return turnoverrate_;
}
inline void BasicQot::set_turnoverrate(double value) {
  set_has_turnoverrate();
  turnoverrate_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.BasicQot.turnoverRate)
}

// required double amplitude = 14;
inline bool BasicQot::has_amplitude() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void BasicQot::set_has_amplitude() {
  _has_bits_[0] |= 0x00040000u;
}
inline void BasicQot::clear_has_amplitude() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void BasicQot::clear_amplitude() {
  amplitude_ = 0;
  clear_has_amplitude();
}
inline double BasicQot::amplitude() const {
  // @@protoc_insertion_point(field_get:Qot_Common.BasicQot.amplitude)
  return amplitude_;
}
inline void BasicQot::set_amplitude(double value) {
  set_has_amplitude();
  amplitude_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.BasicQot.amplitude)
}

// optional int32 darkStatus = 15;
inline bool BasicQot::has_darkstatus() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BasicQot::set_has_darkstatus() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BasicQot::clear_has_darkstatus() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BasicQot::clear_darkstatus() {
  darkstatus_ = 0;
  clear_has_darkstatus();
}
inline ::google::protobuf::int32 BasicQot::darkstatus() const {
  // @@protoc_insertion_point(field_get:Qot_Common.BasicQot.darkStatus)
  return darkstatus_;
}
inline void BasicQot::set_darkstatus(::google::protobuf::int32 value) {
  set_has_darkstatus();
  darkstatus_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.BasicQot.darkStatus)
}

// optional .Qot_Common.OptionBasicQotExData optionExData = 16;
inline bool BasicQot::has_optionexdata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BasicQot::set_has_optionexdata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BasicQot::clear_has_optionexdata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BasicQot::clear_optionexdata() {
  if (optionexdata_ != NULL) optionexdata_->Clear();
  clear_has_optionexdata();
}
inline const ::Qot_Common::OptionBasicQotExData& BasicQot::optionexdata() const {
  const ::Qot_Common::OptionBasicQotExData* p = optionexdata_;
  // @@protoc_insertion_point(field_get:Qot_Common.BasicQot.optionExData)
  return p != NULL ? *p : *reinterpret_cast<const ::Qot_Common::OptionBasicQotExData*>(
      &::Qot_Common::_OptionBasicQotExData_default_instance_);
}
inline ::Qot_Common::OptionBasicQotExData* BasicQot::release_optionexdata() {
  // @@protoc_insertion_point(field_release:Qot_Common.BasicQot.optionExData)
  clear_has_optionexdata();
  ::Qot_Common::OptionBasicQotExData* temp = optionexdata_;
  optionexdata_ = NULL;
  return temp;
}
inline ::Qot_Common::OptionBasicQotExData* BasicQot::mutable_optionexdata() {
  set_has_optionexdata();
  if (optionexdata_ == NULL) {
    optionexdata_ = new ::Qot_Common::OptionBasicQotExData;
  }
  // @@protoc_insertion_point(field_mutable:Qot_Common.BasicQot.optionExData)
  return optionexdata_;
}
inline void BasicQot::set_allocated_optionexdata(::Qot_Common::OptionBasicQotExData* optionexdata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete optionexdata_;
  }
  if (optionexdata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      optionexdata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, optionexdata, submessage_arena);
    }
    set_has_optionexdata();
  } else {
    clear_has_optionexdata();
  }
  optionexdata_ = optionexdata;
  // @@protoc_insertion_point(field_set_allocated:Qot_Common.BasicQot.optionExData)
}

// optional double listTimestamp = 17;
inline bool BasicQot::has_listtimestamp() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void BasicQot::set_has_listtimestamp() {
  _has_bits_[0] |= 0x00080000u;
}
inline void BasicQot::clear_has_listtimestamp() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void BasicQot::clear_listtimestamp() {
  listtimestamp_ = 0;
  clear_has_listtimestamp();
}
inline double BasicQot::listtimestamp() const {
  // @@protoc_insertion_point(field_get:Qot_Common.BasicQot.listTimestamp)
  return listtimestamp_;
}
inline void BasicQot::set_listtimestamp(double value) {
  set_has_listtimestamp();
  listtimestamp_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.BasicQot.listTimestamp)
}

// optional double updateTimestamp = 18;
inline bool BasicQot::has_updatetimestamp() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void BasicQot::set_has_updatetimestamp() {
  _has_bits_[0] |= 0x00100000u;
}
inline void BasicQot::clear_has_updatetimestamp() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void BasicQot::clear_updatetimestamp() {
  updatetimestamp_ = 0;
  clear_has_updatetimestamp();
}
inline double BasicQot::updatetimestamp() const {
  // @@protoc_insertion_point(field_get:Qot_Common.BasicQot.updateTimestamp)
  return updatetimestamp_;
}
inline void BasicQot::set_updatetimestamp(double value) {
  set_has_updatetimestamp();
  updatetimestamp_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.BasicQot.updateTimestamp)
}

// optional .Qot_Common.PreAfterMarketData preMarket = 19;
inline bool BasicQot::has_premarket() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BasicQot::set_has_premarket() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BasicQot::clear_has_premarket() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BasicQot::clear_premarket() {
  if (premarket_ != NULL) premarket_->Clear();
  clear_has_premarket();
}
inline const ::Qot_Common::PreAfterMarketData& BasicQot::premarket() const {
  const ::Qot_Common::PreAfterMarketData* p = premarket_;
  // @@protoc_insertion_point(field_get:Qot_Common.BasicQot.preMarket)
  return p != NULL ? *p : *reinterpret_cast<const ::Qot_Common::PreAfterMarketData*>(
      &::Qot_Common::_PreAfterMarketData_default_instance_);
}
inline ::Qot_Common::PreAfterMarketData* BasicQot::release_premarket() {
  // @@protoc_insertion_point(field_release:Qot_Common.BasicQot.preMarket)
  clear_has_premarket();
  ::Qot_Common::PreAfterMarketData* temp = premarket_;
  premarket_ = NULL;
  return temp;
}
inline ::Qot_Common::PreAfterMarketData* BasicQot::mutable_premarket() {
  set_has_premarket();
  if (premarket_ == NULL) {
    premarket_ = new ::Qot_Common::PreAfterMarketData;
  }
  // @@protoc_insertion_point(field_mutable:Qot_Common.BasicQot.preMarket)
  return premarket_;
}
inline void BasicQot::set_allocated_premarket(::Qot_Common::PreAfterMarketData* premarket) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete premarket_;
  }
  if (premarket) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      premarket = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, premarket, submessage_arena);
    }
    set_has_premarket();
  } else {
    clear_has_premarket();
  }
  premarket_ = premarket;
  // @@protoc_insertion_point(field_set_allocated:Qot_Common.BasicQot.preMarket)
}

// optional .Qot_Common.PreAfterMarketData afterMarket = 20;
inline bool BasicQot::has_aftermarket() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BasicQot::set_has_aftermarket() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BasicQot::clear_has_aftermarket() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BasicQot::clear_aftermarket() {
  if (aftermarket_ != NULL) aftermarket_->Clear();
  clear_has_aftermarket();
}
inline const ::Qot_Common::PreAfterMarketData& BasicQot::aftermarket() const {
  const ::Qot_Common::PreAfterMarketData* p = aftermarket_;
  // @@protoc_insertion_point(field_get:Qot_Common.BasicQot.afterMarket)
  return p != NULL ? *p : *reinterpret_cast<const ::Qot_Common::PreAfterMarketData*>(
      &::Qot_Common::_PreAfterMarketData_default_instance_);
}
inline ::Qot_Common::PreAfterMarketData* BasicQot::release_aftermarket() {
  // @@protoc_insertion_point(field_release:Qot_Common.BasicQot.afterMarket)
  clear_has_aftermarket();
  ::Qot_Common::PreAfterMarketData* temp = aftermarket_;
  aftermarket_ = NULL;
  return temp;
}
inline ::Qot_Common::PreAfterMarketData* BasicQot::mutable_aftermarket() {
  set_has_aftermarket();
  if (aftermarket_ == NULL) {
    aftermarket_ = new ::Qot_Common::PreAfterMarketData;
  }
  // @@protoc_insertion_point(field_mutable:Qot_Common.BasicQot.afterMarket)
  return aftermarket_;
}
inline void BasicQot::set_allocated_aftermarket(::Qot_Common::PreAfterMarketData* aftermarket) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete aftermarket_;
  }
  if (aftermarket) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      aftermarket = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, aftermarket, submessage_arena);
    }
    set_has_aftermarket();
  } else {
    clear_has_aftermarket();
  }
  aftermarket_ = aftermarket;
  // @@protoc_insertion_point(field_set_allocated:Qot_Common.BasicQot.afterMarket)
}

// optional int32 secStatus = 21;
inline bool BasicQot::has_secstatus() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void BasicQot::set_has_secstatus() {
  _has_bits_[0] |= 0x00200000u;
}
inline void BasicQot::clear_has_secstatus() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void BasicQot::clear_secstatus() {
  secstatus_ = 0;
  clear_has_secstatus();
}
inline ::google::protobuf::int32 BasicQot::secstatus() const {
  // @@protoc_insertion_point(field_get:Qot_Common.BasicQot.secStatus)
  return secstatus_;
}
inline void BasicQot::set_secstatus(::google::protobuf::int32 value) {
  set_has_secstatus();
  secstatus_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.BasicQot.secStatus)
}

// optional .Qot_Common.FutureBasicQotExData futureExData = 22;
inline bool BasicQot::has_futureexdata() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BasicQot::set_has_futureexdata() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BasicQot::clear_has_futureexdata() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BasicQot::clear_futureexdata() {
  if (futureexdata_ != NULL) futureexdata_->Clear();
  clear_has_futureexdata();
}
inline const ::Qot_Common::FutureBasicQotExData& BasicQot::futureexdata() const {
  const ::Qot_Common::FutureBasicQotExData* p = futureexdata_;
  // @@protoc_insertion_point(field_get:Qot_Common.BasicQot.futureExData)
  return p != NULL ? *p : *reinterpret_cast<const ::Qot_Common::FutureBasicQotExData*>(
      &::Qot_Common::_FutureBasicQotExData_default_instance_);
}
inline ::Qot_Common::FutureBasicQotExData* BasicQot::release_futureexdata() {
  // @@protoc_insertion_point(field_release:Qot_Common.BasicQot.futureExData)
  clear_has_futureexdata();
  ::Qot_Common::FutureBasicQotExData* temp = futureexdata_;
  futureexdata_ = NULL;
  return temp;
}
inline ::Qot_Common::FutureBasicQotExData* BasicQot::mutable_futureexdata() {
  set_has_futureexdata();
  if (futureexdata_ == NULL) {
    futureexdata_ = new ::Qot_Common::FutureBasicQotExData;
  }
  // @@protoc_insertion_point(field_mutable:Qot_Common.BasicQot.futureExData)
  return futureexdata_;
}
inline void BasicQot::set_allocated_futureexdata(::Qot_Common::FutureBasicQotExData* futureexdata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete futureexdata_;
  }
  if (futureexdata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      futureexdata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, futureexdata, submessage_arena);
    }
    set_has_futureexdata();
  } else {
    clear_has_futureexdata();
  }
  futureexdata_ = futureexdata;
  // @@protoc_insertion_point(field_set_allocated:Qot_Common.BasicQot.futureExData)
}

// -------------------------------------------------------------------

// TimeShare

// required string time = 1;
inline bool TimeShare::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TimeShare::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TimeShare::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TimeShare::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_time();
}
inline const ::std::string& TimeShare::time() const {
  // @@protoc_insertion_point(field_get:Qot_Common.TimeShare.time)
  return time_.GetNoArena();
}
inline void TimeShare::set_time(const ::std::string& value) {
  set_has_time();
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_Common.TimeShare.time)
}
#if LANG_CXX11
inline void TimeShare::set_time(::std::string&& value) {
  set_has_time();
  time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_Common.TimeShare.time)
}
#endif
inline void TimeShare::set_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_time();
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_Common.TimeShare.time)
}
inline void TimeShare::set_time(const char* value, size_t size) {
  set_has_time();
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_Common.TimeShare.time)
}
inline ::std::string* TimeShare::mutable_time() {
  set_has_time();
  // @@protoc_insertion_point(field_mutable:Qot_Common.TimeShare.time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TimeShare::release_time() {
  // @@protoc_insertion_point(field_release:Qot_Common.TimeShare.time)
  clear_has_time();
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TimeShare::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    set_has_time();
  } else {
    clear_has_time();
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:Qot_Common.TimeShare.time)
}

// required int32 minute = 2;
inline bool TimeShare::has_minute() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TimeShare::set_has_minute() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TimeShare::clear_has_minute() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TimeShare::clear_minute() {
  minute_ = 0;
  clear_has_minute();
}
inline ::google::protobuf::int32 TimeShare::minute() const {
  // @@protoc_insertion_point(field_get:Qot_Common.TimeShare.minute)
  return minute_;
}
inline void TimeShare::set_minute(::google::protobuf::int32 value) {
  set_has_minute();
  minute_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.TimeShare.minute)
}

// required bool isBlank = 3;
inline bool TimeShare::has_isblank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TimeShare::set_has_isblank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TimeShare::clear_has_isblank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TimeShare::clear_isblank() {
  isblank_ = false;
  clear_has_isblank();
}
inline bool TimeShare::isblank() const {
  // @@protoc_insertion_point(field_get:Qot_Common.TimeShare.isBlank)
  return isblank_;
}
inline void TimeShare::set_isblank(bool value) {
  set_has_isblank();
  isblank_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.TimeShare.isBlank)
}

// optional double price = 4;
inline bool TimeShare::has_price() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TimeShare::set_has_price() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TimeShare::clear_has_price() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TimeShare::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline double TimeShare::price() const {
  // @@protoc_insertion_point(field_get:Qot_Common.TimeShare.price)
  return price_;
}
inline void TimeShare::set_price(double value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.TimeShare.price)
}

// optional double lastClosePrice = 5;
inline bool TimeShare::has_lastcloseprice() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TimeShare::set_has_lastcloseprice() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TimeShare::clear_has_lastcloseprice() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TimeShare::clear_lastcloseprice() {
  lastcloseprice_ = 0;
  clear_has_lastcloseprice();
}
inline double TimeShare::lastcloseprice() const {
  // @@protoc_insertion_point(field_get:Qot_Common.TimeShare.lastClosePrice)
  return lastcloseprice_;
}
inline void TimeShare::set_lastcloseprice(double value) {
  set_has_lastcloseprice();
  lastcloseprice_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.TimeShare.lastClosePrice)
}

// optional double avgPrice = 6;
inline bool TimeShare::has_avgprice() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TimeShare::set_has_avgprice() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TimeShare::clear_has_avgprice() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TimeShare::clear_avgprice() {
  avgprice_ = 0;
  clear_has_avgprice();
}
inline double TimeShare::avgprice() const {
  // @@protoc_insertion_point(field_get:Qot_Common.TimeShare.avgPrice)
  return avgprice_;
}
inline void TimeShare::set_avgprice(double value) {
  set_has_avgprice();
  avgprice_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.TimeShare.avgPrice)
}

// optional int64 volume = 7;
inline bool TimeShare::has_volume() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TimeShare::set_has_volume() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TimeShare::clear_has_volume() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TimeShare::clear_volume() {
  volume_ = GOOGLE_LONGLONG(0);
  clear_has_volume();
}
inline ::google::protobuf::int64 TimeShare::volume() const {
  // @@protoc_insertion_point(field_get:Qot_Common.TimeShare.volume)
  return volume_;
}
inline void TimeShare::set_volume(::google::protobuf::int64 value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.TimeShare.volume)
}

// optional double turnover = 8;
inline bool TimeShare::has_turnover() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TimeShare::set_has_turnover() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TimeShare::clear_has_turnover() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TimeShare::clear_turnover() {
  turnover_ = 0;
  clear_has_turnover();
}
inline double TimeShare::turnover() const {
  // @@protoc_insertion_point(field_get:Qot_Common.TimeShare.turnover)
  return turnover_;
}
inline void TimeShare::set_turnover(double value) {
  set_has_turnover();
  turnover_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.TimeShare.turnover)
}

// optional double timestamp = 9;
inline bool TimeShare::has_timestamp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TimeShare::set_has_timestamp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TimeShare::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TimeShare::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline double TimeShare::timestamp() const {
  // @@protoc_insertion_point(field_get:Qot_Common.TimeShare.timestamp)
  return timestamp_;
}
inline void TimeShare::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.TimeShare.timestamp)
}

// -------------------------------------------------------------------

// SecurityStaticBasic

// required .Qot_Common.Security security = 1;
inline bool SecurityStaticBasic::has_security() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SecurityStaticBasic::set_has_security() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SecurityStaticBasic::clear_has_security() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SecurityStaticBasic::clear_security() {
  if (security_ != NULL) security_->Clear();
  clear_has_security();
}
inline const ::Qot_Common::Security& SecurityStaticBasic::security() const {
  const ::Qot_Common::Security* p = security_;
  // @@protoc_insertion_point(field_get:Qot_Common.SecurityStaticBasic.security)
  return p != NULL ? *p : *reinterpret_cast<const ::Qot_Common::Security*>(
      &::Qot_Common::_Security_default_instance_);
}
inline ::Qot_Common::Security* SecurityStaticBasic::release_security() {
  // @@protoc_insertion_point(field_release:Qot_Common.SecurityStaticBasic.security)
  clear_has_security();
  ::Qot_Common::Security* temp = security_;
  security_ = NULL;
  return temp;
}
inline ::Qot_Common::Security* SecurityStaticBasic::mutable_security() {
  set_has_security();
  if (security_ == NULL) {
    security_ = new ::Qot_Common::Security;
  }
  // @@protoc_insertion_point(field_mutable:Qot_Common.SecurityStaticBasic.security)
  return security_;
}
inline void SecurityStaticBasic::set_allocated_security(::Qot_Common::Security* security) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete security_;
  }
  if (security) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      security = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, security, submessage_arena);
    }
    set_has_security();
  } else {
    clear_has_security();
  }
  security_ = security;
  // @@protoc_insertion_point(field_set_allocated:Qot_Common.SecurityStaticBasic.security)
}

// required int64 id = 2;
inline bool SecurityStaticBasic::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SecurityStaticBasic::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SecurityStaticBasic::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SecurityStaticBasic::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 SecurityStaticBasic::id() const {
  // @@protoc_insertion_point(field_get:Qot_Common.SecurityStaticBasic.id)
  return id_;
}
inline void SecurityStaticBasic::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.SecurityStaticBasic.id)
}

// required int32 lotSize = 3;
inline bool SecurityStaticBasic::has_lotsize() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SecurityStaticBasic::set_has_lotsize() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SecurityStaticBasic::clear_has_lotsize() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SecurityStaticBasic::clear_lotsize() {
  lotsize_ = 0;
  clear_has_lotsize();
}
inline ::google::protobuf::int32 SecurityStaticBasic::lotsize() const {
  // @@protoc_insertion_point(field_get:Qot_Common.SecurityStaticBasic.lotSize)
  return lotsize_;
}
inline void SecurityStaticBasic::set_lotsize(::google::protobuf::int32 value) {
  set_has_lotsize();
  lotsize_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.SecurityStaticBasic.lotSize)
}

// required int32 secType = 4;
inline bool SecurityStaticBasic::has_sectype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SecurityStaticBasic::set_has_sectype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SecurityStaticBasic::clear_has_sectype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SecurityStaticBasic::clear_sectype() {
  sectype_ = 0;
  clear_has_sectype();
}
inline ::google::protobuf::int32 SecurityStaticBasic::sectype() const {
  // @@protoc_insertion_point(field_get:Qot_Common.SecurityStaticBasic.secType)
  return sectype_;
}
inline void SecurityStaticBasic::set_sectype(::google::protobuf::int32 value) {
  set_has_sectype();
  sectype_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.SecurityStaticBasic.secType)
}

// required string name = 5;
inline bool SecurityStaticBasic::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SecurityStaticBasic::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SecurityStaticBasic::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SecurityStaticBasic::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& SecurityStaticBasic::name() const {
  // @@protoc_insertion_point(field_get:Qot_Common.SecurityStaticBasic.name)
  return name_.GetNoArena();
}
inline void SecurityStaticBasic::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_Common.SecurityStaticBasic.name)
}
#if LANG_CXX11
inline void SecurityStaticBasic::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_Common.SecurityStaticBasic.name)
}
#endif
inline void SecurityStaticBasic::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_Common.SecurityStaticBasic.name)
}
inline void SecurityStaticBasic::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_Common.SecurityStaticBasic.name)
}
inline ::std::string* SecurityStaticBasic::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Qot_Common.SecurityStaticBasic.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SecurityStaticBasic::release_name() {
  // @@protoc_insertion_point(field_release:Qot_Common.SecurityStaticBasic.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SecurityStaticBasic::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Qot_Common.SecurityStaticBasic.name)
}

// required string listTime = 6;
inline bool SecurityStaticBasic::has_listtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SecurityStaticBasic::set_has_listtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SecurityStaticBasic::clear_has_listtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SecurityStaticBasic::clear_listtime() {
  listtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_listtime();
}
inline const ::std::string& SecurityStaticBasic::listtime() const {
  // @@protoc_insertion_point(field_get:Qot_Common.SecurityStaticBasic.listTime)
  return listtime_.GetNoArena();
}
inline void SecurityStaticBasic::set_listtime(const ::std::string& value) {
  set_has_listtime();
  listtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_Common.SecurityStaticBasic.listTime)
}
#if LANG_CXX11
inline void SecurityStaticBasic::set_listtime(::std::string&& value) {
  set_has_listtime();
  listtime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_Common.SecurityStaticBasic.listTime)
}
#endif
inline void SecurityStaticBasic::set_listtime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_listtime();
  listtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_Common.SecurityStaticBasic.listTime)
}
inline void SecurityStaticBasic::set_listtime(const char* value, size_t size) {
  set_has_listtime();
  listtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_Common.SecurityStaticBasic.listTime)
}
inline ::std::string* SecurityStaticBasic::mutable_listtime() {
  set_has_listtime();
  // @@protoc_insertion_point(field_mutable:Qot_Common.SecurityStaticBasic.listTime)
  return listtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SecurityStaticBasic::release_listtime() {
  // @@protoc_insertion_point(field_release:Qot_Common.SecurityStaticBasic.listTime)
  clear_has_listtime();
  return listtime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SecurityStaticBasic::set_allocated_listtime(::std::string* listtime) {
  if (listtime != NULL) {
    set_has_listtime();
  } else {
    clear_has_listtime();
  }
  listtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), listtime);
  // @@protoc_insertion_point(field_set_allocated:Qot_Common.SecurityStaticBasic.listTime)
}

// optional bool delisting = 7;
inline bool SecurityStaticBasic::has_delisting() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SecurityStaticBasic::set_has_delisting() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SecurityStaticBasic::clear_has_delisting() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SecurityStaticBasic::clear_delisting() {
  delisting_ = false;
  clear_has_delisting();
}
inline bool SecurityStaticBasic::delisting() const {
  // @@protoc_insertion_point(field_get:Qot_Common.SecurityStaticBasic.delisting)
  return delisting_;
}
inline void SecurityStaticBasic::set_delisting(bool value) {
  set_has_delisting();
  delisting_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.SecurityStaticBasic.delisting)
}

// optional double listTimestamp = 8;
inline bool SecurityStaticBasic::has_listtimestamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SecurityStaticBasic::set_has_listtimestamp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SecurityStaticBasic::clear_has_listtimestamp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SecurityStaticBasic::clear_listtimestamp() {
  listtimestamp_ = 0;
  clear_has_listtimestamp();
}
inline double SecurityStaticBasic::listtimestamp() const {
  // @@protoc_insertion_point(field_get:Qot_Common.SecurityStaticBasic.listTimestamp)
  return listtimestamp_;
}
inline void SecurityStaticBasic::set_listtimestamp(double value) {
  set_has_listtimestamp();
  listtimestamp_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.SecurityStaticBasic.listTimestamp)
}

// -------------------------------------------------------------------

// WarrantStaticExData

// required int32 type = 1;
inline bool WarrantStaticExData::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WarrantStaticExData::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WarrantStaticExData::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WarrantStaticExData::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 WarrantStaticExData::type() const {
  // @@protoc_insertion_point(field_get:Qot_Common.WarrantStaticExData.type)
  return type_;
}
inline void WarrantStaticExData::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.WarrantStaticExData.type)
}

// required .Qot_Common.Security owner = 2;
inline bool WarrantStaticExData::has_owner() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WarrantStaticExData::set_has_owner() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WarrantStaticExData::clear_has_owner() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WarrantStaticExData::clear_owner() {
  if (owner_ != NULL) owner_->Clear();
  clear_has_owner();
}
inline const ::Qot_Common::Security& WarrantStaticExData::owner() const {
  const ::Qot_Common::Security* p = owner_;
  // @@protoc_insertion_point(field_get:Qot_Common.WarrantStaticExData.owner)
  return p != NULL ? *p : *reinterpret_cast<const ::Qot_Common::Security*>(
      &::Qot_Common::_Security_default_instance_);
}
inline ::Qot_Common::Security* WarrantStaticExData::release_owner() {
  // @@protoc_insertion_point(field_release:Qot_Common.WarrantStaticExData.owner)
  clear_has_owner();
  ::Qot_Common::Security* temp = owner_;
  owner_ = NULL;
  return temp;
}
inline ::Qot_Common::Security* WarrantStaticExData::mutable_owner() {
  set_has_owner();
  if (owner_ == NULL) {
    owner_ = new ::Qot_Common::Security;
  }
  // @@protoc_insertion_point(field_mutable:Qot_Common.WarrantStaticExData.owner)
  return owner_;
}
inline void WarrantStaticExData::set_allocated_owner(::Qot_Common::Security* owner) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete owner_;
  }
  if (owner) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      owner = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, owner, submessage_arena);
    }
    set_has_owner();
  } else {
    clear_has_owner();
  }
  owner_ = owner;
  // @@protoc_insertion_point(field_set_allocated:Qot_Common.WarrantStaticExData.owner)
}

// -------------------------------------------------------------------

// OptionStaticExData

// required int32 type = 1;
inline bool OptionStaticExData::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OptionStaticExData::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OptionStaticExData::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OptionStaticExData::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 OptionStaticExData::type() const {
  // @@protoc_insertion_point(field_get:Qot_Common.OptionStaticExData.type)
  return type_;
}
inline void OptionStaticExData::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.OptionStaticExData.type)
}

// required .Qot_Common.Security owner = 2;
inline bool OptionStaticExData::has_owner() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OptionStaticExData::set_has_owner() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OptionStaticExData::clear_has_owner() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OptionStaticExData::clear_owner() {
  if (owner_ != NULL) owner_->Clear();
  clear_has_owner();
}
inline const ::Qot_Common::Security& OptionStaticExData::owner() const {
  const ::Qot_Common::Security* p = owner_;
  // @@protoc_insertion_point(field_get:Qot_Common.OptionStaticExData.owner)
  return p != NULL ? *p : *reinterpret_cast<const ::Qot_Common::Security*>(
      &::Qot_Common::_Security_default_instance_);
}
inline ::Qot_Common::Security* OptionStaticExData::release_owner() {
  // @@protoc_insertion_point(field_release:Qot_Common.OptionStaticExData.owner)
  clear_has_owner();
  ::Qot_Common::Security* temp = owner_;
  owner_ = NULL;
  return temp;
}
inline ::Qot_Common::Security* OptionStaticExData::mutable_owner() {
  set_has_owner();
  if (owner_ == NULL) {
    owner_ = new ::Qot_Common::Security;
  }
  // @@protoc_insertion_point(field_mutable:Qot_Common.OptionStaticExData.owner)
  return owner_;
}
inline void OptionStaticExData::set_allocated_owner(::Qot_Common::Security* owner) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete owner_;
  }
  if (owner) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      owner = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, owner, submessage_arena);
    }
    set_has_owner();
  } else {
    clear_has_owner();
  }
  owner_ = owner;
  // @@protoc_insertion_point(field_set_allocated:Qot_Common.OptionStaticExData.owner)
}

// required string strikeTime = 3;
inline bool OptionStaticExData::has_striketime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OptionStaticExData::set_has_striketime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OptionStaticExData::clear_has_striketime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OptionStaticExData::clear_striketime() {
  striketime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_striketime();
}
inline const ::std::string& OptionStaticExData::striketime() const {
  // @@protoc_insertion_point(field_get:Qot_Common.OptionStaticExData.strikeTime)
  return striketime_.GetNoArena();
}
inline void OptionStaticExData::set_striketime(const ::std::string& value) {
  set_has_striketime();
  striketime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_Common.OptionStaticExData.strikeTime)
}
#if LANG_CXX11
inline void OptionStaticExData::set_striketime(::std::string&& value) {
  set_has_striketime();
  striketime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_Common.OptionStaticExData.strikeTime)
}
#endif
inline void OptionStaticExData::set_striketime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_striketime();
  striketime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_Common.OptionStaticExData.strikeTime)
}
inline void OptionStaticExData::set_striketime(const char* value, size_t size) {
  set_has_striketime();
  striketime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_Common.OptionStaticExData.strikeTime)
}
inline ::std::string* OptionStaticExData::mutable_striketime() {
  set_has_striketime();
  // @@protoc_insertion_point(field_mutable:Qot_Common.OptionStaticExData.strikeTime)
  return striketime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionStaticExData::release_striketime() {
  // @@protoc_insertion_point(field_release:Qot_Common.OptionStaticExData.strikeTime)
  clear_has_striketime();
  return striketime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionStaticExData::set_allocated_striketime(::std::string* striketime) {
  if (striketime != NULL) {
    set_has_striketime();
  } else {
    clear_has_striketime();
  }
  striketime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), striketime);
  // @@protoc_insertion_point(field_set_allocated:Qot_Common.OptionStaticExData.strikeTime)
}

// required double strikePrice = 4;
inline bool OptionStaticExData::has_strikeprice() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OptionStaticExData::set_has_strikeprice() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OptionStaticExData::clear_has_strikeprice() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OptionStaticExData::clear_strikeprice() {
  strikeprice_ = 0;
  clear_has_strikeprice();
}
inline double OptionStaticExData::strikeprice() const {
  // @@protoc_insertion_point(field_get:Qot_Common.OptionStaticExData.strikePrice)
  return strikeprice_;
}
inline void OptionStaticExData::set_strikeprice(double value) {
  set_has_strikeprice();
  strikeprice_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.OptionStaticExData.strikePrice)
}

// required bool suspend = 5;
inline bool OptionStaticExData::has_suspend() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OptionStaticExData::set_has_suspend() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OptionStaticExData::clear_has_suspend() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OptionStaticExData::clear_suspend() {
  suspend_ = false;
  clear_has_suspend();
}
inline bool OptionStaticExData::suspend() const {
  // @@protoc_insertion_point(field_get:Qot_Common.OptionStaticExData.suspend)
  return suspend_;
}
inline void OptionStaticExData::set_suspend(bool value) {
  set_has_suspend();
  suspend_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.OptionStaticExData.suspend)
}

// required string market = 6;
inline bool OptionStaticExData::has_market() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OptionStaticExData::set_has_market() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OptionStaticExData::clear_has_market() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OptionStaticExData::clear_market() {
  market_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_market();
}
inline const ::std::string& OptionStaticExData::market() const {
  // @@protoc_insertion_point(field_get:Qot_Common.OptionStaticExData.market)
  return market_.GetNoArena();
}
inline void OptionStaticExData::set_market(const ::std::string& value) {
  set_has_market();
  market_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_Common.OptionStaticExData.market)
}
#if LANG_CXX11
inline void OptionStaticExData::set_market(::std::string&& value) {
  set_has_market();
  market_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_Common.OptionStaticExData.market)
}
#endif
inline void OptionStaticExData::set_market(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_market();
  market_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_Common.OptionStaticExData.market)
}
inline void OptionStaticExData::set_market(const char* value, size_t size) {
  set_has_market();
  market_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_Common.OptionStaticExData.market)
}
inline ::std::string* OptionStaticExData::mutable_market() {
  set_has_market();
  // @@protoc_insertion_point(field_mutable:Qot_Common.OptionStaticExData.market)
  return market_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionStaticExData::release_market() {
  // @@protoc_insertion_point(field_release:Qot_Common.OptionStaticExData.market)
  clear_has_market();
  return market_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionStaticExData::set_allocated_market(::std::string* market) {
  if (market != NULL) {
    set_has_market();
  } else {
    clear_has_market();
  }
  market_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), market);
  // @@protoc_insertion_point(field_set_allocated:Qot_Common.OptionStaticExData.market)
}

// optional double strikeTimestamp = 7;
inline bool OptionStaticExData::has_striketimestamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OptionStaticExData::set_has_striketimestamp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OptionStaticExData::clear_has_striketimestamp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OptionStaticExData::clear_striketimestamp() {
  striketimestamp_ = 0;
  clear_has_striketimestamp();
}
inline double OptionStaticExData::striketimestamp() const {
  // @@protoc_insertion_point(field_get:Qot_Common.OptionStaticExData.strikeTimestamp)
  return striketimestamp_;
}
inline void OptionStaticExData::set_striketimestamp(double value) {
  set_has_striketimestamp();
  striketimestamp_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.OptionStaticExData.strikeTimestamp)
}

// optional int32 indexOptionType = 8;
inline bool OptionStaticExData::has_indexoptiontype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OptionStaticExData::set_has_indexoptiontype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OptionStaticExData::clear_has_indexoptiontype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OptionStaticExData::clear_indexoptiontype() {
  indexoptiontype_ = 0;
  clear_has_indexoptiontype();
}
inline ::google::protobuf::int32 OptionStaticExData::indexoptiontype() const {
  // @@protoc_insertion_point(field_get:Qot_Common.OptionStaticExData.indexOptionType)
  return indexoptiontype_;
}
inline void OptionStaticExData::set_indexoptiontype(::google::protobuf::int32 value) {
  set_has_indexoptiontype();
  indexoptiontype_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.OptionStaticExData.indexOptionType)
}

// -------------------------------------------------------------------

// FutureStaticExData

// required string lastTradeTime = 1;
inline bool FutureStaticExData::has_lasttradetime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FutureStaticExData::set_has_lasttradetime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FutureStaticExData::clear_has_lasttradetime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FutureStaticExData::clear_lasttradetime() {
  lasttradetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lasttradetime();
}
inline const ::std::string& FutureStaticExData::lasttradetime() const {
  // @@protoc_insertion_point(field_get:Qot_Common.FutureStaticExData.lastTradeTime)
  return lasttradetime_.GetNoArena();
}
inline void FutureStaticExData::set_lasttradetime(const ::std::string& value) {
  set_has_lasttradetime();
  lasttradetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_Common.FutureStaticExData.lastTradeTime)
}
#if LANG_CXX11
inline void FutureStaticExData::set_lasttradetime(::std::string&& value) {
  set_has_lasttradetime();
  lasttradetime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_Common.FutureStaticExData.lastTradeTime)
}
#endif
inline void FutureStaticExData::set_lasttradetime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_lasttradetime();
  lasttradetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_Common.FutureStaticExData.lastTradeTime)
}
inline void FutureStaticExData::set_lasttradetime(const char* value, size_t size) {
  set_has_lasttradetime();
  lasttradetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_Common.FutureStaticExData.lastTradeTime)
}
inline ::std::string* FutureStaticExData::mutable_lasttradetime() {
  set_has_lasttradetime();
  // @@protoc_insertion_point(field_mutable:Qot_Common.FutureStaticExData.lastTradeTime)
  return lasttradetime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureStaticExData::release_lasttradetime() {
  // @@protoc_insertion_point(field_release:Qot_Common.FutureStaticExData.lastTradeTime)
  clear_has_lasttradetime();
  return lasttradetime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureStaticExData::set_allocated_lasttradetime(::std::string* lasttradetime) {
  if (lasttradetime != NULL) {
    set_has_lasttradetime();
  } else {
    clear_has_lasttradetime();
  }
  lasttradetime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lasttradetime);
  // @@protoc_insertion_point(field_set_allocated:Qot_Common.FutureStaticExData.lastTradeTime)
}

// optional double lastTradeTimestamp = 2;
inline bool FutureStaticExData::has_lasttradetimestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FutureStaticExData::set_has_lasttradetimestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FutureStaticExData::clear_has_lasttradetimestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FutureStaticExData::clear_lasttradetimestamp() {
  lasttradetimestamp_ = 0;
  clear_has_lasttradetimestamp();
}
inline double FutureStaticExData::lasttradetimestamp() const {
  // @@protoc_insertion_point(field_get:Qot_Common.FutureStaticExData.lastTradeTimestamp)
  return lasttradetimestamp_;
}
inline void FutureStaticExData::set_lasttradetimestamp(double value) {
  set_has_lasttradetimestamp();
  lasttradetimestamp_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.FutureStaticExData.lastTradeTimestamp)
}

// required bool isMainContract = 3;
inline bool FutureStaticExData::has_ismaincontract() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FutureStaticExData::set_has_ismaincontract() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FutureStaticExData::clear_has_ismaincontract() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FutureStaticExData::clear_ismaincontract() {
  ismaincontract_ = false;
  clear_has_ismaincontract();
}
inline bool FutureStaticExData::ismaincontract() const {
  // @@protoc_insertion_point(field_get:Qot_Common.FutureStaticExData.isMainContract)
  return ismaincontract_;
}
inline void FutureStaticExData::set_ismaincontract(bool value) {
  set_has_ismaincontract();
  ismaincontract_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.FutureStaticExData.isMainContract)
}

// -------------------------------------------------------------------

// SecurityStaticInfo

// required .Qot_Common.SecurityStaticBasic basic = 1;
inline bool SecurityStaticInfo::has_basic() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SecurityStaticInfo::set_has_basic() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SecurityStaticInfo::clear_has_basic() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SecurityStaticInfo::clear_basic() {
  if (basic_ != NULL) basic_->Clear();
  clear_has_basic();
}
inline const ::Qot_Common::SecurityStaticBasic& SecurityStaticInfo::basic() const {
  const ::Qot_Common::SecurityStaticBasic* p = basic_;
  // @@protoc_insertion_point(field_get:Qot_Common.SecurityStaticInfo.basic)
  return p != NULL ? *p : *reinterpret_cast<const ::Qot_Common::SecurityStaticBasic*>(
      &::Qot_Common::_SecurityStaticBasic_default_instance_);
}
inline ::Qot_Common::SecurityStaticBasic* SecurityStaticInfo::release_basic() {
  // @@protoc_insertion_point(field_release:Qot_Common.SecurityStaticInfo.basic)
  clear_has_basic();
  ::Qot_Common::SecurityStaticBasic* temp = basic_;
  basic_ = NULL;
  return temp;
}
inline ::Qot_Common::SecurityStaticBasic* SecurityStaticInfo::mutable_basic() {
  set_has_basic();
  if (basic_ == NULL) {
    basic_ = new ::Qot_Common::SecurityStaticBasic;
  }
  // @@protoc_insertion_point(field_mutable:Qot_Common.SecurityStaticInfo.basic)
  return basic_;
}
inline void SecurityStaticInfo::set_allocated_basic(::Qot_Common::SecurityStaticBasic* basic) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete basic_;
  }
  if (basic) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      basic = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, basic, submessage_arena);
    }
    set_has_basic();
  } else {
    clear_has_basic();
  }
  basic_ = basic;
  // @@protoc_insertion_point(field_set_allocated:Qot_Common.SecurityStaticInfo.basic)
}

// optional .Qot_Common.WarrantStaticExData warrantExData = 2;
inline bool SecurityStaticInfo::has_warrantexdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SecurityStaticInfo::set_has_warrantexdata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SecurityStaticInfo::clear_has_warrantexdata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SecurityStaticInfo::clear_warrantexdata() {
  if (warrantexdata_ != NULL) warrantexdata_->Clear();
  clear_has_warrantexdata();
}
inline const ::Qot_Common::WarrantStaticExData& SecurityStaticInfo::warrantexdata() const {
  const ::Qot_Common::WarrantStaticExData* p = warrantexdata_;
  // @@protoc_insertion_point(field_get:Qot_Common.SecurityStaticInfo.warrantExData)
  return p != NULL ? *p : *reinterpret_cast<const ::Qot_Common::WarrantStaticExData*>(
      &::Qot_Common::_WarrantStaticExData_default_instance_);
}
inline ::Qot_Common::WarrantStaticExData* SecurityStaticInfo::release_warrantexdata() {
  // @@protoc_insertion_point(field_release:Qot_Common.SecurityStaticInfo.warrantExData)
  clear_has_warrantexdata();
  ::Qot_Common::WarrantStaticExData* temp = warrantexdata_;
  warrantexdata_ = NULL;
  return temp;
}
inline ::Qot_Common::WarrantStaticExData* SecurityStaticInfo::mutable_warrantexdata() {
  set_has_warrantexdata();
  if (warrantexdata_ == NULL) {
    warrantexdata_ = new ::Qot_Common::WarrantStaticExData;
  }
  // @@protoc_insertion_point(field_mutable:Qot_Common.SecurityStaticInfo.warrantExData)
  return warrantexdata_;
}
inline void SecurityStaticInfo::set_allocated_warrantexdata(::Qot_Common::WarrantStaticExData* warrantexdata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete warrantexdata_;
  }
  if (warrantexdata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      warrantexdata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, warrantexdata, submessage_arena);
    }
    set_has_warrantexdata();
  } else {
    clear_has_warrantexdata();
  }
  warrantexdata_ = warrantexdata;
  // @@protoc_insertion_point(field_set_allocated:Qot_Common.SecurityStaticInfo.warrantExData)
}

// optional .Qot_Common.OptionStaticExData optionExData = 3;
inline bool SecurityStaticInfo::has_optionexdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SecurityStaticInfo::set_has_optionexdata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SecurityStaticInfo::clear_has_optionexdata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SecurityStaticInfo::clear_optionexdata() {
  if (optionexdata_ != NULL) optionexdata_->Clear();
  clear_has_optionexdata();
}
inline const ::Qot_Common::OptionStaticExData& SecurityStaticInfo::optionexdata() const {
  const ::Qot_Common::OptionStaticExData* p = optionexdata_;
  // @@protoc_insertion_point(field_get:Qot_Common.SecurityStaticInfo.optionExData)
  return p != NULL ? *p : *reinterpret_cast<const ::Qot_Common::OptionStaticExData*>(
      &::Qot_Common::_OptionStaticExData_default_instance_);
}
inline ::Qot_Common::OptionStaticExData* SecurityStaticInfo::release_optionexdata() {
  // @@protoc_insertion_point(field_release:Qot_Common.SecurityStaticInfo.optionExData)
  clear_has_optionexdata();
  ::Qot_Common::OptionStaticExData* temp = optionexdata_;
  optionexdata_ = NULL;
  return temp;
}
inline ::Qot_Common::OptionStaticExData* SecurityStaticInfo::mutable_optionexdata() {
  set_has_optionexdata();
  if (optionexdata_ == NULL) {
    optionexdata_ = new ::Qot_Common::OptionStaticExData;
  }
  // @@protoc_insertion_point(field_mutable:Qot_Common.SecurityStaticInfo.optionExData)
  return optionexdata_;
}
inline void SecurityStaticInfo::set_allocated_optionexdata(::Qot_Common::OptionStaticExData* optionexdata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete optionexdata_;
  }
  if (optionexdata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      optionexdata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, optionexdata, submessage_arena);
    }
    set_has_optionexdata();
  } else {
    clear_has_optionexdata();
  }
  optionexdata_ = optionexdata;
  // @@protoc_insertion_point(field_set_allocated:Qot_Common.SecurityStaticInfo.optionExData)
}

// optional .Qot_Common.FutureStaticExData futureExData = 4;
inline bool SecurityStaticInfo::has_futureexdata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SecurityStaticInfo::set_has_futureexdata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SecurityStaticInfo::clear_has_futureexdata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SecurityStaticInfo::clear_futureexdata() {
  if (futureexdata_ != NULL) futureexdata_->Clear();
  clear_has_futureexdata();
}
inline const ::Qot_Common::FutureStaticExData& SecurityStaticInfo::futureexdata() const {
  const ::Qot_Common::FutureStaticExData* p = futureexdata_;
  // @@protoc_insertion_point(field_get:Qot_Common.SecurityStaticInfo.futureExData)
  return p != NULL ? *p : *reinterpret_cast<const ::Qot_Common::FutureStaticExData*>(
      &::Qot_Common::_FutureStaticExData_default_instance_);
}
inline ::Qot_Common::FutureStaticExData* SecurityStaticInfo::release_futureexdata() {
  // @@protoc_insertion_point(field_release:Qot_Common.SecurityStaticInfo.futureExData)
  clear_has_futureexdata();
  ::Qot_Common::FutureStaticExData* temp = futureexdata_;
  futureexdata_ = NULL;
  return temp;
}
inline ::Qot_Common::FutureStaticExData* SecurityStaticInfo::mutable_futureexdata() {
  set_has_futureexdata();
  if (futureexdata_ == NULL) {
    futureexdata_ = new ::Qot_Common::FutureStaticExData;
  }
  // @@protoc_insertion_point(field_mutable:Qot_Common.SecurityStaticInfo.futureExData)
  return futureexdata_;
}
inline void SecurityStaticInfo::set_allocated_futureexdata(::Qot_Common::FutureStaticExData* futureexdata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete futureexdata_;
  }
  if (futureexdata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      futureexdata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, futureexdata, submessage_arena);
    }
    set_has_futureexdata();
  } else {
    clear_has_futureexdata();
  }
  futureexdata_ = futureexdata;
  // @@protoc_insertion_point(field_set_allocated:Qot_Common.SecurityStaticInfo.futureExData)
}

// -------------------------------------------------------------------

// Broker

// required int64 id = 1;
inline bool Broker::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Broker::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Broker::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Broker::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 Broker::id() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Broker.id)
  return id_;
}
inline void Broker::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.Broker.id)
}

// required string name = 2;
inline bool Broker::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Broker::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Broker::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Broker::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Broker::name() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Broker.name)
  return name_.GetNoArena();
}
inline void Broker::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_Common.Broker.name)
}
#if LANG_CXX11
inline void Broker::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_Common.Broker.name)
}
#endif
inline void Broker::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_Common.Broker.name)
}
inline void Broker::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_Common.Broker.name)
}
inline ::std::string* Broker::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Qot_Common.Broker.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Broker::release_name() {
  // @@protoc_insertion_point(field_release:Qot_Common.Broker.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Broker::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Qot_Common.Broker.name)
}

// required int32 pos = 3;
inline bool Broker::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Broker::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Broker::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Broker::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 Broker::pos() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Broker.pos)
  return pos_;
}
inline void Broker::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.Broker.pos)
}

// -------------------------------------------------------------------

// Ticker

// required string time = 1;
inline bool Ticker::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ticker::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ticker::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ticker::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_time();
}
inline const ::std::string& Ticker::time() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Ticker.time)
  return time_.GetNoArena();
}
inline void Ticker::set_time(const ::std::string& value) {
  set_has_time();
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_Common.Ticker.time)
}
#if LANG_CXX11
inline void Ticker::set_time(::std::string&& value) {
  set_has_time();
  time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_Common.Ticker.time)
}
#endif
inline void Ticker::set_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_time();
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_Common.Ticker.time)
}
inline void Ticker::set_time(const char* value, size_t size) {
  set_has_time();
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_Common.Ticker.time)
}
inline ::std::string* Ticker::mutable_time() {
  set_has_time();
  // @@protoc_insertion_point(field_mutable:Qot_Common.Ticker.time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Ticker::release_time() {
  // @@protoc_insertion_point(field_release:Qot_Common.Ticker.time)
  clear_has_time();
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Ticker::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    set_has_time();
  } else {
    clear_has_time();
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:Qot_Common.Ticker.time)
}

// required int64 sequence = 2;
inline bool Ticker::has_sequence() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ticker::set_has_sequence() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ticker::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ticker::clear_sequence() {
  sequence_ = GOOGLE_LONGLONG(0);
  clear_has_sequence();
}
inline ::google::protobuf::int64 Ticker::sequence() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Ticker.sequence)
  return sequence_;
}
inline void Ticker::set_sequence(::google::protobuf::int64 value) {
  set_has_sequence();
  sequence_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.Ticker.sequence)
}

// required int32 dir = 3;
inline bool Ticker::has_dir() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ticker::set_has_dir() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Ticker::clear_has_dir() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Ticker::clear_dir() {
  dir_ = 0;
  clear_has_dir();
}
inline ::google::protobuf::int32 Ticker::dir() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Ticker.dir)
  return dir_;
}
inline void Ticker::set_dir(::google::protobuf::int32 value) {
  set_has_dir();
  dir_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.Ticker.dir)
}

// required double price = 4;
inline bool Ticker::has_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ticker::set_has_price() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Ticker::clear_has_price() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Ticker::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline double Ticker::price() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Ticker.price)
  return price_;
}
inline void Ticker::set_price(double value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.Ticker.price)
}

// required int64 volume = 5;
inline bool Ticker::has_volume() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ticker::set_has_volume() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Ticker::clear_has_volume() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Ticker::clear_volume() {
  volume_ = GOOGLE_LONGLONG(0);
  clear_has_volume();
}
inline ::google::protobuf::int64 Ticker::volume() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Ticker.volume)
  return volume_;
}
inline void Ticker::set_volume(::google::protobuf::int64 value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.Ticker.volume)
}

// required double turnover = 6;
inline bool Ticker::has_turnover() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Ticker::set_has_turnover() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Ticker::clear_has_turnover() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Ticker::clear_turnover() {
  turnover_ = 0;
  clear_has_turnover();
}
inline double Ticker::turnover() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Ticker.turnover)
  return turnover_;
}
inline void Ticker::set_turnover(double value) {
  set_has_turnover();
  turnover_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.Ticker.turnover)
}

// optional double recvTime = 7;
inline bool Ticker::has_recvtime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Ticker::set_has_recvtime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Ticker::clear_has_recvtime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Ticker::clear_recvtime() {
  recvtime_ = 0;
  clear_has_recvtime();
}
inline double Ticker::recvtime() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Ticker.recvTime)
  return recvtime_;
}
inline void Ticker::set_recvtime(double value) {
  set_has_recvtime();
  recvtime_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.Ticker.recvTime)
}

// optional int32 type = 8;
inline bool Ticker::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ticker::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Ticker::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Ticker::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Ticker::type() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Ticker.type)
  return type_;
}
inline void Ticker::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.Ticker.type)
}

// optional int32 typeSign = 9;
inline bool Ticker::has_typesign() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Ticker::set_has_typesign() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Ticker::clear_has_typesign() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Ticker::clear_typesign() {
  typesign_ = 0;
  clear_has_typesign();
}
inline ::google::protobuf::int32 Ticker::typesign() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Ticker.typeSign)
  return typesign_;
}
inline void Ticker::set_typesign(::google::protobuf::int32 value) {
  set_has_typesign();
  typesign_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.Ticker.typeSign)
}

// optional int32 pushDataType = 10;
inline bool Ticker::has_pushdatatype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Ticker::set_has_pushdatatype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Ticker::clear_has_pushdatatype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Ticker::clear_pushdatatype() {
  pushdatatype_ = 0;
  clear_has_pushdatatype();
}
inline ::google::protobuf::int32 Ticker::pushdatatype() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Ticker.pushDataType)
  return pushdatatype_;
}
inline void Ticker::set_pushdatatype(::google::protobuf::int32 value) {
  set_has_pushdatatype();
  pushdatatype_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.Ticker.pushDataType)
}

// optional double timestamp = 11;
inline bool Ticker::has_timestamp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Ticker::set_has_timestamp() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Ticker::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Ticker::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline double Ticker::timestamp() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Ticker.timestamp)
  return timestamp_;
}
inline void Ticker::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.Ticker.timestamp)
}

// -------------------------------------------------------------------

// OrderBook

// required double price = 1;
inline bool OrderBook::has_price() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OrderBook::set_has_price() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OrderBook::clear_has_price() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OrderBook::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline double OrderBook::price() const {
  // @@protoc_insertion_point(field_get:Qot_Common.OrderBook.price)
  return price_;
}
inline void OrderBook::set_price(double value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.OrderBook.price)
}

// required int64 volume = 2;
inline bool OrderBook::has_volume() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OrderBook::set_has_volume() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OrderBook::clear_has_volume() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OrderBook::clear_volume() {
  volume_ = GOOGLE_LONGLONG(0);
  clear_has_volume();
}
inline ::google::protobuf::int64 OrderBook::volume() const {
  // @@protoc_insertion_point(field_get:Qot_Common.OrderBook.volume)
  return volume_;
}
inline void OrderBook::set_volume(::google::protobuf::int64 value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.OrderBook.volume)
}

// required int32 orederCount = 3;
inline bool OrderBook::has_oredercount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OrderBook::set_has_oredercount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OrderBook::clear_has_oredercount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OrderBook::clear_oredercount() {
  oredercount_ = 0;
  clear_has_oredercount();
}
inline ::google::protobuf::int32 OrderBook::oredercount() const {
  // @@protoc_insertion_point(field_get:Qot_Common.OrderBook.orederCount)
  return oredercount_;
}
inline void OrderBook::set_oredercount(::google::protobuf::int32 value) {
  set_has_oredercount();
  oredercount_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.OrderBook.orederCount)
}

// -------------------------------------------------------------------

// OrderDetail

// required int32 orderCount = 1;
inline bool OrderDetail::has_ordercount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OrderDetail::set_has_ordercount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OrderDetail::clear_has_ordercount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OrderDetail::clear_ordercount() {
  ordercount_ = 0;
  clear_has_ordercount();
}
inline ::google::protobuf::int32 OrderDetail::ordercount() const {
  // @@protoc_insertion_point(field_get:Qot_Common.OrderDetail.orderCount)
  return ordercount_;
}
inline void OrderDetail::set_ordercount(::google::protobuf::int32 value) {
  set_has_ordercount();
  ordercount_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.OrderDetail.orderCount)
}

// repeated double orderVol = 2;
inline int OrderDetail::ordervol_size() const {
  return ordervol_.size();
}
inline void OrderDetail::clear_ordervol() {
  ordervol_.Clear();
}
inline double OrderDetail::ordervol(int index) const {
  // @@protoc_insertion_point(field_get:Qot_Common.OrderDetail.orderVol)
  return ordervol_.Get(index);
}
inline void OrderDetail::set_ordervol(int index, double value) {
  ordervol_.Set(index, value);
  // @@protoc_insertion_point(field_set:Qot_Common.OrderDetail.orderVol)
}
inline void OrderDetail::add_ordervol(double value) {
  ordervol_.Add(value);
  // @@protoc_insertion_point(field_add:Qot_Common.OrderDetail.orderVol)
}
inline const ::google::protobuf::RepeatedField< double >&
OrderDetail::ordervol() const {
  // @@protoc_insertion_point(field_list:Qot_Common.OrderDetail.orderVol)
  return ordervol_;
}
inline ::google::protobuf::RepeatedField< double >*
OrderDetail::mutable_ordervol() {
  // @@protoc_insertion_point(field_mutable_list:Qot_Common.OrderDetail.orderVol)
  return &ordervol_;
}

// -------------------------------------------------------------------

// ShareHoldingChange

// required string holderName = 1;
inline bool ShareHoldingChange::has_holdername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShareHoldingChange::set_has_holdername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShareHoldingChange::clear_has_holdername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShareHoldingChange::clear_holdername() {
  holdername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_holdername();
}
inline const ::std::string& ShareHoldingChange::holdername() const {
  // @@protoc_insertion_point(field_get:Qot_Common.ShareHoldingChange.holderName)
  return holdername_.GetNoArena();
}
inline void ShareHoldingChange::set_holdername(const ::std::string& value) {
  set_has_holdername();
  holdername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_Common.ShareHoldingChange.holderName)
}
#if LANG_CXX11
inline void ShareHoldingChange::set_holdername(::std::string&& value) {
  set_has_holdername();
  holdername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_Common.ShareHoldingChange.holderName)
}
#endif
inline void ShareHoldingChange::set_holdername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_holdername();
  holdername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_Common.ShareHoldingChange.holderName)
}
inline void ShareHoldingChange::set_holdername(const char* value, size_t size) {
  set_has_holdername();
  holdername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_Common.ShareHoldingChange.holderName)
}
inline ::std::string* ShareHoldingChange::mutable_holdername() {
  set_has_holdername();
  // @@protoc_insertion_point(field_mutable:Qot_Common.ShareHoldingChange.holderName)
  return holdername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShareHoldingChange::release_holdername() {
  // @@protoc_insertion_point(field_release:Qot_Common.ShareHoldingChange.holderName)
  clear_has_holdername();
  return holdername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShareHoldingChange::set_allocated_holdername(::std::string* holdername) {
  if (holdername != NULL) {
    set_has_holdername();
  } else {
    clear_has_holdername();
  }
  holdername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), holdername);
  // @@protoc_insertion_point(field_set_allocated:Qot_Common.ShareHoldingChange.holderName)
}

// required double holdingQty = 2;
inline bool ShareHoldingChange::has_holdingqty() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ShareHoldingChange::set_has_holdingqty() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ShareHoldingChange::clear_has_holdingqty() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ShareHoldingChange::clear_holdingqty() {
  holdingqty_ = 0;
  clear_has_holdingqty();
}
inline double ShareHoldingChange::holdingqty() const {
  // @@protoc_insertion_point(field_get:Qot_Common.ShareHoldingChange.holdingQty)
  return holdingqty_;
}
inline void ShareHoldingChange::set_holdingqty(double value) {
  set_has_holdingqty();
  holdingqty_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.ShareHoldingChange.holdingQty)
}

// required double holdingRatio = 3;
inline bool ShareHoldingChange::has_holdingratio() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ShareHoldingChange::set_has_holdingratio() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ShareHoldingChange::clear_has_holdingratio() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ShareHoldingChange::clear_holdingratio() {
  holdingratio_ = 0;
  clear_has_holdingratio();
}
inline double ShareHoldingChange::holdingratio() const {
  // @@protoc_insertion_point(field_get:Qot_Common.ShareHoldingChange.holdingRatio)
  return holdingratio_;
}
inline void ShareHoldingChange::set_holdingratio(double value) {
  set_has_holdingratio();
  holdingratio_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.ShareHoldingChange.holdingRatio)
}

// required double changeQty = 4;
inline bool ShareHoldingChange::has_changeqty() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ShareHoldingChange::set_has_changeqty() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ShareHoldingChange::clear_has_changeqty() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ShareHoldingChange::clear_changeqty() {
  changeqty_ = 0;
  clear_has_changeqty();
}
inline double ShareHoldingChange::changeqty() const {
  // @@protoc_insertion_point(field_get:Qot_Common.ShareHoldingChange.changeQty)
  return changeqty_;
}
inline void ShareHoldingChange::set_changeqty(double value) {
  set_has_changeqty();
  changeqty_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.ShareHoldingChange.changeQty)
}

// required double changeRatio = 5;
inline bool ShareHoldingChange::has_changeratio() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ShareHoldingChange::set_has_changeratio() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ShareHoldingChange::clear_has_changeratio() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ShareHoldingChange::clear_changeratio() {
  changeratio_ = 0;
  clear_has_changeratio();
}
inline double ShareHoldingChange::changeratio() const {
  // @@protoc_insertion_point(field_get:Qot_Common.ShareHoldingChange.changeRatio)
  return changeratio_;
}
inline void ShareHoldingChange::set_changeratio(double value) {
  set_has_changeratio();
  changeratio_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.ShareHoldingChange.changeRatio)
}

// required string time = 6;
inline bool ShareHoldingChange::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShareHoldingChange::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShareHoldingChange::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShareHoldingChange::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_time();
}
inline const ::std::string& ShareHoldingChange::time() const {
  // @@protoc_insertion_point(field_get:Qot_Common.ShareHoldingChange.time)
  return time_.GetNoArena();
}
inline void ShareHoldingChange::set_time(const ::std::string& value) {
  set_has_time();
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_Common.ShareHoldingChange.time)
}
#if LANG_CXX11
inline void ShareHoldingChange::set_time(::std::string&& value) {
  set_has_time();
  time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_Common.ShareHoldingChange.time)
}
#endif
inline void ShareHoldingChange::set_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_time();
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_Common.ShareHoldingChange.time)
}
inline void ShareHoldingChange::set_time(const char* value, size_t size) {
  set_has_time();
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_Common.ShareHoldingChange.time)
}
inline ::std::string* ShareHoldingChange::mutable_time() {
  set_has_time();
  // @@protoc_insertion_point(field_mutable:Qot_Common.ShareHoldingChange.time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShareHoldingChange::release_time() {
  // @@protoc_insertion_point(field_release:Qot_Common.ShareHoldingChange.time)
  clear_has_time();
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShareHoldingChange::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    set_has_time();
  } else {
    clear_has_time();
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:Qot_Common.ShareHoldingChange.time)
}

// optional double timestamp = 7;
inline bool ShareHoldingChange::has_timestamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ShareHoldingChange::set_has_timestamp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ShareHoldingChange::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ShareHoldingChange::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline double ShareHoldingChange::timestamp() const {
  // @@protoc_insertion_point(field_get:Qot_Common.ShareHoldingChange.timestamp)
  return timestamp_;
}
inline void ShareHoldingChange::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.ShareHoldingChange.timestamp)
}

// -------------------------------------------------------------------

// SubInfo

// required int32 subType = 1;
inline bool SubInfo::has_subtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubInfo::set_has_subtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubInfo::clear_has_subtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubInfo::clear_subtype() {
  subtype_ = 0;
  clear_has_subtype();
}
inline ::google::protobuf::int32 SubInfo::subtype() const {
  // @@protoc_insertion_point(field_get:Qot_Common.SubInfo.subType)
  return subtype_;
}
inline void SubInfo::set_subtype(::google::protobuf::int32 value) {
  set_has_subtype();
  subtype_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.SubInfo.subType)
}

// repeated .Qot_Common.Security securityList = 2;
inline int SubInfo::securitylist_size() const {
  return securitylist_.size();
}
inline void SubInfo::clear_securitylist() {
  securitylist_.Clear();
}
inline const ::Qot_Common::Security& SubInfo::securitylist(int index) const {
  // @@protoc_insertion_point(field_get:Qot_Common.SubInfo.securityList)
  return securitylist_.Get(index);
}
inline ::Qot_Common::Security* SubInfo::mutable_securitylist(int index) {
  // @@protoc_insertion_point(field_mutable:Qot_Common.SubInfo.securityList)
  return securitylist_.Mutable(index);
}
inline ::Qot_Common::Security* SubInfo::add_securitylist() {
  // @@protoc_insertion_point(field_add:Qot_Common.SubInfo.securityList)
  return securitylist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Qot_Common::Security >*
SubInfo::mutable_securitylist() {
  // @@protoc_insertion_point(field_mutable_list:Qot_Common.SubInfo.securityList)
  return &securitylist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Qot_Common::Security >&
SubInfo::securitylist() const {
  // @@protoc_insertion_point(field_list:Qot_Common.SubInfo.securityList)
  return securitylist_;
}

// -------------------------------------------------------------------

// ConnSubInfo

// repeated .Qot_Common.SubInfo subInfoList = 1;
inline int ConnSubInfo::subinfolist_size() const {
  return subinfolist_.size();
}
inline void ConnSubInfo::clear_subinfolist() {
  subinfolist_.Clear();
}
inline const ::Qot_Common::SubInfo& ConnSubInfo::subinfolist(int index) const {
  // @@protoc_insertion_point(field_get:Qot_Common.ConnSubInfo.subInfoList)
  return subinfolist_.Get(index);
}
inline ::Qot_Common::SubInfo* ConnSubInfo::mutable_subinfolist(int index) {
  // @@protoc_insertion_point(field_mutable:Qot_Common.ConnSubInfo.subInfoList)
  return subinfolist_.Mutable(index);
}
inline ::Qot_Common::SubInfo* ConnSubInfo::add_subinfolist() {
  // @@protoc_insertion_point(field_add:Qot_Common.ConnSubInfo.subInfoList)
  return subinfolist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Qot_Common::SubInfo >*
ConnSubInfo::mutable_subinfolist() {
  // @@protoc_insertion_point(field_mutable_list:Qot_Common.ConnSubInfo.subInfoList)
  return &subinfolist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Qot_Common::SubInfo >&
ConnSubInfo::subinfolist() const {
  // @@protoc_insertion_point(field_list:Qot_Common.ConnSubInfo.subInfoList)
  return subinfolist_;
}

// required int32 usedQuota = 2;
inline bool ConnSubInfo::has_usedquota() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConnSubInfo::set_has_usedquota() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConnSubInfo::clear_has_usedquota() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConnSubInfo::clear_usedquota() {
  usedquota_ = 0;
  clear_has_usedquota();
}
inline ::google::protobuf::int32 ConnSubInfo::usedquota() const {
  // @@protoc_insertion_point(field_get:Qot_Common.ConnSubInfo.usedQuota)
  return usedquota_;
}
inline void ConnSubInfo::set_usedquota(::google::protobuf::int32 value) {
  set_has_usedquota();
  usedquota_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.ConnSubInfo.usedQuota)
}

// required bool isOwnConnData = 3;
inline bool ConnSubInfo::has_isownconndata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConnSubInfo::set_has_isownconndata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConnSubInfo::clear_has_isownconndata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConnSubInfo::clear_isownconndata() {
  isownconndata_ = false;
  clear_has_isownconndata();
}
inline bool ConnSubInfo::isownconndata() const {
  // @@protoc_insertion_point(field_get:Qot_Common.ConnSubInfo.isOwnConnData)
  return isownconndata_;
}
inline void ConnSubInfo::set_isownconndata(bool value) {
  set_has_isownconndata();
  isownconndata_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.ConnSubInfo.isOwnConnData)
}

// -------------------------------------------------------------------

// PlateInfo

// required .Qot_Common.Security plate = 1;
inline bool PlateInfo::has_plate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlateInfo::set_has_plate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlateInfo::clear_has_plate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlateInfo::clear_plate() {
  if (plate_ != NULL) plate_->Clear();
  clear_has_plate();
}
inline const ::Qot_Common::Security& PlateInfo::plate() const {
  const ::Qot_Common::Security* p = plate_;
  // @@protoc_insertion_point(field_get:Qot_Common.PlateInfo.plate)
  return p != NULL ? *p : *reinterpret_cast<const ::Qot_Common::Security*>(
      &::Qot_Common::_Security_default_instance_);
}
inline ::Qot_Common::Security* PlateInfo::release_plate() {
  // @@protoc_insertion_point(field_release:Qot_Common.PlateInfo.plate)
  clear_has_plate();
  ::Qot_Common::Security* temp = plate_;
  plate_ = NULL;
  return temp;
}
inline ::Qot_Common::Security* PlateInfo::mutable_plate() {
  set_has_plate();
  if (plate_ == NULL) {
    plate_ = new ::Qot_Common::Security;
  }
  // @@protoc_insertion_point(field_mutable:Qot_Common.PlateInfo.plate)
  return plate_;
}
inline void PlateInfo::set_allocated_plate(::Qot_Common::Security* plate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete plate_;
  }
  if (plate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      plate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, plate, submessage_arena);
    }
    set_has_plate();
  } else {
    clear_has_plate();
  }
  plate_ = plate;
  // @@protoc_insertion_point(field_set_allocated:Qot_Common.PlateInfo.plate)
}

// required string name = 2;
inline bool PlateInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlateInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlateInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlateInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& PlateInfo::name() const {
  // @@protoc_insertion_point(field_get:Qot_Common.PlateInfo.name)
  return name_.GetNoArena();
}
inline void PlateInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_Common.PlateInfo.name)
}
#if LANG_CXX11
inline void PlateInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_Common.PlateInfo.name)
}
#endif
inline void PlateInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_Common.PlateInfo.name)
}
inline void PlateInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_Common.PlateInfo.name)
}
inline ::std::string* PlateInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Qot_Common.PlateInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlateInfo::release_name() {
  // @@protoc_insertion_point(field_release:Qot_Common.PlateInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlateInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Qot_Common.PlateInfo.name)
}

// optional int32 plateType = 3;
inline bool PlateInfo::has_platetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlateInfo::set_has_platetype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlateInfo::clear_has_platetype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlateInfo::clear_platetype() {
  platetype_ = 0;
  clear_has_platetype();
}
inline ::google::protobuf::int32 PlateInfo::platetype() const {
  // @@protoc_insertion_point(field_get:Qot_Common.PlateInfo.plateType)
  return platetype_;
}
inline void PlateInfo::set_platetype(::google::protobuf::int32 value) {
  set_has_platetype();
  platetype_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.PlateInfo.plateType)
}

// -------------------------------------------------------------------

// Rehab

// required string time = 1;
inline bool Rehab::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Rehab::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Rehab::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Rehab::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_time();
}
inline const ::std::string& Rehab::time() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Rehab.time)
  return time_.GetNoArena();
}
inline void Rehab::set_time(const ::std::string& value) {
  set_has_time();
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_Common.Rehab.time)
}
#if LANG_CXX11
inline void Rehab::set_time(::std::string&& value) {
  set_has_time();
  time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_Common.Rehab.time)
}
#endif
inline void Rehab::set_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_time();
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_Common.Rehab.time)
}
inline void Rehab::set_time(const char* value, size_t size) {
  set_has_time();
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_Common.Rehab.time)
}
inline ::std::string* Rehab::mutable_time() {
  set_has_time();
  // @@protoc_insertion_point(field_mutable:Qot_Common.Rehab.time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Rehab::release_time() {
  // @@protoc_insertion_point(field_release:Qot_Common.Rehab.time)
  clear_has_time();
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Rehab::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    set_has_time();
  } else {
    clear_has_time();
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:Qot_Common.Rehab.time)
}

// required int64 companyActFlag = 2;
inline bool Rehab::has_companyactflag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Rehab::set_has_companyactflag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Rehab::clear_has_companyactflag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Rehab::clear_companyactflag() {
  companyactflag_ = GOOGLE_LONGLONG(0);
  clear_has_companyactflag();
}
inline ::google::protobuf::int64 Rehab::companyactflag() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Rehab.companyActFlag)
  return companyactflag_;
}
inline void Rehab::set_companyactflag(::google::protobuf::int64 value) {
  set_has_companyactflag();
  companyactflag_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.Rehab.companyActFlag)
}

// required double fwdFactorA = 3;
inline bool Rehab::has_fwdfactora() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Rehab::set_has_fwdfactora() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Rehab::clear_has_fwdfactora() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Rehab::clear_fwdfactora() {
  fwdfactora_ = 0;
  clear_has_fwdfactora();
}
inline double Rehab::fwdfactora() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Rehab.fwdFactorA)
  return fwdfactora_;
}
inline void Rehab::set_fwdfactora(double value) {
  set_has_fwdfactora();
  fwdfactora_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.Rehab.fwdFactorA)
}

// required double fwdFactorB = 4;
inline bool Rehab::has_fwdfactorb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Rehab::set_has_fwdfactorb() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Rehab::clear_has_fwdfactorb() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Rehab::clear_fwdfactorb() {
  fwdfactorb_ = 0;
  clear_has_fwdfactorb();
}
inline double Rehab::fwdfactorb() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Rehab.fwdFactorB)
  return fwdfactorb_;
}
inline void Rehab::set_fwdfactorb(double value) {
  set_has_fwdfactorb();
  fwdfactorb_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.Rehab.fwdFactorB)
}

// required double bwdFactorA = 5;
inline bool Rehab::has_bwdfactora() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Rehab::set_has_bwdfactora() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Rehab::clear_has_bwdfactora() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Rehab::clear_bwdfactora() {
  bwdfactora_ = 0;
  clear_has_bwdfactora();
}
inline double Rehab::bwdfactora() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Rehab.bwdFactorA)
  return bwdfactora_;
}
inline void Rehab::set_bwdfactora(double value) {
  set_has_bwdfactora();
  bwdfactora_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.Rehab.bwdFactorA)
}

// required double bwdFactorB = 6;
inline bool Rehab::has_bwdfactorb() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Rehab::set_has_bwdfactorb() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Rehab::clear_has_bwdfactorb() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Rehab::clear_bwdfactorb() {
  bwdfactorb_ = 0;
  clear_has_bwdfactorb();
}
inline double Rehab::bwdfactorb() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Rehab.bwdFactorB)
  return bwdfactorb_;
}
inline void Rehab::set_bwdfactorb(double value) {
  set_has_bwdfactorb();
  bwdfactorb_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.Rehab.bwdFactorB)
}

// optional int32 splitBase = 7;
inline bool Rehab::has_splitbase() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Rehab::set_has_splitbase() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Rehab::clear_has_splitbase() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Rehab::clear_splitbase() {
  splitbase_ = 0;
  clear_has_splitbase();
}
inline ::google::protobuf::int32 Rehab::splitbase() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Rehab.splitBase)
  return splitbase_;
}
inline void Rehab::set_splitbase(::google::protobuf::int32 value) {
  set_has_splitbase();
  splitbase_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.Rehab.splitBase)
}

// optional int32 splitErt = 8;
inline bool Rehab::has_splitert() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Rehab::set_has_splitert() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Rehab::clear_has_splitert() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Rehab::clear_splitert() {
  splitert_ = 0;
  clear_has_splitert();
}
inline ::google::protobuf::int32 Rehab::splitert() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Rehab.splitErt)
  return splitert_;
}
inline void Rehab::set_splitert(::google::protobuf::int32 value) {
  set_has_splitert();
  splitert_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.Rehab.splitErt)
}

// optional int32 joinBase = 9;
inline bool Rehab::has_joinbase() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Rehab::set_has_joinbase() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Rehab::clear_has_joinbase() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Rehab::clear_joinbase() {
  joinbase_ = 0;
  clear_has_joinbase();
}
inline ::google::protobuf::int32 Rehab::joinbase() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Rehab.joinBase)
  return joinbase_;
}
inline void Rehab::set_joinbase(::google::protobuf::int32 value) {
  set_has_joinbase();
  joinbase_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.Rehab.joinBase)
}

// optional int32 joinErt = 10;
inline bool Rehab::has_joinert() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Rehab::set_has_joinert() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Rehab::clear_has_joinert() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Rehab::clear_joinert() {
  joinert_ = 0;
  clear_has_joinert();
}
inline ::google::protobuf::int32 Rehab::joinert() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Rehab.joinErt)
  return joinert_;
}
inline void Rehab::set_joinert(::google::protobuf::int32 value) {
  set_has_joinert();
  joinert_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.Rehab.joinErt)
}

// optional int32 bonusBase = 11;
inline bool Rehab::has_bonusbase() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Rehab::set_has_bonusbase() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Rehab::clear_has_bonusbase() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Rehab::clear_bonusbase() {
  bonusbase_ = 0;
  clear_has_bonusbase();
}
inline ::google::protobuf::int32 Rehab::bonusbase() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Rehab.bonusBase)
  return bonusbase_;
}
inline void Rehab::set_bonusbase(::google::protobuf::int32 value) {
  set_has_bonusbase();
  bonusbase_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.Rehab.bonusBase)
}

// optional int32 bonusErt = 12;
inline bool Rehab::has_bonusert() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Rehab::set_has_bonusert() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Rehab::clear_has_bonusert() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Rehab::clear_bonusert() {
  bonusert_ = 0;
  clear_has_bonusert();
}
inline ::google::protobuf::int32 Rehab::bonusert() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Rehab.bonusErt)
  return bonusert_;
}
inline void Rehab::set_bonusert(::google::protobuf::int32 value) {
  set_has_bonusert();
  bonusert_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.Rehab.bonusErt)
}

// optional int32 transferBase = 13;
inline bool Rehab::has_transferbase() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Rehab::set_has_transferbase() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Rehab::clear_has_transferbase() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Rehab::clear_transferbase() {
  transferbase_ = 0;
  clear_has_transferbase();
}
inline ::google::protobuf::int32 Rehab::transferbase() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Rehab.transferBase)
  return transferbase_;
}
inline void Rehab::set_transferbase(::google::protobuf::int32 value) {
  set_has_transferbase();
  transferbase_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.Rehab.transferBase)
}

// optional int32 transferErt = 14;
inline bool Rehab::has_transferert() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Rehab::set_has_transferert() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Rehab::clear_has_transferert() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Rehab::clear_transferert() {
  transferert_ = 0;
  clear_has_transferert();
}
inline ::google::protobuf::int32 Rehab::transferert() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Rehab.transferErt)
  return transferert_;
}
inline void Rehab::set_transferert(::google::protobuf::int32 value) {
  set_has_transferert();
  transferert_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.Rehab.transferErt)
}

// optional int32 allotBase = 15;
inline bool Rehab::has_allotbase() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Rehab::set_has_allotbase() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Rehab::clear_has_allotbase() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Rehab::clear_allotbase() {
  allotbase_ = 0;
  clear_has_allotbase();
}
inline ::google::protobuf::int32 Rehab::allotbase() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Rehab.allotBase)
  return allotbase_;
}
inline void Rehab::set_allotbase(::google::protobuf::int32 value) {
  set_has_allotbase();
  allotbase_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.Rehab.allotBase)
}

// optional int32 allotErt = 16;
inline bool Rehab::has_allotert() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Rehab::set_has_allotert() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Rehab::clear_has_allotert() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Rehab::clear_allotert() {
  allotert_ = 0;
  clear_has_allotert();
}
inline ::google::protobuf::int32 Rehab::allotert() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Rehab.allotErt)
  return allotert_;
}
inline void Rehab::set_allotert(::google::protobuf::int32 value) {
  set_has_allotert();
  allotert_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.Rehab.allotErt)
}

// optional double allotPrice = 17;
inline bool Rehab::has_allotprice() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Rehab::set_has_allotprice() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Rehab::clear_has_allotprice() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Rehab::clear_allotprice() {
  allotprice_ = 0;
  clear_has_allotprice();
}
inline double Rehab::allotprice() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Rehab.allotPrice)
  return allotprice_;
}
inline void Rehab::set_allotprice(double value) {
  set_has_allotprice();
  allotprice_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.Rehab.allotPrice)
}

// optional int32 addBase = 18;
inline bool Rehab::has_addbase() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Rehab::set_has_addbase() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Rehab::clear_has_addbase() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Rehab::clear_addbase() {
  addbase_ = 0;
  clear_has_addbase();
}
inline ::google::protobuf::int32 Rehab::addbase() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Rehab.addBase)
  return addbase_;
}
inline void Rehab::set_addbase(::google::protobuf::int32 value) {
  set_has_addbase();
  addbase_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.Rehab.addBase)
}

// optional int32 addErt = 19;
inline bool Rehab::has_addert() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Rehab::set_has_addert() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Rehab::clear_has_addert() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Rehab::clear_addert() {
  addert_ = 0;
  clear_has_addert();
}
inline ::google::protobuf::int32 Rehab::addert() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Rehab.addErt)
  return addert_;
}
inline void Rehab::set_addert(::google::protobuf::int32 value) {
  set_has_addert();
  addert_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.Rehab.addErt)
}

// optional double addPrice = 20;
inline bool Rehab::has_addprice() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Rehab::set_has_addprice() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Rehab::clear_has_addprice() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Rehab::clear_addprice() {
  addprice_ = 0;
  clear_has_addprice();
}
inline double Rehab::addprice() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Rehab.addPrice)
  return addprice_;
}
inline void Rehab::set_addprice(double value) {
  set_has_addprice();
  addprice_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.Rehab.addPrice)
}

// optional double dividend = 21;
inline bool Rehab::has_dividend() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Rehab::set_has_dividend() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Rehab::clear_has_dividend() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Rehab::clear_dividend() {
  dividend_ = 0;
  clear_has_dividend();
}
inline double Rehab::dividend() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Rehab.dividend)
  return dividend_;
}
inline void Rehab::set_dividend(double value) {
  set_has_dividend();
  dividend_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.Rehab.dividend)
}

// optional double spDividend = 22;
inline bool Rehab::has_spdividend() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Rehab::set_has_spdividend() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Rehab::clear_has_spdividend() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Rehab::clear_spdividend() {
  spdividend_ = 0;
  clear_has_spdividend();
}
inline double Rehab::spdividend() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Rehab.spDividend)
  return spdividend_;
}
inline void Rehab::set_spdividend(double value) {
  set_has_spdividend();
  spdividend_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.Rehab.spDividend)
}

// optional double timestamp = 23;
inline bool Rehab::has_timestamp() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Rehab::set_has_timestamp() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Rehab::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Rehab::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline double Rehab::timestamp() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Rehab.timestamp)
  return timestamp_;
}
inline void Rehab::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.Rehab.timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Qot_Common

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Qot_Common::QotMarket> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Qot_Common::QotMarket>() {
  return ::Qot_Common::QotMarket_descriptor();
}
template <> struct is_proto_enum< ::Qot_Common::SecurityType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Qot_Common::SecurityType>() {
  return ::Qot_Common::SecurityType_descriptor();
}
template <> struct is_proto_enum< ::Qot_Common::PlateSetType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Qot_Common::PlateSetType>() {
  return ::Qot_Common::PlateSetType_descriptor();
}
template <> struct is_proto_enum< ::Qot_Common::WarrantType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Qot_Common::WarrantType>() {
  return ::Qot_Common::WarrantType_descriptor();
}
template <> struct is_proto_enum< ::Qot_Common::OptionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Qot_Common::OptionType>() {
  return ::Qot_Common::OptionType_descriptor();
}
template <> struct is_proto_enum< ::Qot_Common::IndexOptionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Qot_Common::IndexOptionType>() {
  return ::Qot_Common::IndexOptionType_descriptor();
}
template <> struct is_proto_enum< ::Qot_Common::OptionAreaType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Qot_Common::OptionAreaType>() {
  return ::Qot_Common::OptionAreaType_descriptor();
}
template <> struct is_proto_enum< ::Qot_Common::QotMarketState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Qot_Common::QotMarketState>() {
  return ::Qot_Common::QotMarketState_descriptor();
}
template <> struct is_proto_enum< ::Qot_Common::TradeDateType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Qot_Common::TradeDateType>() {
  return ::Qot_Common::TradeDateType_descriptor();
}
template <> struct is_proto_enum< ::Qot_Common::RehabType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Qot_Common::RehabType>() {
  return ::Qot_Common::RehabType_descriptor();
}
template <> struct is_proto_enum< ::Qot_Common::KLType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Qot_Common::KLType>() {
  return ::Qot_Common::KLType_descriptor();
}
template <> struct is_proto_enum< ::Qot_Common::KLFields> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Qot_Common::KLFields>() {
  return ::Qot_Common::KLFields_descriptor();
}
template <> struct is_proto_enum< ::Qot_Common::SubType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Qot_Common::SubType>() {
  return ::Qot_Common::SubType_descriptor();
}
template <> struct is_proto_enum< ::Qot_Common::TickerDirection> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Qot_Common::TickerDirection>() {
  return ::Qot_Common::TickerDirection_descriptor();
}
template <> struct is_proto_enum< ::Qot_Common::TickerType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Qot_Common::TickerType>() {
  return ::Qot_Common::TickerType_descriptor();
}
template <> struct is_proto_enum< ::Qot_Common::DarkStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Qot_Common::DarkStatus>() {
  return ::Qot_Common::DarkStatus_descriptor();
}
template <> struct is_proto_enum< ::Qot_Common::SecurityStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Qot_Common::SecurityStatus>() {
  return ::Qot_Common::SecurityStatus_descriptor();
}
template <> struct is_proto_enum< ::Qot_Common::HolderCategory> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Qot_Common::HolderCategory>() {
  return ::Qot_Common::HolderCategory_descriptor();
}
template <> struct is_proto_enum< ::Qot_Common::PushDataType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Qot_Common::PushDataType>() {
  return ::Qot_Common::PushDataType_descriptor();
}
template <> struct is_proto_enum< ::Qot_Common::SortField> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Qot_Common::SortField>() {
  return ::Qot_Common::SortField_descriptor();
}
template <> struct is_proto_enum< ::Qot_Common::Issuer> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Qot_Common::Issuer>() {
  return ::Qot_Common::Issuer_descriptor();
}
template <> struct is_proto_enum< ::Qot_Common::IpoPeriod> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Qot_Common::IpoPeriod>() {
  return ::Qot_Common::IpoPeriod_descriptor();
}
template <> struct is_proto_enum< ::Qot_Common::PriceType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Qot_Common::PriceType>() {
  return ::Qot_Common::PriceType_descriptor();
}
template <> struct is_proto_enum< ::Qot_Common::WarrantStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Qot_Common::WarrantStatus>() {
  return ::Qot_Common::WarrantStatus_descriptor();
}
template <> struct is_proto_enum< ::Qot_Common::CompanyAct> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Qot_Common::CompanyAct>() {
  return ::Qot_Common::CompanyAct_descriptor();
}
template <> struct is_proto_enum< ::Qot_Common::QotRight> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Qot_Common::QotRight>() {
  return ::Qot_Common::QotRight_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Qot_5fCommon_2eproto__INCLUDED
