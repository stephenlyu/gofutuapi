// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Qot_GetIpoList.proto

#ifndef PROTOBUF_Qot_5fGetIpoList_2eproto__INCLUDED
#define PROTOBUF_Qot_5fGetIpoList_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Common.pb.h"
#include "Qot_Common.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_Qot_5fGetIpoList_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[10];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsBasicIpoDataImpl();
void InitDefaultsBasicIpoData();
void InitDefaultsCNIpoExDataImpl();
void InitDefaultsCNIpoExData();
void InitDefaultsWinningNumDataImpl();
void InitDefaultsWinningNumData();
void InitDefaultsHKIpoExDataImpl();
void InitDefaultsHKIpoExData();
void InitDefaultsUSIpoExDataImpl();
void InitDefaultsUSIpoExData();
void InitDefaultsIpoDataImpl();
void InitDefaultsIpoData();
void InitDefaultsC2SImpl();
void InitDefaultsC2S();
void InitDefaultsS2CImpl();
void InitDefaultsS2C();
void InitDefaultsRequestImpl();
void InitDefaultsRequest();
void InitDefaultsResponseImpl();
void InitDefaultsResponse();
inline void InitDefaults() {
  InitDefaultsBasicIpoData();
  InitDefaultsCNIpoExData();
  InitDefaultsWinningNumData();
  InitDefaultsHKIpoExData();
  InitDefaultsUSIpoExData();
  InitDefaultsIpoData();
  InitDefaultsC2S();
  InitDefaultsS2C();
  InitDefaultsRequest();
  InitDefaultsResponse();
}
}  // namespace protobuf_Qot_5fGetIpoList_2eproto
namespace Qot_GetIpoList {
class BasicIpoData;
class BasicIpoDataDefaultTypeInternal;
extern BasicIpoDataDefaultTypeInternal _BasicIpoData_default_instance_;
class C2S;
class C2SDefaultTypeInternal;
extern C2SDefaultTypeInternal _C2S_default_instance_;
class CNIpoExData;
class CNIpoExDataDefaultTypeInternal;
extern CNIpoExDataDefaultTypeInternal _CNIpoExData_default_instance_;
class HKIpoExData;
class HKIpoExDataDefaultTypeInternal;
extern HKIpoExDataDefaultTypeInternal _HKIpoExData_default_instance_;
class IpoData;
class IpoDataDefaultTypeInternal;
extern IpoDataDefaultTypeInternal _IpoData_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class S2C;
class S2CDefaultTypeInternal;
extern S2CDefaultTypeInternal _S2C_default_instance_;
class USIpoExData;
class USIpoExDataDefaultTypeInternal;
extern USIpoExDataDefaultTypeInternal _USIpoExData_default_instance_;
class WinningNumData;
class WinningNumDataDefaultTypeInternal;
extern WinningNumDataDefaultTypeInternal _WinningNumData_default_instance_;
}  // namespace Qot_GetIpoList
namespace Qot_GetIpoList {

// ===================================================================

class BasicIpoData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_GetIpoList.BasicIpoData) */ {
 public:
  BasicIpoData();
  virtual ~BasicIpoData();

  BasicIpoData(const BasicIpoData& from);

  inline BasicIpoData& operator=(const BasicIpoData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BasicIpoData(BasicIpoData&& from) noexcept
    : BasicIpoData() {
    *this = ::std::move(from);
  }

  inline BasicIpoData& operator=(BasicIpoData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BasicIpoData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BasicIpoData* internal_default_instance() {
    return reinterpret_cast<const BasicIpoData*>(
               &_BasicIpoData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(BasicIpoData* other);
  friend void swap(BasicIpoData& a, BasicIpoData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BasicIpoData* New() const PROTOBUF_FINAL { return New(NULL); }

  BasicIpoData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BasicIpoData& from);
  void MergeFrom(const BasicIpoData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BasicIpoData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string listTime = 3;
  bool has_listtime() const;
  void clear_listtime();
  static const int kListTimeFieldNumber = 3;
  const ::std::string& listtime() const;
  void set_listtime(const ::std::string& value);
  #if LANG_CXX11
  void set_listtime(::std::string&& value);
  #endif
  void set_listtime(const char* value);
  void set_listtime(const char* value, size_t size);
  ::std::string* mutable_listtime();
  ::std::string* release_listtime();
  void set_allocated_listtime(::std::string* listtime);

  // required .Qot_Common.Security security = 1;
  bool has_security() const;
  void clear_security();
  static const int kSecurityFieldNumber = 1;
  const ::Qot_Common::Security& security() const;
  ::Qot_Common::Security* release_security();
  ::Qot_Common::Security* mutable_security();
  void set_allocated_security(::Qot_Common::Security* security);

  // optional double listTimestamp = 4;
  bool has_listtimestamp() const;
  void clear_listtimestamp();
  static const int kListTimestampFieldNumber = 4;
  double listtimestamp() const;
  void set_listtimestamp(double value);

  // @@protoc_insertion_point(class_scope:Qot_GetIpoList.BasicIpoData)
 private:
  void set_has_security();
  void clear_has_security();
  void set_has_name();
  void clear_has_name();
  void set_has_listtime();
  void clear_has_listtime();
  void set_has_listtimestamp();
  void clear_has_listtimestamp();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr listtime_;
  ::Qot_Common::Security* security_;
  double listtimestamp_;
  friend struct ::protobuf_Qot_5fGetIpoList_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fGetIpoList_2eproto::InitDefaultsBasicIpoDataImpl();
};
// -------------------------------------------------------------------

class CNIpoExData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_GetIpoList.CNIpoExData) */ {
 public:
  CNIpoExData();
  virtual ~CNIpoExData();

  CNIpoExData(const CNIpoExData& from);

  inline CNIpoExData& operator=(const CNIpoExData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CNIpoExData(CNIpoExData&& from) noexcept
    : CNIpoExData() {
    *this = ::std::move(from);
  }

  inline CNIpoExData& operator=(CNIpoExData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CNIpoExData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CNIpoExData* internal_default_instance() {
    return reinterpret_cast<const CNIpoExData*>(
               &_CNIpoExData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CNIpoExData* other);
  friend void swap(CNIpoExData& a, CNIpoExData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CNIpoExData* New() const PROTOBUF_FINAL { return New(NULL); }

  CNIpoExData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CNIpoExData& from);
  void MergeFrom(const CNIpoExData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CNIpoExData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Qot_GetIpoList.WinningNumData winningNumData = 17;
  int winningnumdata_size() const;
  void clear_winningnumdata();
  static const int kWinningNumDataFieldNumber = 17;
  const ::Qot_GetIpoList::WinningNumData& winningnumdata(int index) const;
  ::Qot_GetIpoList::WinningNumData* mutable_winningnumdata(int index);
  ::Qot_GetIpoList::WinningNumData* add_winningnumdata();
  ::google::protobuf::RepeatedPtrField< ::Qot_GetIpoList::WinningNumData >*
      mutable_winningnumdata();
  const ::google::protobuf::RepeatedPtrField< ::Qot_GetIpoList::WinningNumData >&
      winningnumdata() const;

  // required string applyCode = 1;
  bool has_applycode() const;
  void clear_applycode();
  static const int kApplyCodeFieldNumber = 1;
  const ::std::string& applycode() const;
  void set_applycode(const ::std::string& value);
  #if LANG_CXX11
  void set_applycode(::std::string&& value);
  #endif
  void set_applycode(const char* value);
  void set_applycode(const char* value, size_t size);
  ::std::string* mutable_applycode();
  ::std::string* release_applycode();
  void set_allocated_applycode(::std::string* applycode);

  // optional string applyTime = 12;
  bool has_applytime() const;
  void clear_applytime();
  static const int kApplyTimeFieldNumber = 12;
  const ::std::string& applytime() const;
  void set_applytime(const ::std::string& value);
  #if LANG_CXX11
  void set_applytime(::std::string&& value);
  #endif
  void set_applytime(const char* value);
  void set_applytime(const char* value, size_t size);
  ::std::string* mutable_applytime();
  ::std::string* release_applytime();
  void set_allocated_applytime(::std::string* applytime);

  // optional string winningTime = 14;
  bool has_winningtime() const;
  void clear_winningtime();
  static const int kWinningTimeFieldNumber = 14;
  const ::std::string& winningtime() const;
  void set_winningtime(const ::std::string& value);
  #if LANG_CXX11
  void set_winningtime(::std::string&& value);
  #endif
  void set_winningtime(const char* value);
  void set_winningtime(const char* value, size_t size);
  ::std::string* mutable_winningtime();
  ::std::string* release_winningtime();
  void set_allocated_winningtime(::std::string* winningtime);

  // required int64 issueSize = 2;
  bool has_issuesize() const;
  void clear_issuesize();
  static const int kIssueSizeFieldNumber = 2;
  ::google::protobuf::int64 issuesize() const;
  void set_issuesize(::google::protobuf::int64 value);

  // required int64 onlineIssueSize = 3;
  bool has_onlineissuesize() const;
  void clear_onlineissuesize();
  static const int kOnlineIssueSizeFieldNumber = 3;
  ::google::protobuf::int64 onlineissuesize() const;
  void set_onlineissuesize(::google::protobuf::int64 value);

  // required int64 applyUpperLimit = 4;
  bool has_applyupperlimit() const;
  void clear_applyupperlimit();
  static const int kApplyUpperLimitFieldNumber = 4;
  ::google::protobuf::int64 applyupperlimit() const;
  void set_applyupperlimit(::google::protobuf::int64 value);

  // required int64 applyLimitMarketValue = 5;
  bool has_applylimitmarketvalue() const;
  void clear_applylimitmarketvalue();
  static const int kApplyLimitMarketValueFieldNumber = 5;
  ::google::protobuf::int64 applylimitmarketvalue() const;
  void set_applylimitmarketvalue(::google::protobuf::int64 value);

  // required double ipoPrice = 7;
  bool has_ipoprice() const;
  void clear_ipoprice();
  static const int kIpoPriceFieldNumber = 7;
  double ipoprice() const;
  void set_ipoprice(double value);

  // required double industryPeRate = 8;
  bool has_industryperate() const;
  void clear_industryperate();
  static const int kIndustryPeRateFieldNumber = 8;
  double industryperate() const;
  void set_industryperate(double value);

  // required double winningRatio = 10;
  bool has_winningratio() const;
  void clear_winningratio();
  static const int kWinningRatioFieldNumber = 10;
  double winningratio() const;
  void set_winningratio(double value);

  // required double issuePeRate = 11;
  bool has_issueperate() const;
  void clear_issueperate();
  static const int kIssuePeRateFieldNumber = 11;
  double issueperate() const;
  void set_issueperate(double value);

  // optional double applyTimestamp = 13;
  bool has_applytimestamp() const;
  void clear_applytimestamp();
  static const int kApplyTimestampFieldNumber = 13;
  double applytimestamp() const;
  void set_applytimestamp(double value);

  // optional double winningTimestamp = 15;
  bool has_winningtimestamp() const;
  void clear_winningtimestamp();
  static const int kWinningTimestampFieldNumber = 15;
  double winningtimestamp() const;
  void set_winningtimestamp(double value);

  // required bool isEstimateIpoPrice = 6;
  bool has_isestimateipoprice() const;
  void clear_isestimateipoprice();
  static const int kIsEstimateIpoPriceFieldNumber = 6;
  bool isestimateipoprice() const;
  void set_isestimateipoprice(bool value);

  // required bool isEstimateWinningRatio = 9;
  bool has_isestimatewinningratio() const;
  void clear_isestimatewinningratio();
  static const int kIsEstimateWinningRatioFieldNumber = 9;
  bool isestimatewinningratio() const;
  void set_isestimatewinningratio(bool value);

  // required bool isHasWon = 16;
  bool has_ishaswon() const;
  void clear_ishaswon();
  static const int kIsHasWonFieldNumber = 16;
  bool ishaswon() const;
  void set_ishaswon(bool value);

  // @@protoc_insertion_point(class_scope:Qot_GetIpoList.CNIpoExData)
 private:
  void set_has_applycode();
  void clear_has_applycode();
  void set_has_issuesize();
  void clear_has_issuesize();
  void set_has_onlineissuesize();
  void clear_has_onlineissuesize();
  void set_has_applyupperlimit();
  void clear_has_applyupperlimit();
  void set_has_applylimitmarketvalue();
  void clear_has_applylimitmarketvalue();
  void set_has_isestimateipoprice();
  void clear_has_isestimateipoprice();
  void set_has_ipoprice();
  void clear_has_ipoprice();
  void set_has_industryperate();
  void clear_has_industryperate();
  void set_has_isestimatewinningratio();
  void clear_has_isestimatewinningratio();
  void set_has_winningratio();
  void clear_has_winningratio();
  void set_has_issueperate();
  void clear_has_issueperate();
  void set_has_applytime();
  void clear_has_applytime();
  void set_has_applytimestamp();
  void clear_has_applytimestamp();
  void set_has_winningtime();
  void clear_has_winningtime();
  void set_has_winningtimestamp();
  void clear_has_winningtimestamp();
  void set_has_ishaswon();
  void clear_has_ishaswon();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Qot_GetIpoList::WinningNumData > winningnumdata_;
  ::google::protobuf::internal::ArenaStringPtr applycode_;
  ::google::protobuf::internal::ArenaStringPtr applytime_;
  ::google::protobuf::internal::ArenaStringPtr winningtime_;
  ::google::protobuf::int64 issuesize_;
  ::google::protobuf::int64 onlineissuesize_;
  ::google::protobuf::int64 applyupperlimit_;
  ::google::protobuf::int64 applylimitmarketvalue_;
  double ipoprice_;
  double industryperate_;
  double winningratio_;
  double issueperate_;
  double applytimestamp_;
  double winningtimestamp_;
  bool isestimateipoprice_;
  bool isestimatewinningratio_;
  bool ishaswon_;
  friend struct ::protobuf_Qot_5fGetIpoList_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fGetIpoList_2eproto::InitDefaultsCNIpoExDataImpl();
};
// -------------------------------------------------------------------

class WinningNumData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_GetIpoList.WinningNumData) */ {
 public:
  WinningNumData();
  virtual ~WinningNumData();

  WinningNumData(const WinningNumData& from);

  inline WinningNumData& operator=(const WinningNumData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WinningNumData(WinningNumData&& from) noexcept
    : WinningNumData() {
    *this = ::std::move(from);
  }

  inline WinningNumData& operator=(WinningNumData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WinningNumData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WinningNumData* internal_default_instance() {
    return reinterpret_cast<const WinningNumData*>(
               &_WinningNumData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(WinningNumData* other);
  friend void swap(WinningNumData& a, WinningNumData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WinningNumData* New() const PROTOBUF_FINAL { return New(NULL); }

  WinningNumData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WinningNumData& from);
  void MergeFrom(const WinningNumData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WinningNumData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string winningName = 1;
  bool has_winningname() const;
  void clear_winningname();
  static const int kWinningNameFieldNumber = 1;
  const ::std::string& winningname() const;
  void set_winningname(const ::std::string& value);
  #if LANG_CXX11
  void set_winningname(::std::string&& value);
  #endif
  void set_winningname(const char* value);
  void set_winningname(const char* value, size_t size);
  ::std::string* mutable_winningname();
  ::std::string* release_winningname();
  void set_allocated_winningname(::std::string* winningname);

  // required string winningInfo = 2;
  bool has_winninginfo() const;
  void clear_winninginfo();
  static const int kWinningInfoFieldNumber = 2;
  const ::std::string& winninginfo() const;
  void set_winninginfo(const ::std::string& value);
  #if LANG_CXX11
  void set_winninginfo(::std::string&& value);
  #endif
  void set_winninginfo(const char* value);
  void set_winninginfo(const char* value, size_t size);
  ::std::string* mutable_winninginfo();
  ::std::string* release_winninginfo();
  void set_allocated_winninginfo(::std::string* winninginfo);

  // @@protoc_insertion_point(class_scope:Qot_GetIpoList.WinningNumData)
 private:
  void set_has_winningname();
  void clear_has_winningname();
  void set_has_winninginfo();
  void clear_has_winninginfo();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr winningname_;
  ::google::protobuf::internal::ArenaStringPtr winninginfo_;
  friend struct ::protobuf_Qot_5fGetIpoList_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fGetIpoList_2eproto::InitDefaultsWinningNumDataImpl();
};
// -------------------------------------------------------------------

class HKIpoExData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_GetIpoList.HKIpoExData) */ {
 public:
  HKIpoExData();
  virtual ~HKIpoExData();

  HKIpoExData(const HKIpoExData& from);

  inline HKIpoExData& operator=(const HKIpoExData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HKIpoExData(HKIpoExData&& from) noexcept
    : HKIpoExData() {
    *this = ::std::move(from);
  }

  inline HKIpoExData& operator=(HKIpoExData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HKIpoExData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HKIpoExData* internal_default_instance() {
    return reinterpret_cast<const HKIpoExData*>(
               &_HKIpoExData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(HKIpoExData* other);
  friend void swap(HKIpoExData& a, HKIpoExData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HKIpoExData* New() const PROTOBUF_FINAL { return New(NULL); }

  HKIpoExData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HKIpoExData& from);
  void MergeFrom(const HKIpoExData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HKIpoExData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string applyEndTime = 7;
  bool has_applyendtime() const;
  void clear_applyendtime();
  static const int kApplyEndTimeFieldNumber = 7;
  const ::std::string& applyendtime() const;
  void set_applyendtime(const ::std::string& value);
  #if LANG_CXX11
  void set_applyendtime(::std::string&& value);
  #endif
  void set_applyendtime(const char* value);
  void set_applyendtime(const char* value, size_t size);
  ::std::string* mutable_applyendtime();
  ::std::string* release_applyendtime();
  void set_allocated_applyendtime(::std::string* applyendtime);

  // required double ipoPriceMin = 1;
  bool has_ipopricemin() const;
  void clear_ipopricemin();
  static const int kIpoPriceMinFieldNumber = 1;
  double ipopricemin() const;
  void set_ipopricemin(double value);

  // required double ipoPriceMax = 2;
  bool has_ipopricemax() const;
  void clear_ipopricemax();
  static const int kIpoPriceMaxFieldNumber = 2;
  double ipopricemax() const;
  void set_ipopricemax(double value);

  // required double listPrice = 3;
  bool has_listprice() const;
  void clear_listprice();
  static const int kListPriceFieldNumber = 3;
  double listprice() const;
  void set_listprice(double value);

  // required double entrancePrice = 5;
  bool has_entranceprice() const;
  void clear_entranceprice();
  static const int kEntrancePriceFieldNumber = 5;
  double entranceprice() const;
  void set_entranceprice(double value);

  // required int32 lotSize = 4;
  bool has_lotsize() const;
  void clear_lotsize();
  static const int kLotSizeFieldNumber = 4;
  ::google::protobuf::int32 lotsize() const;
  void set_lotsize(::google::protobuf::int32 value);

  // required bool isSubscribeStatus = 6;
  bool has_issubscribestatus() const;
  void clear_issubscribestatus();
  static const int kIsSubscribeStatusFieldNumber = 6;
  bool issubscribestatus() const;
  void set_issubscribestatus(bool value);

  // optional double applyEndTimestamp = 8;
  bool has_applyendtimestamp() const;
  void clear_applyendtimestamp();
  static const int kApplyEndTimestampFieldNumber = 8;
  double applyendtimestamp() const;
  void set_applyendtimestamp(double value);

  // @@protoc_insertion_point(class_scope:Qot_GetIpoList.HKIpoExData)
 private:
  void set_has_ipopricemin();
  void clear_has_ipopricemin();
  void set_has_ipopricemax();
  void clear_has_ipopricemax();
  void set_has_listprice();
  void clear_has_listprice();
  void set_has_lotsize();
  void clear_has_lotsize();
  void set_has_entranceprice();
  void clear_has_entranceprice();
  void set_has_issubscribestatus();
  void clear_has_issubscribestatus();
  void set_has_applyendtime();
  void clear_has_applyendtime();
  void set_has_applyendtimestamp();
  void clear_has_applyendtimestamp();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr applyendtime_;
  double ipopricemin_;
  double ipopricemax_;
  double listprice_;
  double entranceprice_;
  ::google::protobuf::int32 lotsize_;
  bool issubscribestatus_;
  double applyendtimestamp_;
  friend struct ::protobuf_Qot_5fGetIpoList_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fGetIpoList_2eproto::InitDefaultsHKIpoExDataImpl();
};
// -------------------------------------------------------------------

class USIpoExData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_GetIpoList.USIpoExData) */ {
 public:
  USIpoExData();
  virtual ~USIpoExData();

  USIpoExData(const USIpoExData& from);

  inline USIpoExData& operator=(const USIpoExData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  USIpoExData(USIpoExData&& from) noexcept
    : USIpoExData() {
    *this = ::std::move(from);
  }

  inline USIpoExData& operator=(USIpoExData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const USIpoExData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIpoExData* internal_default_instance() {
    return reinterpret_cast<const USIpoExData*>(
               &_USIpoExData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(USIpoExData* other);
  friend void swap(USIpoExData& a, USIpoExData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline USIpoExData* New() const PROTOBUF_FINAL { return New(NULL); }

  USIpoExData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const USIpoExData& from);
  void MergeFrom(const USIpoExData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(USIpoExData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double ipoPriceMin = 1;
  bool has_ipopricemin() const;
  void clear_ipopricemin();
  static const int kIpoPriceMinFieldNumber = 1;
  double ipopricemin() const;
  void set_ipopricemin(double value);

  // required double ipoPriceMax = 2;
  bool has_ipopricemax() const;
  void clear_ipopricemax();
  static const int kIpoPriceMaxFieldNumber = 2;
  double ipopricemax() const;
  void set_ipopricemax(double value);

  // required int64 issueSize = 3;
  bool has_issuesize() const;
  void clear_issuesize();
  static const int kIssueSizeFieldNumber = 3;
  ::google::protobuf::int64 issuesize() const;
  void set_issuesize(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Qot_GetIpoList.USIpoExData)
 private:
  void set_has_ipopricemin();
  void clear_has_ipopricemin();
  void set_has_ipopricemax();
  void clear_has_ipopricemax();
  void set_has_issuesize();
  void clear_has_issuesize();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double ipopricemin_;
  double ipopricemax_;
  ::google::protobuf::int64 issuesize_;
  friend struct ::protobuf_Qot_5fGetIpoList_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fGetIpoList_2eproto::InitDefaultsUSIpoExDataImpl();
};
// -------------------------------------------------------------------

class IpoData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_GetIpoList.IpoData) */ {
 public:
  IpoData();
  virtual ~IpoData();

  IpoData(const IpoData& from);

  inline IpoData& operator=(const IpoData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IpoData(IpoData&& from) noexcept
    : IpoData() {
    *this = ::std::move(from);
  }

  inline IpoData& operator=(IpoData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IpoData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IpoData* internal_default_instance() {
    return reinterpret_cast<const IpoData*>(
               &_IpoData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(IpoData* other);
  friend void swap(IpoData& a, IpoData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IpoData* New() const PROTOBUF_FINAL { return New(NULL); }

  IpoData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IpoData& from);
  void MergeFrom(const IpoData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IpoData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Qot_GetIpoList.BasicIpoData basic = 1;
  bool has_basic() const;
  void clear_basic();
  static const int kBasicFieldNumber = 1;
  const ::Qot_GetIpoList::BasicIpoData& basic() const;
  ::Qot_GetIpoList::BasicIpoData* release_basic();
  ::Qot_GetIpoList::BasicIpoData* mutable_basic();
  void set_allocated_basic(::Qot_GetIpoList::BasicIpoData* basic);

  // optional .Qot_GetIpoList.CNIpoExData cnExData = 2;
  bool has_cnexdata() const;
  void clear_cnexdata();
  static const int kCnExDataFieldNumber = 2;
  const ::Qot_GetIpoList::CNIpoExData& cnexdata() const;
  ::Qot_GetIpoList::CNIpoExData* release_cnexdata();
  ::Qot_GetIpoList::CNIpoExData* mutable_cnexdata();
  void set_allocated_cnexdata(::Qot_GetIpoList::CNIpoExData* cnexdata);

  // optional .Qot_GetIpoList.HKIpoExData hkExData = 3;
  bool has_hkexdata() const;
  void clear_hkexdata();
  static const int kHkExDataFieldNumber = 3;
  const ::Qot_GetIpoList::HKIpoExData& hkexdata() const;
  ::Qot_GetIpoList::HKIpoExData* release_hkexdata();
  ::Qot_GetIpoList::HKIpoExData* mutable_hkexdata();
  void set_allocated_hkexdata(::Qot_GetIpoList::HKIpoExData* hkexdata);

  // optional .Qot_GetIpoList.USIpoExData usExData = 4;
  bool has_usexdata() const;
  void clear_usexdata();
  static const int kUsExDataFieldNumber = 4;
  const ::Qot_GetIpoList::USIpoExData& usexdata() const;
  ::Qot_GetIpoList::USIpoExData* release_usexdata();
  ::Qot_GetIpoList::USIpoExData* mutable_usexdata();
  void set_allocated_usexdata(::Qot_GetIpoList::USIpoExData* usexdata);

  // @@protoc_insertion_point(class_scope:Qot_GetIpoList.IpoData)
 private:
  void set_has_basic();
  void clear_has_basic();
  void set_has_cnexdata();
  void clear_has_cnexdata();
  void set_has_hkexdata();
  void clear_has_hkexdata();
  void set_has_usexdata();
  void clear_has_usexdata();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::Qot_GetIpoList::BasicIpoData* basic_;
  ::Qot_GetIpoList::CNIpoExData* cnexdata_;
  ::Qot_GetIpoList::HKIpoExData* hkexdata_;
  ::Qot_GetIpoList::USIpoExData* usexdata_;
  friend struct ::protobuf_Qot_5fGetIpoList_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fGetIpoList_2eproto::InitDefaultsIpoDataImpl();
};
// -------------------------------------------------------------------

class C2S : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_GetIpoList.C2S) */ {
 public:
  C2S();
  virtual ~C2S();

  C2S(const C2S& from);

  inline C2S& operator=(const C2S& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  C2S(C2S&& from) noexcept
    : C2S() {
    *this = ::std::move(from);
  }

  inline C2S& operator=(C2S&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2S& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2S* internal_default_instance() {
    return reinterpret_cast<const C2S*>(
               &_C2S_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(C2S* other);
  friend void swap(C2S& a, C2S& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline C2S* New() const PROTOBUF_FINAL { return New(NULL); }

  C2S* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const C2S& from);
  void MergeFrom(const C2S& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(C2S* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 market = 1;
  bool has_market() const;
  void clear_market();
  static const int kMarketFieldNumber = 1;
  ::google::protobuf::int32 market() const;
  void set_market(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Qot_GetIpoList.C2S)
 private:
  void set_has_market();
  void clear_has_market();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 market_;
  friend struct ::protobuf_Qot_5fGetIpoList_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fGetIpoList_2eproto::InitDefaultsC2SImpl();
};
// -------------------------------------------------------------------

class S2C : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_GetIpoList.S2C) */ {
 public:
  S2C();
  virtual ~S2C();

  S2C(const S2C& from);

  inline S2C& operator=(const S2C& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2C(S2C&& from) noexcept
    : S2C() {
    *this = ::std::move(from);
  }

  inline S2C& operator=(S2C&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2C* internal_default_instance() {
    return reinterpret_cast<const S2C*>(
               &_S2C_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(S2C* other);
  friend void swap(S2C& a, S2C& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2C* New() const PROTOBUF_FINAL { return New(NULL); }

  S2C* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const S2C& from);
  void MergeFrom(const S2C& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(S2C* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Qot_GetIpoList.IpoData ipoList = 1;
  int ipolist_size() const;
  void clear_ipolist();
  static const int kIpoListFieldNumber = 1;
  const ::Qot_GetIpoList::IpoData& ipolist(int index) const;
  ::Qot_GetIpoList::IpoData* mutable_ipolist(int index);
  ::Qot_GetIpoList::IpoData* add_ipolist();
  ::google::protobuf::RepeatedPtrField< ::Qot_GetIpoList::IpoData >*
      mutable_ipolist();
  const ::google::protobuf::RepeatedPtrField< ::Qot_GetIpoList::IpoData >&
      ipolist() const;

  // @@protoc_insertion_point(class_scope:Qot_GetIpoList.S2C)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Qot_GetIpoList::IpoData > ipolist_;
  friend struct ::protobuf_Qot_5fGetIpoList_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fGetIpoList_2eproto::InitDefaultsS2CImpl();
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_GetIpoList.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const PROTOBUF_FINAL { return New(NULL); }

  Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Qot_GetIpoList.C2S c2s = 1;
  bool has_c2s() const;
  void clear_c2s();
  static const int kC2SFieldNumber = 1;
  const ::Qot_GetIpoList::C2S& c2s() const;
  ::Qot_GetIpoList::C2S* release_c2s();
  ::Qot_GetIpoList::C2S* mutable_c2s();
  void set_allocated_c2s(::Qot_GetIpoList::C2S* c2s);

  // @@protoc_insertion_point(class_scope:Qot_GetIpoList.Request)
 private:
  void set_has_c2s();
  void clear_has_c2s();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::Qot_GetIpoList::C2S* c2s_;
  friend struct ::protobuf_Qot_5fGetIpoList_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fGetIpoList_2eproto::InitDefaultsRequestImpl();
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_GetIpoList.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(Response* other);
  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const PROTOBUF_FINAL { return New(NULL); }

  Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string retMsg = 2;
  bool has_retmsg() const;
  void clear_retmsg();
  static const int kRetMsgFieldNumber = 2;
  const ::std::string& retmsg() const;
  void set_retmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_retmsg(::std::string&& value);
  #endif
  void set_retmsg(const char* value);
  void set_retmsg(const char* value, size_t size);
  ::std::string* mutable_retmsg();
  ::std::string* release_retmsg();
  void set_allocated_retmsg(::std::string* retmsg);

  // optional .Qot_GetIpoList.S2C s2c = 4;
  bool has_s2c() const;
  void clear_s2c();
  static const int kS2CFieldNumber = 4;
  const ::Qot_GetIpoList::S2C& s2c() const;
  ::Qot_GetIpoList::S2C* release_s2c();
  ::Qot_GetIpoList::S2C* mutable_s2c();
  void set_allocated_s2c(::Qot_GetIpoList::S2C* s2c);

  // optional int32 errCode = 3;
  bool has_errcode() const;
  void clear_errcode();
  static const int kErrCodeFieldNumber = 3;
  ::google::protobuf::int32 errcode() const;
  void set_errcode(::google::protobuf::int32 value);

  // required int32 retType = 1 [default = -400];
  bool has_rettype() const;
  void clear_rettype();
  static const int kRetTypeFieldNumber = 1;
  ::google::protobuf::int32 rettype() const;
  void set_rettype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Qot_GetIpoList.Response)
 private:
  void set_has_rettype();
  void clear_has_rettype();
  void set_has_retmsg();
  void clear_has_retmsg();
  void set_has_errcode();
  void clear_has_errcode();
  void set_has_s2c();
  void clear_has_s2c();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr retmsg_;
  ::Qot_GetIpoList::S2C* s2c_;
  ::google::protobuf::int32 errcode_;
  ::google::protobuf::int32 rettype_;
  friend struct ::protobuf_Qot_5fGetIpoList_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fGetIpoList_2eproto::InitDefaultsResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BasicIpoData

// required .Qot_Common.Security security = 1;
inline bool BasicIpoData::has_security() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BasicIpoData::set_has_security() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BasicIpoData::clear_has_security() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::Qot_Common::Security& BasicIpoData::security() const {
  const ::Qot_Common::Security* p = security_;
  // @@protoc_insertion_point(field_get:Qot_GetIpoList.BasicIpoData.security)
  return p != NULL ? *p : *reinterpret_cast<const ::Qot_Common::Security*>(
      &::Qot_Common::_Security_default_instance_);
}
inline ::Qot_Common::Security* BasicIpoData::release_security() {
  // @@protoc_insertion_point(field_release:Qot_GetIpoList.BasicIpoData.security)
  clear_has_security();
  ::Qot_Common::Security* temp = security_;
  security_ = NULL;
  return temp;
}
inline ::Qot_Common::Security* BasicIpoData::mutable_security() {
  set_has_security();
  if (security_ == NULL) {
    security_ = new ::Qot_Common::Security;
  }
  // @@protoc_insertion_point(field_mutable:Qot_GetIpoList.BasicIpoData.security)
  return security_;
}
inline void BasicIpoData::set_allocated_security(::Qot_Common::Security* security) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(security_);
  }
  if (security) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      security = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, security, submessage_arena);
    }
    set_has_security();
  } else {
    clear_has_security();
  }
  security_ = security;
  // @@protoc_insertion_point(field_set_allocated:Qot_GetIpoList.BasicIpoData.security)
}

// required string name = 2;
inline bool BasicIpoData::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BasicIpoData::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BasicIpoData::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BasicIpoData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& BasicIpoData::name() const {
  // @@protoc_insertion_point(field_get:Qot_GetIpoList.BasicIpoData.name)
  return name_.GetNoArena();
}
inline void BasicIpoData::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_GetIpoList.BasicIpoData.name)
}
#if LANG_CXX11
inline void BasicIpoData::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_GetIpoList.BasicIpoData.name)
}
#endif
inline void BasicIpoData::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_GetIpoList.BasicIpoData.name)
}
inline void BasicIpoData::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_GetIpoList.BasicIpoData.name)
}
inline ::std::string* BasicIpoData::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Qot_GetIpoList.BasicIpoData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BasicIpoData::release_name() {
  // @@protoc_insertion_point(field_release:Qot_GetIpoList.BasicIpoData.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BasicIpoData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Qot_GetIpoList.BasicIpoData.name)
}

// optional string listTime = 3;
inline bool BasicIpoData::has_listtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BasicIpoData::set_has_listtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BasicIpoData::clear_has_listtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BasicIpoData::clear_listtime() {
  listtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_listtime();
}
inline const ::std::string& BasicIpoData::listtime() const {
  // @@protoc_insertion_point(field_get:Qot_GetIpoList.BasicIpoData.listTime)
  return listtime_.GetNoArena();
}
inline void BasicIpoData::set_listtime(const ::std::string& value) {
  set_has_listtime();
  listtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_GetIpoList.BasicIpoData.listTime)
}
#if LANG_CXX11
inline void BasicIpoData::set_listtime(::std::string&& value) {
  set_has_listtime();
  listtime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_GetIpoList.BasicIpoData.listTime)
}
#endif
inline void BasicIpoData::set_listtime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_listtime();
  listtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_GetIpoList.BasicIpoData.listTime)
}
inline void BasicIpoData::set_listtime(const char* value, size_t size) {
  set_has_listtime();
  listtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_GetIpoList.BasicIpoData.listTime)
}
inline ::std::string* BasicIpoData::mutable_listtime() {
  set_has_listtime();
  // @@protoc_insertion_point(field_mutable:Qot_GetIpoList.BasicIpoData.listTime)
  return listtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BasicIpoData::release_listtime() {
  // @@protoc_insertion_point(field_release:Qot_GetIpoList.BasicIpoData.listTime)
  clear_has_listtime();
  return listtime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BasicIpoData::set_allocated_listtime(::std::string* listtime) {
  if (listtime != NULL) {
    set_has_listtime();
  } else {
    clear_has_listtime();
  }
  listtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), listtime);
  // @@protoc_insertion_point(field_set_allocated:Qot_GetIpoList.BasicIpoData.listTime)
}

// optional double listTimestamp = 4;
inline bool BasicIpoData::has_listtimestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BasicIpoData::set_has_listtimestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BasicIpoData::clear_has_listtimestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BasicIpoData::clear_listtimestamp() {
  listtimestamp_ = 0;
  clear_has_listtimestamp();
}
inline double BasicIpoData::listtimestamp() const {
  // @@protoc_insertion_point(field_get:Qot_GetIpoList.BasicIpoData.listTimestamp)
  return listtimestamp_;
}
inline void BasicIpoData::set_listtimestamp(double value) {
  set_has_listtimestamp();
  listtimestamp_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetIpoList.BasicIpoData.listTimestamp)
}

// -------------------------------------------------------------------

// CNIpoExData

// required string applyCode = 1;
inline bool CNIpoExData::has_applycode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CNIpoExData::set_has_applycode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CNIpoExData::clear_has_applycode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CNIpoExData::clear_applycode() {
  applycode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_applycode();
}
inline const ::std::string& CNIpoExData::applycode() const {
  // @@protoc_insertion_point(field_get:Qot_GetIpoList.CNIpoExData.applyCode)
  return applycode_.GetNoArena();
}
inline void CNIpoExData::set_applycode(const ::std::string& value) {
  set_has_applycode();
  applycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_GetIpoList.CNIpoExData.applyCode)
}
#if LANG_CXX11
inline void CNIpoExData::set_applycode(::std::string&& value) {
  set_has_applycode();
  applycode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_GetIpoList.CNIpoExData.applyCode)
}
#endif
inline void CNIpoExData::set_applycode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_applycode();
  applycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_GetIpoList.CNIpoExData.applyCode)
}
inline void CNIpoExData::set_applycode(const char* value, size_t size) {
  set_has_applycode();
  applycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_GetIpoList.CNIpoExData.applyCode)
}
inline ::std::string* CNIpoExData::mutable_applycode() {
  set_has_applycode();
  // @@protoc_insertion_point(field_mutable:Qot_GetIpoList.CNIpoExData.applyCode)
  return applycode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CNIpoExData::release_applycode() {
  // @@protoc_insertion_point(field_release:Qot_GetIpoList.CNIpoExData.applyCode)
  clear_has_applycode();
  return applycode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CNIpoExData::set_allocated_applycode(::std::string* applycode) {
  if (applycode != NULL) {
    set_has_applycode();
  } else {
    clear_has_applycode();
  }
  applycode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), applycode);
  // @@protoc_insertion_point(field_set_allocated:Qot_GetIpoList.CNIpoExData.applyCode)
}

// required int64 issueSize = 2;
inline bool CNIpoExData::has_issuesize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CNIpoExData::set_has_issuesize() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CNIpoExData::clear_has_issuesize() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CNIpoExData::clear_issuesize() {
  issuesize_ = GOOGLE_LONGLONG(0);
  clear_has_issuesize();
}
inline ::google::protobuf::int64 CNIpoExData::issuesize() const {
  // @@protoc_insertion_point(field_get:Qot_GetIpoList.CNIpoExData.issueSize)
  return issuesize_;
}
inline void CNIpoExData::set_issuesize(::google::protobuf::int64 value) {
  set_has_issuesize();
  issuesize_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetIpoList.CNIpoExData.issueSize)
}

// required int64 onlineIssueSize = 3;
inline bool CNIpoExData::has_onlineissuesize() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CNIpoExData::set_has_onlineissuesize() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CNIpoExData::clear_has_onlineissuesize() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CNIpoExData::clear_onlineissuesize() {
  onlineissuesize_ = GOOGLE_LONGLONG(0);
  clear_has_onlineissuesize();
}
inline ::google::protobuf::int64 CNIpoExData::onlineissuesize() const {
  // @@protoc_insertion_point(field_get:Qot_GetIpoList.CNIpoExData.onlineIssueSize)
  return onlineissuesize_;
}
inline void CNIpoExData::set_onlineissuesize(::google::protobuf::int64 value) {
  set_has_onlineissuesize();
  onlineissuesize_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetIpoList.CNIpoExData.onlineIssueSize)
}

// required int64 applyUpperLimit = 4;
inline bool CNIpoExData::has_applyupperlimit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CNIpoExData::set_has_applyupperlimit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CNIpoExData::clear_has_applyupperlimit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CNIpoExData::clear_applyupperlimit() {
  applyupperlimit_ = GOOGLE_LONGLONG(0);
  clear_has_applyupperlimit();
}
inline ::google::protobuf::int64 CNIpoExData::applyupperlimit() const {
  // @@protoc_insertion_point(field_get:Qot_GetIpoList.CNIpoExData.applyUpperLimit)
  return applyupperlimit_;
}
inline void CNIpoExData::set_applyupperlimit(::google::protobuf::int64 value) {
  set_has_applyupperlimit();
  applyupperlimit_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetIpoList.CNIpoExData.applyUpperLimit)
}

// required int64 applyLimitMarketValue = 5;
inline bool CNIpoExData::has_applylimitmarketvalue() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CNIpoExData::set_has_applylimitmarketvalue() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CNIpoExData::clear_has_applylimitmarketvalue() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CNIpoExData::clear_applylimitmarketvalue() {
  applylimitmarketvalue_ = GOOGLE_LONGLONG(0);
  clear_has_applylimitmarketvalue();
}
inline ::google::protobuf::int64 CNIpoExData::applylimitmarketvalue() const {
  // @@protoc_insertion_point(field_get:Qot_GetIpoList.CNIpoExData.applyLimitMarketValue)
  return applylimitmarketvalue_;
}
inline void CNIpoExData::set_applylimitmarketvalue(::google::protobuf::int64 value) {
  set_has_applylimitmarketvalue();
  applylimitmarketvalue_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetIpoList.CNIpoExData.applyLimitMarketValue)
}

// required bool isEstimateIpoPrice = 6;
inline bool CNIpoExData::has_isestimateipoprice() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CNIpoExData::set_has_isestimateipoprice() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CNIpoExData::clear_has_isestimateipoprice() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CNIpoExData::clear_isestimateipoprice() {
  isestimateipoprice_ = false;
  clear_has_isestimateipoprice();
}
inline bool CNIpoExData::isestimateipoprice() const {
  // @@protoc_insertion_point(field_get:Qot_GetIpoList.CNIpoExData.isEstimateIpoPrice)
  return isestimateipoprice_;
}
inline void CNIpoExData::set_isestimateipoprice(bool value) {
  set_has_isestimateipoprice();
  isestimateipoprice_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetIpoList.CNIpoExData.isEstimateIpoPrice)
}

// required double ipoPrice = 7;
inline bool CNIpoExData::has_ipoprice() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CNIpoExData::set_has_ipoprice() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CNIpoExData::clear_has_ipoprice() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CNIpoExData::clear_ipoprice() {
  ipoprice_ = 0;
  clear_has_ipoprice();
}
inline double CNIpoExData::ipoprice() const {
  // @@protoc_insertion_point(field_get:Qot_GetIpoList.CNIpoExData.ipoPrice)
  return ipoprice_;
}
inline void CNIpoExData::set_ipoprice(double value) {
  set_has_ipoprice();
  ipoprice_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetIpoList.CNIpoExData.ipoPrice)
}

// required double industryPeRate = 8;
inline bool CNIpoExData::has_industryperate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CNIpoExData::set_has_industryperate() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CNIpoExData::clear_has_industryperate() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CNIpoExData::clear_industryperate() {
  industryperate_ = 0;
  clear_has_industryperate();
}
inline double CNIpoExData::industryperate() const {
  // @@protoc_insertion_point(field_get:Qot_GetIpoList.CNIpoExData.industryPeRate)
  return industryperate_;
}
inline void CNIpoExData::set_industryperate(double value) {
  set_has_industryperate();
  industryperate_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetIpoList.CNIpoExData.industryPeRate)
}

// required bool isEstimateWinningRatio = 9;
inline bool CNIpoExData::has_isestimatewinningratio() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CNIpoExData::set_has_isestimatewinningratio() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CNIpoExData::clear_has_isestimatewinningratio() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CNIpoExData::clear_isestimatewinningratio() {
  isestimatewinningratio_ = false;
  clear_has_isestimatewinningratio();
}
inline bool CNIpoExData::isestimatewinningratio() const {
  // @@protoc_insertion_point(field_get:Qot_GetIpoList.CNIpoExData.isEstimateWinningRatio)
  return isestimatewinningratio_;
}
inline void CNIpoExData::set_isestimatewinningratio(bool value) {
  set_has_isestimatewinningratio();
  isestimatewinningratio_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetIpoList.CNIpoExData.isEstimateWinningRatio)
}

// required double winningRatio = 10;
inline bool CNIpoExData::has_winningratio() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CNIpoExData::set_has_winningratio() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CNIpoExData::clear_has_winningratio() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CNIpoExData::clear_winningratio() {
  winningratio_ = 0;
  clear_has_winningratio();
}
inline double CNIpoExData::winningratio() const {
  // @@protoc_insertion_point(field_get:Qot_GetIpoList.CNIpoExData.winningRatio)
  return winningratio_;
}
inline void CNIpoExData::set_winningratio(double value) {
  set_has_winningratio();
  winningratio_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetIpoList.CNIpoExData.winningRatio)
}

// required double issuePeRate = 11;
inline bool CNIpoExData::has_issueperate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CNIpoExData::set_has_issueperate() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CNIpoExData::clear_has_issueperate() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CNIpoExData::clear_issueperate() {
  issueperate_ = 0;
  clear_has_issueperate();
}
inline double CNIpoExData::issueperate() const {
  // @@protoc_insertion_point(field_get:Qot_GetIpoList.CNIpoExData.issuePeRate)
  return issueperate_;
}
inline void CNIpoExData::set_issueperate(double value) {
  set_has_issueperate();
  issueperate_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetIpoList.CNIpoExData.issuePeRate)
}

// optional string applyTime = 12;
inline bool CNIpoExData::has_applytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CNIpoExData::set_has_applytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CNIpoExData::clear_has_applytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CNIpoExData::clear_applytime() {
  applytime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_applytime();
}
inline const ::std::string& CNIpoExData::applytime() const {
  // @@protoc_insertion_point(field_get:Qot_GetIpoList.CNIpoExData.applyTime)
  return applytime_.GetNoArena();
}
inline void CNIpoExData::set_applytime(const ::std::string& value) {
  set_has_applytime();
  applytime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_GetIpoList.CNIpoExData.applyTime)
}
#if LANG_CXX11
inline void CNIpoExData::set_applytime(::std::string&& value) {
  set_has_applytime();
  applytime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_GetIpoList.CNIpoExData.applyTime)
}
#endif
inline void CNIpoExData::set_applytime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_applytime();
  applytime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_GetIpoList.CNIpoExData.applyTime)
}
inline void CNIpoExData::set_applytime(const char* value, size_t size) {
  set_has_applytime();
  applytime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_GetIpoList.CNIpoExData.applyTime)
}
inline ::std::string* CNIpoExData::mutable_applytime() {
  set_has_applytime();
  // @@protoc_insertion_point(field_mutable:Qot_GetIpoList.CNIpoExData.applyTime)
  return applytime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CNIpoExData::release_applytime() {
  // @@protoc_insertion_point(field_release:Qot_GetIpoList.CNIpoExData.applyTime)
  clear_has_applytime();
  return applytime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CNIpoExData::set_allocated_applytime(::std::string* applytime) {
  if (applytime != NULL) {
    set_has_applytime();
  } else {
    clear_has_applytime();
  }
  applytime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), applytime);
  // @@protoc_insertion_point(field_set_allocated:Qot_GetIpoList.CNIpoExData.applyTime)
}

// optional double applyTimestamp = 13;
inline bool CNIpoExData::has_applytimestamp() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CNIpoExData::set_has_applytimestamp() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CNIpoExData::clear_has_applytimestamp() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CNIpoExData::clear_applytimestamp() {
  applytimestamp_ = 0;
  clear_has_applytimestamp();
}
inline double CNIpoExData::applytimestamp() const {
  // @@protoc_insertion_point(field_get:Qot_GetIpoList.CNIpoExData.applyTimestamp)
  return applytimestamp_;
}
inline void CNIpoExData::set_applytimestamp(double value) {
  set_has_applytimestamp();
  applytimestamp_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetIpoList.CNIpoExData.applyTimestamp)
}

// optional string winningTime = 14;
inline bool CNIpoExData::has_winningtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CNIpoExData::set_has_winningtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CNIpoExData::clear_has_winningtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CNIpoExData::clear_winningtime() {
  winningtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_winningtime();
}
inline const ::std::string& CNIpoExData::winningtime() const {
  // @@protoc_insertion_point(field_get:Qot_GetIpoList.CNIpoExData.winningTime)
  return winningtime_.GetNoArena();
}
inline void CNIpoExData::set_winningtime(const ::std::string& value) {
  set_has_winningtime();
  winningtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_GetIpoList.CNIpoExData.winningTime)
}
#if LANG_CXX11
inline void CNIpoExData::set_winningtime(::std::string&& value) {
  set_has_winningtime();
  winningtime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_GetIpoList.CNIpoExData.winningTime)
}
#endif
inline void CNIpoExData::set_winningtime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_winningtime();
  winningtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_GetIpoList.CNIpoExData.winningTime)
}
inline void CNIpoExData::set_winningtime(const char* value, size_t size) {
  set_has_winningtime();
  winningtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_GetIpoList.CNIpoExData.winningTime)
}
inline ::std::string* CNIpoExData::mutable_winningtime() {
  set_has_winningtime();
  // @@protoc_insertion_point(field_mutable:Qot_GetIpoList.CNIpoExData.winningTime)
  return winningtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CNIpoExData::release_winningtime() {
  // @@protoc_insertion_point(field_release:Qot_GetIpoList.CNIpoExData.winningTime)
  clear_has_winningtime();
  return winningtime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CNIpoExData::set_allocated_winningtime(::std::string* winningtime) {
  if (winningtime != NULL) {
    set_has_winningtime();
  } else {
    clear_has_winningtime();
  }
  winningtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), winningtime);
  // @@protoc_insertion_point(field_set_allocated:Qot_GetIpoList.CNIpoExData.winningTime)
}

// optional double winningTimestamp = 15;
inline bool CNIpoExData::has_winningtimestamp() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CNIpoExData::set_has_winningtimestamp() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CNIpoExData::clear_has_winningtimestamp() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CNIpoExData::clear_winningtimestamp() {
  winningtimestamp_ = 0;
  clear_has_winningtimestamp();
}
inline double CNIpoExData::winningtimestamp() const {
  // @@protoc_insertion_point(field_get:Qot_GetIpoList.CNIpoExData.winningTimestamp)
  return winningtimestamp_;
}
inline void CNIpoExData::set_winningtimestamp(double value) {
  set_has_winningtimestamp();
  winningtimestamp_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetIpoList.CNIpoExData.winningTimestamp)
}

// required bool isHasWon = 16;
inline bool CNIpoExData::has_ishaswon() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CNIpoExData::set_has_ishaswon() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CNIpoExData::clear_has_ishaswon() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CNIpoExData::clear_ishaswon() {
  ishaswon_ = false;
  clear_has_ishaswon();
}
inline bool CNIpoExData::ishaswon() const {
  // @@protoc_insertion_point(field_get:Qot_GetIpoList.CNIpoExData.isHasWon)
  return ishaswon_;
}
inline void CNIpoExData::set_ishaswon(bool value) {
  set_has_ishaswon();
  ishaswon_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetIpoList.CNIpoExData.isHasWon)
}

// repeated .Qot_GetIpoList.WinningNumData winningNumData = 17;
inline int CNIpoExData::winningnumdata_size() const {
  return winningnumdata_.size();
}
inline void CNIpoExData::clear_winningnumdata() {
  winningnumdata_.Clear();
}
inline const ::Qot_GetIpoList::WinningNumData& CNIpoExData::winningnumdata(int index) const {
  // @@protoc_insertion_point(field_get:Qot_GetIpoList.CNIpoExData.winningNumData)
  return winningnumdata_.Get(index);
}
inline ::Qot_GetIpoList::WinningNumData* CNIpoExData::mutable_winningnumdata(int index) {
  // @@protoc_insertion_point(field_mutable:Qot_GetIpoList.CNIpoExData.winningNumData)
  return winningnumdata_.Mutable(index);
}
inline ::Qot_GetIpoList::WinningNumData* CNIpoExData::add_winningnumdata() {
  // @@protoc_insertion_point(field_add:Qot_GetIpoList.CNIpoExData.winningNumData)
  return winningnumdata_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Qot_GetIpoList::WinningNumData >*
CNIpoExData::mutable_winningnumdata() {
  // @@protoc_insertion_point(field_mutable_list:Qot_GetIpoList.CNIpoExData.winningNumData)
  return &winningnumdata_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Qot_GetIpoList::WinningNumData >&
CNIpoExData::winningnumdata() const {
  // @@protoc_insertion_point(field_list:Qot_GetIpoList.CNIpoExData.winningNumData)
  return winningnumdata_;
}

// -------------------------------------------------------------------

// WinningNumData

// required string winningName = 1;
inline bool WinningNumData::has_winningname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WinningNumData::set_has_winningname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WinningNumData::clear_has_winningname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WinningNumData::clear_winningname() {
  winningname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_winningname();
}
inline const ::std::string& WinningNumData::winningname() const {
  // @@protoc_insertion_point(field_get:Qot_GetIpoList.WinningNumData.winningName)
  return winningname_.GetNoArena();
}
inline void WinningNumData::set_winningname(const ::std::string& value) {
  set_has_winningname();
  winningname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_GetIpoList.WinningNumData.winningName)
}
#if LANG_CXX11
inline void WinningNumData::set_winningname(::std::string&& value) {
  set_has_winningname();
  winningname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_GetIpoList.WinningNumData.winningName)
}
#endif
inline void WinningNumData::set_winningname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_winningname();
  winningname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_GetIpoList.WinningNumData.winningName)
}
inline void WinningNumData::set_winningname(const char* value, size_t size) {
  set_has_winningname();
  winningname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_GetIpoList.WinningNumData.winningName)
}
inline ::std::string* WinningNumData::mutable_winningname() {
  set_has_winningname();
  // @@protoc_insertion_point(field_mutable:Qot_GetIpoList.WinningNumData.winningName)
  return winningname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WinningNumData::release_winningname() {
  // @@protoc_insertion_point(field_release:Qot_GetIpoList.WinningNumData.winningName)
  clear_has_winningname();
  return winningname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WinningNumData::set_allocated_winningname(::std::string* winningname) {
  if (winningname != NULL) {
    set_has_winningname();
  } else {
    clear_has_winningname();
  }
  winningname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), winningname);
  // @@protoc_insertion_point(field_set_allocated:Qot_GetIpoList.WinningNumData.winningName)
}

// required string winningInfo = 2;
inline bool WinningNumData::has_winninginfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WinningNumData::set_has_winninginfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WinningNumData::clear_has_winninginfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WinningNumData::clear_winninginfo() {
  winninginfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_winninginfo();
}
inline const ::std::string& WinningNumData::winninginfo() const {
  // @@protoc_insertion_point(field_get:Qot_GetIpoList.WinningNumData.winningInfo)
  return winninginfo_.GetNoArena();
}
inline void WinningNumData::set_winninginfo(const ::std::string& value) {
  set_has_winninginfo();
  winninginfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_GetIpoList.WinningNumData.winningInfo)
}
#if LANG_CXX11
inline void WinningNumData::set_winninginfo(::std::string&& value) {
  set_has_winninginfo();
  winninginfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_GetIpoList.WinningNumData.winningInfo)
}
#endif
inline void WinningNumData::set_winninginfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_winninginfo();
  winninginfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_GetIpoList.WinningNumData.winningInfo)
}
inline void WinningNumData::set_winninginfo(const char* value, size_t size) {
  set_has_winninginfo();
  winninginfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_GetIpoList.WinningNumData.winningInfo)
}
inline ::std::string* WinningNumData::mutable_winninginfo() {
  set_has_winninginfo();
  // @@protoc_insertion_point(field_mutable:Qot_GetIpoList.WinningNumData.winningInfo)
  return winninginfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WinningNumData::release_winninginfo() {
  // @@protoc_insertion_point(field_release:Qot_GetIpoList.WinningNumData.winningInfo)
  clear_has_winninginfo();
  return winninginfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WinningNumData::set_allocated_winninginfo(::std::string* winninginfo) {
  if (winninginfo != NULL) {
    set_has_winninginfo();
  } else {
    clear_has_winninginfo();
  }
  winninginfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), winninginfo);
  // @@protoc_insertion_point(field_set_allocated:Qot_GetIpoList.WinningNumData.winningInfo)
}

// -------------------------------------------------------------------

// HKIpoExData

// required double ipoPriceMin = 1;
inline bool HKIpoExData::has_ipopricemin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HKIpoExData::set_has_ipopricemin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HKIpoExData::clear_has_ipopricemin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HKIpoExData::clear_ipopricemin() {
  ipopricemin_ = 0;
  clear_has_ipopricemin();
}
inline double HKIpoExData::ipopricemin() const {
  // @@protoc_insertion_point(field_get:Qot_GetIpoList.HKIpoExData.ipoPriceMin)
  return ipopricemin_;
}
inline void HKIpoExData::set_ipopricemin(double value) {
  set_has_ipopricemin();
  ipopricemin_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetIpoList.HKIpoExData.ipoPriceMin)
}

// required double ipoPriceMax = 2;
inline bool HKIpoExData::has_ipopricemax() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HKIpoExData::set_has_ipopricemax() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HKIpoExData::clear_has_ipopricemax() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HKIpoExData::clear_ipopricemax() {
  ipopricemax_ = 0;
  clear_has_ipopricemax();
}
inline double HKIpoExData::ipopricemax() const {
  // @@protoc_insertion_point(field_get:Qot_GetIpoList.HKIpoExData.ipoPriceMax)
  return ipopricemax_;
}
inline void HKIpoExData::set_ipopricemax(double value) {
  set_has_ipopricemax();
  ipopricemax_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetIpoList.HKIpoExData.ipoPriceMax)
}

// required double listPrice = 3;
inline bool HKIpoExData::has_listprice() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HKIpoExData::set_has_listprice() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HKIpoExData::clear_has_listprice() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HKIpoExData::clear_listprice() {
  listprice_ = 0;
  clear_has_listprice();
}
inline double HKIpoExData::listprice() const {
  // @@protoc_insertion_point(field_get:Qot_GetIpoList.HKIpoExData.listPrice)
  return listprice_;
}
inline void HKIpoExData::set_listprice(double value) {
  set_has_listprice();
  listprice_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetIpoList.HKIpoExData.listPrice)
}

// required int32 lotSize = 4;
inline bool HKIpoExData::has_lotsize() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HKIpoExData::set_has_lotsize() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HKIpoExData::clear_has_lotsize() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HKIpoExData::clear_lotsize() {
  lotsize_ = 0;
  clear_has_lotsize();
}
inline ::google::protobuf::int32 HKIpoExData::lotsize() const {
  // @@protoc_insertion_point(field_get:Qot_GetIpoList.HKIpoExData.lotSize)
  return lotsize_;
}
inline void HKIpoExData::set_lotsize(::google::protobuf::int32 value) {
  set_has_lotsize();
  lotsize_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetIpoList.HKIpoExData.lotSize)
}

// required double entrancePrice = 5;
inline bool HKIpoExData::has_entranceprice() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HKIpoExData::set_has_entranceprice() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HKIpoExData::clear_has_entranceprice() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HKIpoExData::clear_entranceprice() {
  entranceprice_ = 0;
  clear_has_entranceprice();
}
inline double HKIpoExData::entranceprice() const {
  // @@protoc_insertion_point(field_get:Qot_GetIpoList.HKIpoExData.entrancePrice)
  return entranceprice_;
}
inline void HKIpoExData::set_entranceprice(double value) {
  set_has_entranceprice();
  entranceprice_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetIpoList.HKIpoExData.entrancePrice)
}

// required bool isSubscribeStatus = 6;
inline bool HKIpoExData::has_issubscribestatus() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void HKIpoExData::set_has_issubscribestatus() {
  _has_bits_[0] |= 0x00000040u;
}
inline void HKIpoExData::clear_has_issubscribestatus() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void HKIpoExData::clear_issubscribestatus() {
  issubscribestatus_ = false;
  clear_has_issubscribestatus();
}
inline bool HKIpoExData::issubscribestatus() const {
  // @@protoc_insertion_point(field_get:Qot_GetIpoList.HKIpoExData.isSubscribeStatus)
  return issubscribestatus_;
}
inline void HKIpoExData::set_issubscribestatus(bool value) {
  set_has_issubscribestatus();
  issubscribestatus_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetIpoList.HKIpoExData.isSubscribeStatus)
}

// optional string applyEndTime = 7;
inline bool HKIpoExData::has_applyendtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HKIpoExData::set_has_applyendtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HKIpoExData::clear_has_applyendtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HKIpoExData::clear_applyendtime() {
  applyendtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_applyendtime();
}
inline const ::std::string& HKIpoExData::applyendtime() const {
  // @@protoc_insertion_point(field_get:Qot_GetIpoList.HKIpoExData.applyEndTime)
  return applyendtime_.GetNoArena();
}
inline void HKIpoExData::set_applyendtime(const ::std::string& value) {
  set_has_applyendtime();
  applyendtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_GetIpoList.HKIpoExData.applyEndTime)
}
#if LANG_CXX11
inline void HKIpoExData::set_applyendtime(::std::string&& value) {
  set_has_applyendtime();
  applyendtime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_GetIpoList.HKIpoExData.applyEndTime)
}
#endif
inline void HKIpoExData::set_applyendtime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_applyendtime();
  applyendtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_GetIpoList.HKIpoExData.applyEndTime)
}
inline void HKIpoExData::set_applyendtime(const char* value, size_t size) {
  set_has_applyendtime();
  applyendtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_GetIpoList.HKIpoExData.applyEndTime)
}
inline ::std::string* HKIpoExData::mutable_applyendtime() {
  set_has_applyendtime();
  // @@protoc_insertion_point(field_mutable:Qot_GetIpoList.HKIpoExData.applyEndTime)
  return applyendtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HKIpoExData::release_applyendtime() {
  // @@protoc_insertion_point(field_release:Qot_GetIpoList.HKIpoExData.applyEndTime)
  clear_has_applyendtime();
  return applyendtime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HKIpoExData::set_allocated_applyendtime(::std::string* applyendtime) {
  if (applyendtime != NULL) {
    set_has_applyendtime();
  } else {
    clear_has_applyendtime();
  }
  applyendtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), applyendtime);
  // @@protoc_insertion_point(field_set_allocated:Qot_GetIpoList.HKIpoExData.applyEndTime)
}

// optional double applyEndTimestamp = 8;
inline bool HKIpoExData::has_applyendtimestamp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void HKIpoExData::set_has_applyendtimestamp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void HKIpoExData::clear_has_applyendtimestamp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void HKIpoExData::clear_applyendtimestamp() {
  applyendtimestamp_ = 0;
  clear_has_applyendtimestamp();
}
inline double HKIpoExData::applyendtimestamp() const {
  // @@protoc_insertion_point(field_get:Qot_GetIpoList.HKIpoExData.applyEndTimestamp)
  return applyendtimestamp_;
}
inline void HKIpoExData::set_applyendtimestamp(double value) {
  set_has_applyendtimestamp();
  applyendtimestamp_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetIpoList.HKIpoExData.applyEndTimestamp)
}

// -------------------------------------------------------------------

// USIpoExData

// required double ipoPriceMin = 1;
inline bool USIpoExData::has_ipopricemin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void USIpoExData::set_has_ipopricemin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void USIpoExData::clear_has_ipopricemin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void USIpoExData::clear_ipopricemin() {
  ipopricemin_ = 0;
  clear_has_ipopricemin();
}
inline double USIpoExData::ipopricemin() const {
  // @@protoc_insertion_point(field_get:Qot_GetIpoList.USIpoExData.ipoPriceMin)
  return ipopricemin_;
}
inline void USIpoExData::set_ipopricemin(double value) {
  set_has_ipopricemin();
  ipopricemin_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetIpoList.USIpoExData.ipoPriceMin)
}

// required double ipoPriceMax = 2;
inline bool USIpoExData::has_ipopricemax() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void USIpoExData::set_has_ipopricemax() {
  _has_bits_[0] |= 0x00000002u;
}
inline void USIpoExData::clear_has_ipopricemax() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void USIpoExData::clear_ipopricemax() {
  ipopricemax_ = 0;
  clear_has_ipopricemax();
}
inline double USIpoExData::ipopricemax() const {
  // @@protoc_insertion_point(field_get:Qot_GetIpoList.USIpoExData.ipoPriceMax)
  return ipopricemax_;
}
inline void USIpoExData::set_ipopricemax(double value) {
  set_has_ipopricemax();
  ipopricemax_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetIpoList.USIpoExData.ipoPriceMax)
}

// required int64 issueSize = 3;
inline bool USIpoExData::has_issuesize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void USIpoExData::set_has_issuesize() {
  _has_bits_[0] |= 0x00000004u;
}
inline void USIpoExData::clear_has_issuesize() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void USIpoExData::clear_issuesize() {
  issuesize_ = GOOGLE_LONGLONG(0);
  clear_has_issuesize();
}
inline ::google::protobuf::int64 USIpoExData::issuesize() const {
  // @@protoc_insertion_point(field_get:Qot_GetIpoList.USIpoExData.issueSize)
  return issuesize_;
}
inline void USIpoExData::set_issuesize(::google::protobuf::int64 value) {
  set_has_issuesize();
  issuesize_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetIpoList.USIpoExData.issueSize)
}

// -------------------------------------------------------------------

// IpoData

// required .Qot_GetIpoList.BasicIpoData basic = 1;
inline bool IpoData::has_basic() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IpoData::set_has_basic() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IpoData::clear_has_basic() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IpoData::clear_basic() {
  if (basic_ != NULL) basic_->Clear();
  clear_has_basic();
}
inline const ::Qot_GetIpoList::BasicIpoData& IpoData::basic() const {
  const ::Qot_GetIpoList::BasicIpoData* p = basic_;
  // @@protoc_insertion_point(field_get:Qot_GetIpoList.IpoData.basic)
  return p != NULL ? *p : *reinterpret_cast<const ::Qot_GetIpoList::BasicIpoData*>(
      &::Qot_GetIpoList::_BasicIpoData_default_instance_);
}
inline ::Qot_GetIpoList::BasicIpoData* IpoData::release_basic() {
  // @@protoc_insertion_point(field_release:Qot_GetIpoList.IpoData.basic)
  clear_has_basic();
  ::Qot_GetIpoList::BasicIpoData* temp = basic_;
  basic_ = NULL;
  return temp;
}
inline ::Qot_GetIpoList::BasicIpoData* IpoData::mutable_basic() {
  set_has_basic();
  if (basic_ == NULL) {
    basic_ = new ::Qot_GetIpoList::BasicIpoData;
  }
  // @@protoc_insertion_point(field_mutable:Qot_GetIpoList.IpoData.basic)
  return basic_;
}
inline void IpoData::set_allocated_basic(::Qot_GetIpoList::BasicIpoData* basic) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete basic_;
  }
  if (basic) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      basic = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, basic, submessage_arena);
    }
    set_has_basic();
  } else {
    clear_has_basic();
  }
  basic_ = basic;
  // @@protoc_insertion_point(field_set_allocated:Qot_GetIpoList.IpoData.basic)
}

// optional .Qot_GetIpoList.CNIpoExData cnExData = 2;
inline bool IpoData::has_cnexdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IpoData::set_has_cnexdata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IpoData::clear_has_cnexdata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IpoData::clear_cnexdata() {
  if (cnexdata_ != NULL) cnexdata_->Clear();
  clear_has_cnexdata();
}
inline const ::Qot_GetIpoList::CNIpoExData& IpoData::cnexdata() const {
  const ::Qot_GetIpoList::CNIpoExData* p = cnexdata_;
  // @@protoc_insertion_point(field_get:Qot_GetIpoList.IpoData.cnExData)
  return p != NULL ? *p : *reinterpret_cast<const ::Qot_GetIpoList::CNIpoExData*>(
      &::Qot_GetIpoList::_CNIpoExData_default_instance_);
}
inline ::Qot_GetIpoList::CNIpoExData* IpoData::release_cnexdata() {
  // @@protoc_insertion_point(field_release:Qot_GetIpoList.IpoData.cnExData)
  clear_has_cnexdata();
  ::Qot_GetIpoList::CNIpoExData* temp = cnexdata_;
  cnexdata_ = NULL;
  return temp;
}
inline ::Qot_GetIpoList::CNIpoExData* IpoData::mutable_cnexdata() {
  set_has_cnexdata();
  if (cnexdata_ == NULL) {
    cnexdata_ = new ::Qot_GetIpoList::CNIpoExData;
  }
  // @@protoc_insertion_point(field_mutable:Qot_GetIpoList.IpoData.cnExData)
  return cnexdata_;
}
inline void IpoData::set_allocated_cnexdata(::Qot_GetIpoList::CNIpoExData* cnexdata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete cnexdata_;
  }
  if (cnexdata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cnexdata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cnexdata, submessage_arena);
    }
    set_has_cnexdata();
  } else {
    clear_has_cnexdata();
  }
  cnexdata_ = cnexdata;
  // @@protoc_insertion_point(field_set_allocated:Qot_GetIpoList.IpoData.cnExData)
}

// optional .Qot_GetIpoList.HKIpoExData hkExData = 3;
inline bool IpoData::has_hkexdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IpoData::set_has_hkexdata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IpoData::clear_has_hkexdata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IpoData::clear_hkexdata() {
  if (hkexdata_ != NULL) hkexdata_->Clear();
  clear_has_hkexdata();
}
inline const ::Qot_GetIpoList::HKIpoExData& IpoData::hkexdata() const {
  const ::Qot_GetIpoList::HKIpoExData* p = hkexdata_;
  // @@protoc_insertion_point(field_get:Qot_GetIpoList.IpoData.hkExData)
  return p != NULL ? *p : *reinterpret_cast<const ::Qot_GetIpoList::HKIpoExData*>(
      &::Qot_GetIpoList::_HKIpoExData_default_instance_);
}
inline ::Qot_GetIpoList::HKIpoExData* IpoData::release_hkexdata() {
  // @@protoc_insertion_point(field_release:Qot_GetIpoList.IpoData.hkExData)
  clear_has_hkexdata();
  ::Qot_GetIpoList::HKIpoExData* temp = hkexdata_;
  hkexdata_ = NULL;
  return temp;
}
inline ::Qot_GetIpoList::HKIpoExData* IpoData::mutable_hkexdata() {
  set_has_hkexdata();
  if (hkexdata_ == NULL) {
    hkexdata_ = new ::Qot_GetIpoList::HKIpoExData;
  }
  // @@protoc_insertion_point(field_mutable:Qot_GetIpoList.IpoData.hkExData)
  return hkexdata_;
}
inline void IpoData::set_allocated_hkexdata(::Qot_GetIpoList::HKIpoExData* hkexdata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete hkexdata_;
  }
  if (hkexdata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hkexdata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hkexdata, submessage_arena);
    }
    set_has_hkexdata();
  } else {
    clear_has_hkexdata();
  }
  hkexdata_ = hkexdata;
  // @@protoc_insertion_point(field_set_allocated:Qot_GetIpoList.IpoData.hkExData)
}

// optional .Qot_GetIpoList.USIpoExData usExData = 4;
inline bool IpoData::has_usexdata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IpoData::set_has_usexdata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IpoData::clear_has_usexdata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IpoData::clear_usexdata() {
  if (usexdata_ != NULL) usexdata_->Clear();
  clear_has_usexdata();
}
inline const ::Qot_GetIpoList::USIpoExData& IpoData::usexdata() const {
  const ::Qot_GetIpoList::USIpoExData* p = usexdata_;
  // @@protoc_insertion_point(field_get:Qot_GetIpoList.IpoData.usExData)
  return p != NULL ? *p : *reinterpret_cast<const ::Qot_GetIpoList::USIpoExData*>(
      &::Qot_GetIpoList::_USIpoExData_default_instance_);
}
inline ::Qot_GetIpoList::USIpoExData* IpoData::release_usexdata() {
  // @@protoc_insertion_point(field_release:Qot_GetIpoList.IpoData.usExData)
  clear_has_usexdata();
  ::Qot_GetIpoList::USIpoExData* temp = usexdata_;
  usexdata_ = NULL;
  return temp;
}
inline ::Qot_GetIpoList::USIpoExData* IpoData::mutable_usexdata() {
  set_has_usexdata();
  if (usexdata_ == NULL) {
    usexdata_ = new ::Qot_GetIpoList::USIpoExData;
  }
  // @@protoc_insertion_point(field_mutable:Qot_GetIpoList.IpoData.usExData)
  return usexdata_;
}
inline void IpoData::set_allocated_usexdata(::Qot_GetIpoList::USIpoExData* usexdata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete usexdata_;
  }
  if (usexdata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      usexdata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, usexdata, submessage_arena);
    }
    set_has_usexdata();
  } else {
    clear_has_usexdata();
  }
  usexdata_ = usexdata;
  // @@protoc_insertion_point(field_set_allocated:Qot_GetIpoList.IpoData.usExData)
}

// -------------------------------------------------------------------

// C2S

// required int32 market = 1;
inline bool C2S::has_market() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2S::set_has_market() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2S::clear_has_market() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2S::clear_market() {
  market_ = 0;
  clear_has_market();
}
inline ::google::protobuf::int32 C2S::market() const {
  // @@protoc_insertion_point(field_get:Qot_GetIpoList.C2S.market)
  return market_;
}
inline void C2S::set_market(::google::protobuf::int32 value) {
  set_has_market();
  market_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetIpoList.C2S.market)
}

// -------------------------------------------------------------------

// S2C

// repeated .Qot_GetIpoList.IpoData ipoList = 1;
inline int S2C::ipolist_size() const {
  return ipolist_.size();
}
inline void S2C::clear_ipolist() {
  ipolist_.Clear();
}
inline const ::Qot_GetIpoList::IpoData& S2C::ipolist(int index) const {
  // @@protoc_insertion_point(field_get:Qot_GetIpoList.S2C.ipoList)
  return ipolist_.Get(index);
}
inline ::Qot_GetIpoList::IpoData* S2C::mutable_ipolist(int index) {
  // @@protoc_insertion_point(field_mutable:Qot_GetIpoList.S2C.ipoList)
  return ipolist_.Mutable(index);
}
inline ::Qot_GetIpoList::IpoData* S2C::add_ipolist() {
  // @@protoc_insertion_point(field_add:Qot_GetIpoList.S2C.ipoList)
  return ipolist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Qot_GetIpoList::IpoData >*
S2C::mutable_ipolist() {
  // @@protoc_insertion_point(field_mutable_list:Qot_GetIpoList.S2C.ipoList)
  return &ipolist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Qot_GetIpoList::IpoData >&
S2C::ipolist() const {
  // @@protoc_insertion_point(field_list:Qot_GetIpoList.S2C.ipoList)
  return ipolist_;
}

// -------------------------------------------------------------------

// Request

// required .Qot_GetIpoList.C2S c2s = 1;
inline bool Request::has_c2s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_c2s() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_c2s() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_c2s() {
  if (c2s_ != NULL) c2s_->Clear();
  clear_has_c2s();
}
inline const ::Qot_GetIpoList::C2S& Request::c2s() const {
  const ::Qot_GetIpoList::C2S* p = c2s_;
  // @@protoc_insertion_point(field_get:Qot_GetIpoList.Request.c2s)
  return p != NULL ? *p : *reinterpret_cast<const ::Qot_GetIpoList::C2S*>(
      &::Qot_GetIpoList::_C2S_default_instance_);
}
inline ::Qot_GetIpoList::C2S* Request::release_c2s() {
  // @@protoc_insertion_point(field_release:Qot_GetIpoList.Request.c2s)
  clear_has_c2s();
  ::Qot_GetIpoList::C2S* temp = c2s_;
  c2s_ = NULL;
  return temp;
}
inline ::Qot_GetIpoList::C2S* Request::mutable_c2s() {
  set_has_c2s();
  if (c2s_ == NULL) {
    c2s_ = new ::Qot_GetIpoList::C2S;
  }
  // @@protoc_insertion_point(field_mutable:Qot_GetIpoList.Request.c2s)
  return c2s_;
}
inline void Request::set_allocated_c2s(::Qot_GetIpoList::C2S* c2s) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete c2s_;
  }
  if (c2s) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      c2s = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, c2s, submessage_arena);
    }
    set_has_c2s();
  } else {
    clear_has_c2s();
  }
  c2s_ = c2s;
  // @@protoc_insertion_point(field_set_allocated:Qot_GetIpoList.Request.c2s)
}

// -------------------------------------------------------------------

// Response

// required int32 retType = 1 [default = -400];
inline bool Response::has_rettype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Response::set_has_rettype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Response::clear_has_rettype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Response::clear_rettype() {
  rettype_ = -400;
  clear_has_rettype();
}
inline ::google::protobuf::int32 Response::rettype() const {
  // @@protoc_insertion_point(field_get:Qot_GetIpoList.Response.retType)
  return rettype_;
}
inline void Response::set_rettype(::google::protobuf::int32 value) {
  set_has_rettype();
  rettype_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetIpoList.Response.retType)
}

// optional string retMsg = 2;
inline bool Response::has_retmsg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::set_has_retmsg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response::clear_has_retmsg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response::clear_retmsg() {
  retmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_retmsg();
}
inline const ::std::string& Response::retmsg() const {
  // @@protoc_insertion_point(field_get:Qot_GetIpoList.Response.retMsg)
  return retmsg_.GetNoArena();
}
inline void Response::set_retmsg(const ::std::string& value) {
  set_has_retmsg();
  retmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_GetIpoList.Response.retMsg)
}
#if LANG_CXX11
inline void Response::set_retmsg(::std::string&& value) {
  set_has_retmsg();
  retmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_GetIpoList.Response.retMsg)
}
#endif
inline void Response::set_retmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_retmsg();
  retmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_GetIpoList.Response.retMsg)
}
inline void Response::set_retmsg(const char* value, size_t size) {
  set_has_retmsg();
  retmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_GetIpoList.Response.retMsg)
}
inline ::std::string* Response::mutable_retmsg() {
  set_has_retmsg();
  // @@protoc_insertion_point(field_mutable:Qot_GetIpoList.Response.retMsg)
  return retmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_retmsg() {
  // @@protoc_insertion_point(field_release:Qot_GetIpoList.Response.retMsg)
  clear_has_retmsg();
  return retmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_retmsg(::std::string* retmsg) {
  if (retmsg != NULL) {
    set_has_retmsg();
  } else {
    clear_has_retmsg();
  }
  retmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), retmsg);
  // @@protoc_insertion_point(field_set_allocated:Qot_GetIpoList.Response.retMsg)
}

// optional int32 errCode = 3;
inline bool Response::has_errcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Response::set_has_errcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Response::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Response::clear_errcode() {
  errcode_ = 0;
  clear_has_errcode();
}
inline ::google::protobuf::int32 Response::errcode() const {
  // @@protoc_insertion_point(field_get:Qot_GetIpoList.Response.errCode)
  return errcode_;
}
inline void Response::set_errcode(::google::protobuf::int32 value) {
  set_has_errcode();
  errcode_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetIpoList.Response.errCode)
}

// optional .Qot_GetIpoList.S2C s2c = 4;
inline bool Response::has_s2c() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response::set_has_s2c() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Response::clear_has_s2c() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Response::clear_s2c() {
  if (s2c_ != NULL) s2c_->Clear();
  clear_has_s2c();
}
inline const ::Qot_GetIpoList::S2C& Response::s2c() const {
  const ::Qot_GetIpoList::S2C* p = s2c_;
  // @@protoc_insertion_point(field_get:Qot_GetIpoList.Response.s2c)
  return p != NULL ? *p : *reinterpret_cast<const ::Qot_GetIpoList::S2C*>(
      &::Qot_GetIpoList::_S2C_default_instance_);
}
inline ::Qot_GetIpoList::S2C* Response::release_s2c() {
  // @@protoc_insertion_point(field_release:Qot_GetIpoList.Response.s2c)
  clear_has_s2c();
  ::Qot_GetIpoList::S2C* temp = s2c_;
  s2c_ = NULL;
  return temp;
}
inline ::Qot_GetIpoList::S2C* Response::mutable_s2c() {
  set_has_s2c();
  if (s2c_ == NULL) {
    s2c_ = new ::Qot_GetIpoList::S2C;
  }
  // @@protoc_insertion_point(field_mutable:Qot_GetIpoList.Response.s2c)
  return s2c_;
}
inline void Response::set_allocated_s2c(::Qot_GetIpoList::S2C* s2c) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete s2c_;
  }
  if (s2c) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      s2c = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, s2c, submessage_arena);
    }
    set_has_s2c();
  } else {
    clear_has_s2c();
  }
  s2c_ = s2c;
  // @@protoc_insertion_point(field_set_allocated:Qot_GetIpoList.Response.s2c)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Qot_GetIpoList

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Qot_5fGetIpoList_2eproto__INCLUDED
