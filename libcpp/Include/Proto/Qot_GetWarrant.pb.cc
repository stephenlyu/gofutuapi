// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Qot_GetWarrant.proto

#include "Qot_GetWarrant.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace Qot_GetWarrant {
class C2SDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<C2S>
      _instance;
} _C2S_default_instance_;
class WarrantDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WarrantData>
      _instance;
} _WarrantData_default_instance_;
class S2CDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<S2C>
      _instance;
} _S2C_default_instance_;
class RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Request>
      _instance;
} _Request_default_instance_;
class ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Response>
      _instance;
} _Response_default_instance_;
}  // namespace Qot_GetWarrant
namespace protobuf_Qot_5fGetWarrant_2eproto {
void InitDefaultsC2SImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_Qot_5fCommon_2eproto::InitDefaultsSecurity();
  {
    void* ptr = &::Qot_GetWarrant::_C2S_default_instance_;
    new (ptr) ::Qot_GetWarrant::C2S();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Qot_GetWarrant::C2S::InitAsDefaultInstance();
}

void InitDefaultsC2S() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsC2SImpl);
}

void InitDefaultsWarrantDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_Qot_5fCommon_2eproto::InitDefaultsSecurity();
  {
    void* ptr = &::Qot_GetWarrant::_WarrantData_default_instance_;
    new (ptr) ::Qot_GetWarrant::WarrantData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Qot_GetWarrant::WarrantData::InitAsDefaultInstance();
}

void InitDefaultsWarrantData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsWarrantDataImpl);
}

void InitDefaultsS2CImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_Qot_5fGetWarrant_2eproto::InitDefaultsWarrantData();
  {
    void* ptr = &::Qot_GetWarrant::_S2C_default_instance_;
    new (ptr) ::Qot_GetWarrant::S2C();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Qot_GetWarrant::S2C::InitAsDefaultInstance();
}

void InitDefaultsS2C() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsS2CImpl);
}

void InitDefaultsRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_Qot_5fGetWarrant_2eproto::InitDefaultsC2S();
  {
    void* ptr = &::Qot_GetWarrant::_Request_default_instance_;
    new (ptr) ::Qot_GetWarrant::Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Qot_GetWarrant::Request::InitAsDefaultInstance();
}

void InitDefaultsRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRequestImpl);
}

void InitDefaultsResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_Qot_5fGetWarrant_2eproto::InitDefaultsS2C();
  {
    void* ptr = &::Qot_GetWarrant::_Response_default_instance_;
    new (ptr) ::Qot_GetWarrant::Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Qot_GetWarrant::Response::InitAsDefaultInstance();
}

void InitDefaultsResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsResponseImpl);
}

::google::protobuf::Metadata file_level_metadata[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::C2S, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::C2S, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::C2S, begin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::C2S, num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::C2S, sortfield_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::C2S, ascend_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::C2S, owner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::C2S, typelist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::C2S, issuerlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::C2S, maturitytimemin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::C2S, maturitytimemax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::C2S, ipoperiod_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::C2S, pricetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::C2S, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::C2S, curpricemin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::C2S, curpricemax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::C2S, strikepricemin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::C2S, strikepricemax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::C2S, streetmin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::C2S, streetmax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::C2S, conversionmin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::C2S, conversionmax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::C2S, volmin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::C2S, volmax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::C2S, premiummin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::C2S, premiummax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::C2S, leverageratiomin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::C2S, leverageratiomax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::C2S, deltamin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::C2S, deltamax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::C2S, impliedmin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::C2S, impliedmax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::C2S, recoverypricemin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::C2S, recoverypricemax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::C2S, pricerecoveryratiomin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::C2S, pricerecoveryratiomax_),
  3,
  4,
  5,
  6,
  2,
  ~0u,
  ~0u,
  0,
  1,
  7,
  8,
  31,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::WarrantData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::WarrantData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::WarrantData, stock_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::WarrantData, owner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::WarrantData, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::WarrantData, issuer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::WarrantData, maturitytime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::WarrantData, maturitytimestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::WarrantData, listtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::WarrantData, listtimestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::WarrantData, lasttradetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::WarrantData, lasttradetimestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::WarrantData, recoveryprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::WarrantData, conversionratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::WarrantData, lotsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::WarrantData, strikeprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::WarrantData, lastcloseprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::WarrantData, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::WarrantData, curprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::WarrantData, pricechangeval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::WarrantData, changerate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::WarrantData, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::WarrantData, bidprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::WarrantData, askprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::WarrantData, bidvol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::WarrantData, askvol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::WarrantData, volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::WarrantData, turnover_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::WarrantData, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::WarrantData, premium_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::WarrantData, breakevenpoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::WarrantData, leverage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::WarrantData, ipop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::WarrantData, pricerecoveryratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::WarrantData, conversionprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::WarrantData, streetrate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::WarrantData, streetvol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::WarrantData, amplitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::WarrantData, issuesize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::WarrantData, highprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::WarrantData, lowprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::WarrantData, impliedvolatility_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::WarrantData, delta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::WarrantData, effectiveleverage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::WarrantData, upperstrikeprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::WarrantData, lowerstrikeprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::WarrantData, inlinepricestatus_),
  4,
  5,
  6,
  7,
  0,
  8,
  1,
  9,
  2,
  10,
  11,
  12,
  15,
  13,
  14,
  3,
  17,
  18,
  19,
  16,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::S2C, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::S2C, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::S2C, lastpage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::S2C, allcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::S2C, warrantdatalist_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::Request, c2s_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::Response, rettype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::Response, retmsg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::Response, errcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Qot_GetWarrant::Response, s2c_),
  3,
  0,
  2,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 39, sizeof(::Qot_GetWarrant::C2S)},
  { 73, 123, sizeof(::Qot_GetWarrant::WarrantData)},
  { 168, 176, sizeof(::Qot_GetWarrant::S2C)},
  { 179, 185, sizeof(::Qot_GetWarrant::Request)},
  { 186, 195, sizeof(::Qot_GetWarrant::Response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Qot_GetWarrant::_C2S_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Qot_GetWarrant::_WarrantData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Qot_GetWarrant::_S2C_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Qot_GetWarrant::_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Qot_GetWarrant::_Response_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "Qot_GetWarrant.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024Qot_GetWarrant.proto\022\016Qot_GetWarrant\032\014"
      "Common.proto\032\020Qot_Common.proto\"\337\005\n\003C2S\022\r"
      "\n\005begin\030\001 \002(\005\022\013\n\003num\030\002 \002(\005\022\021\n\tsortField\030"
      "\003 \002(\005\022\016\n\006ascend\030\004 \002(\010\022#\n\005owner\030\005 \001(\0132\024.Q"
      "ot_Common.Security\022\020\n\010typeList\030\006 \003(\005\022\022\n\n"
      "issuerList\030\007 \003(\005\022\027\n\017maturityTimeMin\030\010 \001("
      "\t\022\027\n\017maturityTimeMax\030\t \001(\t\022\021\n\tipoPeriod\030"
      "\n \001(\005\022\021\n\tpriceType\030\013 \001(\005\022\016\n\006status\030\014 \001(\005"
      "\022\023\n\013curPriceMin\030\r \001(\001\022\023\n\013curPriceMax\030\016 \001"
      "(\001\022\026\n\016strikePriceMin\030\017 \001(\001\022\026\n\016strikePric"
      "eMax\030\020 \001(\001\022\021\n\tstreetMin\030\021 \001(\001\022\021\n\tstreetM"
      "ax\030\022 \001(\001\022\025\n\rconversionMin\030\023 \001(\001\022\025\n\rconve"
      "rsionMax\030\024 \001(\001\022\016\n\006volMin\030\025 \001(\004\022\016\n\006volMax"
      "\030\026 \001(\004\022\022\n\npremiumMin\030\027 \001(\001\022\022\n\npremiumMax"
      "\030\030 \001(\001\022\030\n\020leverageRatioMin\030\031 \001(\001\022\030\n\020leve"
      "rageRatioMax\030\032 \001(\001\022\020\n\010deltaMin\030\033 \001(\001\022\020\n\010"
      "deltaMax\030\034 \001(\001\022\022\n\nimpliedMin\030\035 \001(\001\022\022\n\nim"
      "pliedMax\030\036 \001(\001\022\030\n\020recoveryPriceMin\030\037 \001(\001"
      "\022\030\n\020recoveryPriceMax\030  \001(\001\022\035\n\025priceRecov"
      "eryRatioMin\030! \001(\001\022\035\n\025priceRecoveryRatioM"
      "ax\030\" \001(\001\"\305\007\n\013WarrantData\022#\n\005stock\030\001 \002(\0132"
      "\024.Qot_Common.Security\022#\n\005owner\030\002 \002(\0132\024.Q"
      "ot_Common.Security\022\014\n\004type\030\003 \002(\005\022\016\n\006issu"
      "er\030\004 \002(\005\022\024\n\014maturityTime\030\005 \002(\t\022\031\n\021maturi"
      "tyTimestamp\030\006 \001(\001\022\020\n\010listTime\030\007 \002(\t\022\025\n\rl"
      "istTimestamp\030\010 \001(\001\022\025\n\rlastTradeTime\030\t \002("
      "\t\022\032\n\022lastTradeTimestamp\030\n \001(\001\022\025\n\rrecover"
      "yPrice\030\013 \001(\001\022\027\n\017conversionRatio\030\014 \002(\001\022\017\n"
      "\007lotSize\030\r \002(\005\022\023\n\013strikePrice\030\016 \002(\001\022\026\n\016l"
      "astClosePrice\030\017 \002(\001\022\014\n\004name\030\020 \002(\t\022\020\n\010cur"
      "Price\030\021 \002(\001\022\026\n\016priceChangeVal\030\022 \002(\001\022\022\n\nc"
      "hangeRate\030\023 \002(\001\022\016\n\006status\030\024 \002(\005\022\020\n\010bidPr"
      "ice\030\025 \002(\001\022\020\n\010askPrice\030\026 \002(\001\022\016\n\006bidVol\030\027 "
      "\002(\003\022\016\n\006askVol\030\030 \002(\003\022\016\n\006volume\030\031 \002(\003\022\020\n\010t"
      "urnover\030\032 \002(\001\022\r\n\005score\030\033 \002(\001\022\017\n\007premium\030"
      "\034 \002(\001\022\026\n\016breakEvenPoint\030\035 \002(\001\022\020\n\010leverag"
      "e\030\036 \002(\001\022\014\n\004ipop\030\037 \002(\001\022\032\n\022priceRecoveryRa"
      "tio\030  \001(\001\022\027\n\017conversionPrice\030! \002(\001\022\022\n\nst"
      "reetRate\030\" \002(\001\022\021\n\tstreetVol\030# \002(\003\022\021\n\tamp"
      "litude\030$ \002(\001\022\021\n\tissueSize\030% \002(\003\022\021\n\thighP"
      "rice\030\' \002(\001\022\020\n\010lowPrice\030( \002(\001\022\031\n\021impliedV"
      "olatility\030) \001(\001\022\r\n\005delta\030* \001(\001\022\031\n\021effect"
      "iveLeverage\030+ \002(\001\022\030\n\020upperStrikePrice\030, "
      "\001(\001\022\030\n\020lowerStrikePrice\030- \001(\001\022\031\n\021inLineP"
      "riceStatus\030. \001(\005\"_\n\003S2C\022\020\n\010lastPage\030\001 \002("
      "\010\022\020\n\010allCount\030\002 \002(\005\0224\n\017warrantDataList\030\003"
      " \003(\0132\033.Qot_GetWarrant.WarrantData\"+\n\007Req"
      "uest\022 \n\003c2s\030\001 \002(\0132\023.Qot_GetWarrant.C2S\"d"
      "\n\010Response\022\025\n\007retType\030\001 \002(\005:\004-400\022\016\n\006ret"
      "Msg\030\002 \001(\t\022\017\n\007errCode\030\003 \001(\005\022 \n\003s2c\030\004 \001(\0132"
      "\023.Qot_GetWarrant.S2CB\025\n\023com.futu.openapi"
      ".pb"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2043);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Qot_GetWarrant.proto", &protobuf_RegisterTypes);
  ::protobuf_Common_2eproto::AddDescriptors();
  ::protobuf_Qot_5fCommon_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Qot_5fGetWarrant_2eproto
namespace Qot_GetWarrant {

// ===================================================================

void C2S::InitAsDefaultInstance() {
  ::Qot_GetWarrant::_C2S_default_instance_._instance.get_mutable()->owner_ = const_cast< ::Qot_Common::Security*>(
      ::Qot_Common::Security::internal_default_instance());
}
void C2S::clear_owner() {
  if (owner_ != NULL) owner_->Clear();
  clear_has_owner();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int C2S::kBeginFieldNumber;
const int C2S::kNumFieldNumber;
const int C2S::kSortFieldFieldNumber;
const int C2S::kAscendFieldNumber;
const int C2S::kOwnerFieldNumber;
const int C2S::kTypeListFieldNumber;
const int C2S::kIssuerListFieldNumber;
const int C2S::kMaturityTimeMinFieldNumber;
const int C2S::kMaturityTimeMaxFieldNumber;
const int C2S::kIpoPeriodFieldNumber;
const int C2S::kPriceTypeFieldNumber;
const int C2S::kStatusFieldNumber;
const int C2S::kCurPriceMinFieldNumber;
const int C2S::kCurPriceMaxFieldNumber;
const int C2S::kStrikePriceMinFieldNumber;
const int C2S::kStrikePriceMaxFieldNumber;
const int C2S::kStreetMinFieldNumber;
const int C2S::kStreetMaxFieldNumber;
const int C2S::kConversionMinFieldNumber;
const int C2S::kConversionMaxFieldNumber;
const int C2S::kVolMinFieldNumber;
const int C2S::kVolMaxFieldNumber;
const int C2S::kPremiumMinFieldNumber;
const int C2S::kPremiumMaxFieldNumber;
const int C2S::kLeverageRatioMinFieldNumber;
const int C2S::kLeverageRatioMaxFieldNumber;
const int C2S::kDeltaMinFieldNumber;
const int C2S::kDeltaMaxFieldNumber;
const int C2S::kImpliedMinFieldNumber;
const int C2S::kImpliedMaxFieldNumber;
const int C2S::kRecoveryPriceMinFieldNumber;
const int C2S::kRecoveryPriceMaxFieldNumber;
const int C2S::kPriceRecoveryRatioMinFieldNumber;
const int C2S::kPriceRecoveryRatioMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

C2S::C2S()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Qot_5fGetWarrant_2eproto::InitDefaultsC2S();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Qot_GetWarrant.C2S)
}
C2S::C2S(const C2S& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      typelist_(from.typelist_),
      issuerlist_(from.issuerlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  maturitytimemin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_maturitytimemin()) {
    maturitytimemin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.maturitytimemin_);
  }
  maturitytimemax_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_maturitytimemax()) {
    maturitytimemax_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.maturitytimemax_);
  }
  if (from.has_owner()) {
    owner_ = new ::Qot_Common::Security(*from.owner_);
  } else {
    owner_ = NULL;
  }
  ::memcpy(&begin_, &from.begin_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&begin_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:Qot_GetWarrant.C2S)
}

void C2S::SharedCtor() {
  _cached_size_ = 0;
  maturitytimemin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  maturitytimemax_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&owner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&owner_)) + sizeof(status_));
}

C2S::~C2S() {
  // @@protoc_insertion_point(destructor:Qot_GetWarrant.C2S)
  SharedDtor();
}

void C2S::SharedDtor() {
  maturitytimemin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  maturitytimemax_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete owner_;
}

void C2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S::descriptor() {
  ::protobuf_Qot_5fGetWarrant_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Qot_5fGetWarrant_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const C2S& C2S::default_instance() {
  ::protobuf_Qot_5fGetWarrant_2eproto::InitDefaultsC2S();
  return *internal_default_instance();
}

C2S* C2S::New(::google::protobuf::Arena* arena) const {
  C2S* n = new C2S;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void C2S::Clear() {
// @@protoc_insertion_point(message_clear_start:Qot_GetWarrant.C2S)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  typelist_.Clear();
  issuerlist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!maturitytimemin_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*maturitytimemin_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!maturitytimemax_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*maturitytimemax_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(owner_ != NULL);
      owner_->Clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&begin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ipoperiod_) -
        reinterpret_cast<char*>(&begin_)) + sizeof(ipoperiod_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&pricetype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&conversionmin_) -
        reinterpret_cast<char*>(&pricetype_)) + sizeof(conversionmin_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&conversionmax_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&deltamin_) -
        reinterpret_cast<char*>(&conversionmax_)) + sizeof(deltamin_));
  }
  if (cached_has_bits & 4278190080u) {
    ::memset(&deltamax_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&deltamax_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool C2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Qot_GetWarrant.C2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 begin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_begin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &begin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 num = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 sortField = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_sortfield();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sortfield_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool ascend = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_ascend();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ascend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Qot_Common.Security owner = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_owner()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 typeList = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48u, input, this->mutable_typelist())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_typelist())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 issuerList = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56u, input, this->mutable_issuerlist())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_issuerlist())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string maturityTimeMin = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_maturitytimemin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->maturitytimemin().data(), static_cast<int>(this->maturitytimemin().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Qot_GetWarrant.C2S.maturityTimeMin");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string maturityTimeMax = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_maturitytimemax()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->maturitytimemax().data(), static_cast<int>(this->maturitytimemax().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Qot_GetWarrant.C2S.maturityTimeMax");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ipoPeriod = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_ipoperiod();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ipoperiod_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 priceType = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_pricetype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pricetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 status = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double curPriceMin = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_curpricemin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &curpricemin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double curPriceMax = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          set_has_curpricemax();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &curpricemax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double strikePriceMin = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {
          set_has_strikepricemin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &strikepricemin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double strikePriceMax = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {
          set_has_strikepricemax();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &strikepricemax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double streetMin = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {
          set_has_streetmin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &streetmin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double streetMax = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {
          set_has_streetmax();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &streetmax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double conversionMin = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u /* 153 & 0xFF */)) {
          set_has_conversionmin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &conversionmin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double conversionMax = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u /* 161 & 0xFF */)) {
          set_has_conversionmax();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &conversionmax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 volMin = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_volmin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &volmin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 volMax = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_volmax();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &volmax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double premiumMin = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(185u /* 185 & 0xFF */)) {
          set_has_premiummin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &premiummin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double premiumMax = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(193u /* 193 & 0xFF */)) {
          set_has_premiummax();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &premiummax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double leverageRatioMin = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(201u /* 201 & 0xFF */)) {
          set_has_leverageratiomin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &leverageratiomin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double leverageRatioMax = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(209u /* 209 & 0xFF */)) {
          set_has_leverageratiomax();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &leverageratiomax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double deltaMin = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(217u /* 217 & 0xFF */)) {
          set_has_deltamin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &deltamin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double deltaMax = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(225u /* 225 & 0xFF */)) {
          set_has_deltamax();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &deltamax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double impliedMin = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(233u /* 233 & 0xFF */)) {
          set_has_impliedmin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &impliedmin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double impliedMax = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(241u /* 241 & 0xFF */)) {
          set_has_impliedmax();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &impliedmax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double recoveryPriceMin = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(249u /* 249 & 0xFF */)) {
          set_has_recoverypricemin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &recoverypricemin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double recoveryPriceMax = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1u /* 257 & 0xFF */)) {
          set_has_recoverypricemax();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &recoverypricemax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double priceRecoveryRatioMin = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 265 & 0xFF */)) {
          set_has_pricerecoveryratiomin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pricerecoveryratiomin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double priceRecoveryRatioMax = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 273 & 0xFF */)) {
          set_has_pricerecoveryratiomax();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pricerecoveryratiomax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Qot_GetWarrant.C2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Qot_GetWarrant.C2S)
  return false;
#undef DO_
}

void C2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Qot_GetWarrant.C2S)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 begin = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->begin(), output);
  }

  // required int32 num = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  // required int32 sortField = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sortfield(), output);
  }

  // required bool ascend = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->ascend(), output);
  }

  // optional .Qot_Common.Security owner = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->owner_, output);
  }

  // repeated int32 typeList = 6;
  for (int i = 0, n = this->typelist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->typelist(i), output);
  }

  // repeated int32 issuerList = 7;
  for (int i = 0, n = this->issuerlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->issuerlist(i), output);
  }

  // optional string maturityTimeMin = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->maturitytimemin().data(), static_cast<int>(this->maturitytimemin().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Qot_GetWarrant.C2S.maturityTimeMin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->maturitytimemin(), output);
  }

  // optional string maturityTimeMax = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->maturitytimemax().data(), static_cast<int>(this->maturitytimemax().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Qot_GetWarrant.C2S.maturityTimeMax");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->maturitytimemax(), output);
  }

  // optional int32 ipoPeriod = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->ipoperiod(), output);
  }

  // optional int32 priceType = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->pricetype(), output);
  }

  // optional int32 status = 12;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->status(), output);
  }

  // optional double curPriceMin = 13;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->curpricemin(), output);
  }

  // optional double curPriceMax = 14;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->curpricemax(), output);
  }

  // optional double strikePriceMin = 15;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->strikepricemin(), output);
  }

  // optional double strikePriceMax = 16;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->strikepricemax(), output);
  }

  // optional double streetMin = 17;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->streetmin(), output);
  }

  // optional double streetMax = 18;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->streetmax(), output);
  }

  // optional double conversionMin = 19;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->conversionmin(), output);
  }

  // optional double conversionMax = 20;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->conversionmax(), output);
  }

  // optional uint64 volMin = 21;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->volmin(), output);
  }

  // optional uint64 volMax = 22;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(22, this->volmax(), output);
  }

  // optional double premiumMin = 23;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->premiummin(), output);
  }

  // optional double premiumMax = 24;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->premiummax(), output);
  }

  // optional double leverageRatioMin = 25;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->leverageratiomin(), output);
  }

  // optional double leverageRatioMax = 26;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->leverageratiomax(), output);
  }

  // optional double deltaMin = 27;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->deltamin(), output);
  }

  // optional double deltaMax = 28;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->deltamax(), output);
  }

  // optional double impliedMin = 29;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->impliedmin(), output);
  }

  // optional double impliedMax = 30;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->impliedmax(), output);
  }

  // optional double recoveryPriceMin = 31;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->recoverypricemin(), output);
  }

  // optional double recoveryPriceMax = 32;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->recoverypricemax(), output);
  }

  // optional double priceRecoveryRatioMin = 33;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->pricerecoveryratiomin(), output);
  }

  // optional double priceRecoveryRatioMax = 34;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(34, this->pricerecoveryratiomax(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Qot_GetWarrant.C2S)
}

::google::protobuf::uint8* C2S::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Qot_GetWarrant.C2S)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 begin = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->begin(), target);
  }

  // required int32 num = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  // required int32 sortField = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sortfield(), target);
  }

  // required bool ascend = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->ascend(), target);
  }

  // optional .Qot_Common.Security owner = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->owner_, deterministic, target);
  }

  // repeated int32 typeList = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(6, this->typelist_, target);

  // repeated int32 issuerList = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(7, this->issuerlist_, target);

  // optional string maturityTimeMin = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->maturitytimemin().data(), static_cast<int>(this->maturitytimemin().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Qot_GetWarrant.C2S.maturityTimeMin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->maturitytimemin(), target);
  }

  // optional string maturityTimeMax = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->maturitytimemax().data(), static_cast<int>(this->maturitytimemax().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Qot_GetWarrant.C2S.maturityTimeMax");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->maturitytimemax(), target);
  }

  // optional int32 ipoPeriod = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->ipoperiod(), target);
  }

  // optional int32 priceType = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->pricetype(), target);
  }

  // optional int32 status = 12;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->status(), target);
  }

  // optional double curPriceMin = 13;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->curpricemin(), target);
  }

  // optional double curPriceMax = 14;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->curpricemax(), target);
  }

  // optional double strikePriceMin = 15;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->strikepricemin(), target);
  }

  // optional double strikePriceMax = 16;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->strikepricemax(), target);
  }

  // optional double streetMin = 17;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->streetmin(), target);
  }

  // optional double streetMax = 18;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->streetmax(), target);
  }

  // optional double conversionMin = 19;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->conversionmin(), target);
  }

  // optional double conversionMax = 20;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->conversionmax(), target);
  }

  // optional uint64 volMin = 21;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->volmin(), target);
  }

  // optional uint64 volMax = 22;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(22, this->volmax(), target);
  }

  // optional double premiumMin = 23;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->premiummin(), target);
  }

  // optional double premiumMax = 24;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->premiummax(), target);
  }

  // optional double leverageRatioMin = 25;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->leverageratiomin(), target);
  }

  // optional double leverageRatioMax = 26;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->leverageratiomax(), target);
  }

  // optional double deltaMin = 27;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->deltamin(), target);
  }

  // optional double deltaMax = 28;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->deltamax(), target);
  }

  // optional double impliedMin = 29;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->impliedmin(), target);
  }

  // optional double impliedMax = 30;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->impliedmax(), target);
  }

  // optional double recoveryPriceMin = 31;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->recoverypricemin(), target);
  }

  // optional double recoveryPriceMax = 32;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->recoverypricemax(), target);
  }

  // optional double priceRecoveryRatioMin = 33;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->pricerecoveryratiomin(), target);
  }

  // optional double priceRecoveryRatioMax = 34;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(34, this->pricerecoveryratiomax(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Qot_GetWarrant.C2S)
  return target;
}

size_t C2S::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Qot_GetWarrant.C2S)
  size_t total_size = 0;

  if (has_begin()) {
    // required int32 begin = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->begin());
  }

  if (has_num()) {
    // required int32 num = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num());
  }

  if (has_sortfield()) {
    // required int32 sortField = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sortfield());
  }

  if (has_ascend()) {
    // required bool ascend = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t C2S::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Qot_GetWarrant.C2S)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000078) ^ 0x00000078) == 0) {  // All required fields are present.
    // required int32 begin = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->begin());

    // required int32 num = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num());

    // required int32 sortField = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sortfield());

    // required bool ascend = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 typeList = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->typelist_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->typelist_size());
    total_size += data_size;
  }

  // repeated int32 issuerList = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->issuerlist_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->issuerlist_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string maturityTimeMin = 8;
    if (has_maturitytimemin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->maturitytimemin());
    }

    // optional string maturityTimeMax = 9;
    if (has_maturitytimemax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->maturitytimemax());
    }

    // optional .Qot_Common.Security owner = 5;
    if (has_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->owner_);
    }

  }
  // optional int32 ipoPeriod = 10;
  if (has_ipoperiod()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ipoperiod());
  }

  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 priceType = 11;
    if (has_pricetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pricetype());
    }

    // optional double curPriceMin = 13;
    if (has_curpricemin()) {
      total_size += 1 + 8;
    }

    // optional double curPriceMax = 14;
    if (has_curpricemax()) {
      total_size += 1 + 8;
    }

    // optional double strikePriceMin = 15;
    if (has_strikepricemin()) {
      total_size += 1 + 8;
    }

    // optional double strikePriceMax = 16;
    if (has_strikepricemax()) {
      total_size += 2 + 8;
    }

    // optional double streetMin = 17;
    if (has_streetmin()) {
      total_size += 2 + 8;
    }

    // optional double streetMax = 18;
    if (has_streetmax()) {
      total_size += 2 + 8;
    }

    // optional double conversionMin = 19;
    if (has_conversionmin()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional double conversionMax = 20;
    if (has_conversionmax()) {
      total_size += 2 + 8;
    }

    // optional uint64 volMin = 21;
    if (has_volmin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->volmin());
    }

    // optional uint64 volMax = 22;
    if (has_volmax()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->volmax());
    }

    // optional double premiumMin = 23;
    if (has_premiummin()) {
      total_size += 2 + 8;
    }

    // optional double premiumMax = 24;
    if (has_premiummax()) {
      total_size += 2 + 8;
    }

    // optional double leverageRatioMin = 25;
    if (has_leverageratiomin()) {
      total_size += 2 + 8;
    }

    // optional double leverageRatioMax = 26;
    if (has_leverageratiomax()) {
      total_size += 2 + 8;
    }

    // optional double deltaMin = 27;
    if (has_deltamin()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional double deltaMax = 28;
    if (has_deltamax()) {
      total_size += 2 + 8;
    }

    // optional double impliedMin = 29;
    if (has_impliedmin()) {
      total_size += 2 + 8;
    }

    // optional double impliedMax = 30;
    if (has_impliedmax()) {
      total_size += 2 + 8;
    }

    // optional double recoveryPriceMin = 31;
    if (has_recoverypricemin()) {
      total_size += 2 + 8;
    }

    // optional double recoveryPriceMax = 32;
    if (has_recoverypricemax()) {
      total_size += 2 + 8;
    }

    // optional double priceRecoveryRatioMin = 33;
    if (has_pricerecoveryratiomin()) {
      total_size += 2 + 8;
    }

    // optional double priceRecoveryRatioMax = 34;
    if (has_pricerecoveryratiomax()) {
      total_size += 2 + 8;
    }

    // optional int32 status = 12;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Qot_GetWarrant.C2S)
  GOOGLE_DCHECK_NE(&from, this);
  const C2S* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const C2S>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Qot_GetWarrant.C2S)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Qot_GetWarrant.C2S)
    MergeFrom(*source);
  }
}

void C2S::MergeFrom(const C2S& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Qot_GetWarrant.C2S)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  typelist_.MergeFrom(from.typelist_);
  issuerlist_.MergeFrom(from.issuerlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_maturitytimemin();
      maturitytimemin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.maturitytimemin_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_maturitytimemax();
      maturitytimemax_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.maturitytimemax_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_owner()->::Qot_Common::Security::MergeFrom(from.owner());
    }
    if (cached_has_bits & 0x00000008u) {
      begin_ = from.begin_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_ = from.num_;
    }
    if (cached_has_bits & 0x00000020u) {
      sortfield_ = from.sortfield_;
    }
    if (cached_has_bits & 0x00000040u) {
      ascend_ = from.ascend_;
    }
    if (cached_has_bits & 0x00000080u) {
      ipoperiod_ = from.ipoperiod_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      pricetype_ = from.pricetype_;
    }
    if (cached_has_bits & 0x00000200u) {
      curpricemin_ = from.curpricemin_;
    }
    if (cached_has_bits & 0x00000400u) {
      curpricemax_ = from.curpricemax_;
    }
    if (cached_has_bits & 0x00000800u) {
      strikepricemin_ = from.strikepricemin_;
    }
    if (cached_has_bits & 0x00001000u) {
      strikepricemax_ = from.strikepricemax_;
    }
    if (cached_has_bits & 0x00002000u) {
      streetmin_ = from.streetmin_;
    }
    if (cached_has_bits & 0x00004000u) {
      streetmax_ = from.streetmax_;
    }
    if (cached_has_bits & 0x00008000u) {
      conversionmin_ = from.conversionmin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      conversionmax_ = from.conversionmax_;
    }
    if (cached_has_bits & 0x00020000u) {
      volmin_ = from.volmin_;
    }
    if (cached_has_bits & 0x00040000u) {
      volmax_ = from.volmax_;
    }
    if (cached_has_bits & 0x00080000u) {
      premiummin_ = from.premiummin_;
    }
    if (cached_has_bits & 0x00100000u) {
      premiummax_ = from.premiummax_;
    }
    if (cached_has_bits & 0x00200000u) {
      leverageratiomin_ = from.leverageratiomin_;
    }
    if (cached_has_bits & 0x00400000u) {
      leverageratiomax_ = from.leverageratiomax_;
    }
    if (cached_has_bits & 0x00800000u) {
      deltamin_ = from.deltamin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      deltamax_ = from.deltamax_;
    }
    if (cached_has_bits & 0x02000000u) {
      impliedmin_ = from.impliedmin_;
    }
    if (cached_has_bits & 0x04000000u) {
      impliedmax_ = from.impliedmax_;
    }
    if (cached_has_bits & 0x08000000u) {
      recoverypricemin_ = from.recoverypricemin_;
    }
    if (cached_has_bits & 0x10000000u) {
      recoverypricemax_ = from.recoverypricemax_;
    }
    if (cached_has_bits & 0x20000000u) {
      pricerecoveryratiomin_ = from.pricerecoveryratiomin_;
    }
    if (cached_has_bits & 0x40000000u) {
      pricerecoveryratiomax_ = from.pricerecoveryratiomax_;
    }
    if (cached_has_bits & 0x80000000u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void C2S::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Qot_GetWarrant.C2S)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S::CopyFrom(const C2S& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Qot_GetWarrant.C2S)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000078) != 0x00000078) return false;
  if (has_owner()) {
    if (!this->owner_->IsInitialized()) return false;
  }
  return true;
}

void C2S::Swap(C2S* other) {
  if (other == this) return;
  InternalSwap(other);
}
void C2S::InternalSwap(C2S* other) {
  using std::swap;
  typelist_.InternalSwap(&other->typelist_);
  issuerlist_.InternalSwap(&other->issuerlist_);
  maturitytimemin_.Swap(&other->maturitytimemin_);
  maturitytimemax_.Swap(&other->maturitytimemax_);
  swap(owner_, other->owner_);
  swap(begin_, other->begin_);
  swap(num_, other->num_);
  swap(sortfield_, other->sortfield_);
  swap(ascend_, other->ascend_);
  swap(ipoperiod_, other->ipoperiod_);
  swap(pricetype_, other->pricetype_);
  swap(curpricemin_, other->curpricemin_);
  swap(curpricemax_, other->curpricemax_);
  swap(strikepricemin_, other->strikepricemin_);
  swap(strikepricemax_, other->strikepricemax_);
  swap(streetmin_, other->streetmin_);
  swap(streetmax_, other->streetmax_);
  swap(conversionmin_, other->conversionmin_);
  swap(conversionmax_, other->conversionmax_);
  swap(volmin_, other->volmin_);
  swap(volmax_, other->volmax_);
  swap(premiummin_, other->premiummin_);
  swap(premiummax_, other->premiummax_);
  swap(leverageratiomin_, other->leverageratiomin_);
  swap(leverageratiomax_, other->leverageratiomax_);
  swap(deltamin_, other->deltamin_);
  swap(deltamax_, other->deltamax_);
  swap(impliedmin_, other->impliedmin_);
  swap(impliedmax_, other->impliedmax_);
  swap(recoverypricemin_, other->recoverypricemin_);
  swap(recoverypricemax_, other->recoverypricemax_);
  swap(pricerecoveryratiomin_, other->pricerecoveryratiomin_);
  swap(pricerecoveryratiomax_, other->pricerecoveryratiomax_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata C2S::GetMetadata() const {
  protobuf_Qot_5fGetWarrant_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Qot_5fGetWarrant_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WarrantData::InitAsDefaultInstance() {
  ::Qot_GetWarrant::_WarrantData_default_instance_._instance.get_mutable()->stock_ = const_cast< ::Qot_Common::Security*>(
      ::Qot_Common::Security::internal_default_instance());
  ::Qot_GetWarrant::_WarrantData_default_instance_._instance.get_mutable()->owner_ = const_cast< ::Qot_Common::Security*>(
      ::Qot_Common::Security::internal_default_instance());
}
void WarrantData::clear_stock() {
  if (stock_ != NULL) stock_->Clear();
  clear_has_stock();
}
void WarrantData::clear_owner() {
  if (owner_ != NULL) owner_->Clear();
  clear_has_owner();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WarrantData::kStockFieldNumber;
const int WarrantData::kOwnerFieldNumber;
const int WarrantData::kTypeFieldNumber;
const int WarrantData::kIssuerFieldNumber;
const int WarrantData::kMaturityTimeFieldNumber;
const int WarrantData::kMaturityTimestampFieldNumber;
const int WarrantData::kListTimeFieldNumber;
const int WarrantData::kListTimestampFieldNumber;
const int WarrantData::kLastTradeTimeFieldNumber;
const int WarrantData::kLastTradeTimestampFieldNumber;
const int WarrantData::kRecoveryPriceFieldNumber;
const int WarrantData::kConversionRatioFieldNumber;
const int WarrantData::kLotSizeFieldNumber;
const int WarrantData::kStrikePriceFieldNumber;
const int WarrantData::kLastClosePriceFieldNumber;
const int WarrantData::kNameFieldNumber;
const int WarrantData::kCurPriceFieldNumber;
const int WarrantData::kPriceChangeValFieldNumber;
const int WarrantData::kChangeRateFieldNumber;
const int WarrantData::kStatusFieldNumber;
const int WarrantData::kBidPriceFieldNumber;
const int WarrantData::kAskPriceFieldNumber;
const int WarrantData::kBidVolFieldNumber;
const int WarrantData::kAskVolFieldNumber;
const int WarrantData::kVolumeFieldNumber;
const int WarrantData::kTurnoverFieldNumber;
const int WarrantData::kScoreFieldNumber;
const int WarrantData::kPremiumFieldNumber;
const int WarrantData::kBreakEvenPointFieldNumber;
const int WarrantData::kLeverageFieldNumber;
const int WarrantData::kIpopFieldNumber;
const int WarrantData::kPriceRecoveryRatioFieldNumber;
const int WarrantData::kConversionPriceFieldNumber;
const int WarrantData::kStreetRateFieldNumber;
const int WarrantData::kStreetVolFieldNumber;
const int WarrantData::kAmplitudeFieldNumber;
const int WarrantData::kIssueSizeFieldNumber;
const int WarrantData::kHighPriceFieldNumber;
const int WarrantData::kLowPriceFieldNumber;
const int WarrantData::kImpliedVolatilityFieldNumber;
const int WarrantData::kDeltaFieldNumber;
const int WarrantData::kEffectiveLeverageFieldNumber;
const int WarrantData::kUpperStrikePriceFieldNumber;
const int WarrantData::kLowerStrikePriceFieldNumber;
const int WarrantData::kInLinePriceStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WarrantData::WarrantData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Qot_5fGetWarrant_2eproto::InitDefaultsWarrantData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Qot_GetWarrant.WarrantData)
}
WarrantData::WarrantData(const WarrantData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  maturitytime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_maturitytime()) {
    maturitytime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.maturitytime_);
  }
  listtime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_listtime()) {
    listtime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.listtime_);
  }
  lasttradetime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_lasttradetime()) {
    lasttradetime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lasttradetime_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_stock()) {
    stock_ = new ::Qot_Common::Security(*from.stock_);
  } else {
    stock_ = NULL;
  }
  if (from.has_owner()) {
    owner_ = new ::Qot_Common::Security(*from.owner_);
  } else {
    owner_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&inlinepricestatus_) -
    reinterpret_cast<char*>(&type_)) + sizeof(inlinepricestatus_));
  // @@protoc_insertion_point(copy_constructor:Qot_GetWarrant.WarrantData)
}

void WarrantData::SharedCtor() {
  maturitytime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  listtime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lasttradetime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&stock_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inlinepricestatus_) -
      reinterpret_cast<char*>(&stock_)) + sizeof(inlinepricestatus_));
  _cached_size_ = 0;
}

WarrantData::~WarrantData() {
  // @@protoc_insertion_point(destructor:Qot_GetWarrant.WarrantData)
  SharedDtor();
}

void WarrantData::SharedDtor() {
  maturitytime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  listtime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lasttradetime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stock_;
  if (this != internal_default_instance()) delete owner_;
}

void WarrantData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WarrantData::descriptor() {
  ::protobuf_Qot_5fGetWarrant_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Qot_5fGetWarrant_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WarrantData& WarrantData::default_instance() {
  ::protobuf_Qot_5fGetWarrant_2eproto::InitDefaultsWarrantData();
  return *internal_default_instance();
}

WarrantData* WarrantData::New(::google::protobuf::Arena* arena) const {
  WarrantData* n = new WarrantData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WarrantData::Clear() {
// @@protoc_insertion_point(message_clear_start:Qot_GetWarrant.WarrantData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!maturitytime_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*maturitytime_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!listtime_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*listtime_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!lasttradetime_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*lasttradetime_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(stock_ != NULL);
      stock_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(owner_ != NULL);
      owner_->Clear();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&issuer_) -
        reinterpret_cast<char*>(&type_)) + sizeof(issuer_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&maturitytimestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lotsize_) -
        reinterpret_cast<char*>(&maturitytimestamp_)) + sizeof(lotsize_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&askvol_) -
        reinterpret_cast<char*>(&status_)) + sizeof(askvol_));
  }
  if (cached_has_bits & 4278190080u) {
    ::memset(&volume_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pricerecoveryratio_) -
        reinterpret_cast<char*>(&volume_)) + sizeof(pricerecoveryratio_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 255u) {
    ::memset(&conversionprice_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&impliedvolatility_) -
        reinterpret_cast<char*>(&conversionprice_)) + sizeof(impliedvolatility_));
  }
  if (cached_has_bits & 7936u) {
    ::memset(&delta_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&inlinepricestatus_) -
        reinterpret_cast<char*>(&delta_)) + sizeof(inlinepricestatus_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WarrantData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Qot_GetWarrant.WarrantData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Qot_Common.Security stock = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stock()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .Qot_Common.Security owner = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_owner()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 issuer = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_issuer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &issuer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string maturityTime = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_maturitytime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->maturitytime().data(), static_cast<int>(this->maturitytime().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Qot_GetWarrant.WarrantData.maturityTime");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double maturityTimestamp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_maturitytimestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maturitytimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string listTime = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_listtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->listtime().data(), static_cast<int>(this->listtime().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Qot_GetWarrant.WarrantData.listTime");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double listTimestamp = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_listtimestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &listtimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string lastTradeTime = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lasttradetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lasttradetime().data(), static_cast<int>(this->lasttradetime().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Qot_GetWarrant.WarrantData.lastTradeTime");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lastTradeTimestamp = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_lasttradetimestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lasttradetimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double recoveryPrice = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_recoveryprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &recoveryprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double conversionRatio = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_conversionratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &conversionratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 lotSize = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_lotsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lotsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double strikePrice = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          set_has_strikeprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &strikeprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double lastClosePrice = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {
          set_has_lastcloseprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lastcloseprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Qot_GetWarrant.WarrantData.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double curPrice = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {
          set_has_curprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &curprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double priceChangeVal = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {
          set_has_pricechangeval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pricechangeval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double changeRate = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u /* 153 & 0xFF */)) {
          set_has_changerate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &changerate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 status = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double bidPrice = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u /* 169 & 0xFF */)) {
          set_has_bidprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double askPrice = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(177u /* 177 & 0xFF */)) {
          set_has_askprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 bidVol = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_bidvol();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bidvol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 askVol = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_askvol();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &askvol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 volume = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double turnover = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(209u /* 209 & 0xFF */)) {
          set_has_turnover();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &turnover_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double score = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(217u /* 217 & 0xFF */)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double premium = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(225u /* 225 & 0xFF */)) {
          set_has_premium();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &premium_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double breakEvenPoint = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(233u /* 233 & 0xFF */)) {
          set_has_breakevenpoint();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &breakevenpoint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double leverage = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(241u /* 241 & 0xFF */)) {
          set_has_leverage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &leverage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double ipop = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(249u /* 249 & 0xFF */)) {
          set_has_ipop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ipop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double priceRecoveryRatio = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1u /* 257 & 0xFF */)) {
          set_has_pricerecoveryratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pricerecoveryratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double conversionPrice = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 265 & 0xFF */)) {
          set_has_conversionprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &conversionprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double streetRate = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 273 & 0xFF */)) {
          set_has_streetrate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &streetrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 streetVol = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 280 & 0xFF */)) {
          set_has_streetvol();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &streetvol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double amplitude = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 289 & 0xFF */)) {
          set_has_amplitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &amplitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 issueSize = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 296 & 0xFF */)) {
          set_has_issuesize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &issuesize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double highPrice = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 313 & 0xFF */)) {
          set_has_highprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &highprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double lowPrice = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 321 & 0xFF */)) {
          set_has_lowprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lowprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double impliedVolatility = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 329 & 0xFF */)) {
          set_has_impliedvolatility();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &impliedvolatility_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double delta = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 337 & 0xFF */)) {
          set_has_delta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double effectiveLeverage = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 345 & 0xFF */)) {
          set_has_effectiveleverage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &effectiveleverage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double upperStrikePrice = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 353 & 0xFF */)) {
          set_has_upperstrikeprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &upperstrikeprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lowerStrikePrice = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 361 & 0xFF */)) {
          set_has_lowerstrikeprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lowerstrikeprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 inLinePriceStatus = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 368 & 0xFF */)) {
          set_has_inlinepricestatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inlinepricestatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Qot_GetWarrant.WarrantData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Qot_GetWarrant.WarrantData)
  return false;
#undef DO_
}

void WarrantData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Qot_GetWarrant.WarrantData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Qot_Common.Security stock = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->stock_, output);
  }

  // required .Qot_Common.Security owner = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->owner_, output);
  }

  // required int32 type = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // required int32 issuer = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->issuer(), output);
  }

  // required string maturityTime = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->maturitytime().data(), static_cast<int>(this->maturitytime().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Qot_GetWarrant.WarrantData.maturityTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->maturitytime(), output);
  }

  // optional double maturityTimestamp = 6;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->maturitytimestamp(), output);
  }

  // required string listTime = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->listtime().data(), static_cast<int>(this->listtime().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Qot_GetWarrant.WarrantData.listTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->listtime(), output);
  }

  // optional double listTimestamp = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->listtimestamp(), output);
  }

  // required string lastTradeTime = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lasttradetime().data(), static_cast<int>(this->lasttradetime().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Qot_GetWarrant.WarrantData.lastTradeTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->lasttradetime(), output);
  }

  // optional double lastTradeTimestamp = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->lasttradetimestamp(), output);
  }

  // optional double recoveryPrice = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->recoveryprice(), output);
  }

  // required double conversionRatio = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->conversionratio(), output);
  }

  // required int32 lotSize = 13;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->lotsize(), output);
  }

  // required double strikePrice = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->strikeprice(), output);
  }

  // required double lastClosePrice = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->lastcloseprice(), output);
  }

  // required string name = 16;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Qot_GetWarrant.WarrantData.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->name(), output);
  }

  // required double curPrice = 17;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->curprice(), output);
  }

  // required double priceChangeVal = 18;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->pricechangeval(), output);
  }

  // required double changeRate = 19;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->changerate(), output);
  }

  // required int32 status = 20;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->status(), output);
  }

  // required double bidPrice = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->bidprice(), output);
  }

  // required double askPrice = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->askprice(), output);
  }

  // required int64 bidVol = 23;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->bidvol(), output);
  }

  // required int64 askVol = 24;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(24, this->askvol(), output);
  }

  // required int64 volume = 25;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(25, this->volume(), output);
  }

  // required double turnover = 26;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->turnover(), output);
  }

  // required double score = 27;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->score(), output);
  }

  // required double premium = 28;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->premium(), output);
  }

  // required double breakEvenPoint = 29;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->breakevenpoint(), output);
  }

  // required double leverage = 30;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->leverage(), output);
  }

  // required double ipop = 31;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->ipop(), output);
  }

  // optional double priceRecoveryRatio = 32;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->pricerecoveryratio(), output);
  }

  cached_has_bits = _has_bits_[1];
  // required double conversionPrice = 33;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->conversionprice(), output);
  }

  // required double streetRate = 34;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(34, this->streetrate(), output);
  }

  // required int64 streetVol = 35;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(35, this->streetvol(), output);
  }

  // required double amplitude = 36;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(36, this->amplitude(), output);
  }

  // required int64 issueSize = 37;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(37, this->issuesize(), output);
  }

  // required double highPrice = 39;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(39, this->highprice(), output);
  }

  // required double lowPrice = 40;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(40, this->lowprice(), output);
  }

  // optional double impliedVolatility = 41;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(41, this->impliedvolatility(), output);
  }

  // optional double delta = 42;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(42, this->delta(), output);
  }

  // required double effectiveLeverage = 43;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(43, this->effectiveleverage(), output);
  }

  // optional double upperStrikePrice = 44;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(44, this->upperstrikeprice(), output);
  }

  // optional double lowerStrikePrice = 45;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(45, this->lowerstrikeprice(), output);
  }

  // optional int32 inLinePriceStatus = 46;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(46, this->inlinepricestatus(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Qot_GetWarrant.WarrantData)
}

::google::protobuf::uint8* WarrantData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Qot_GetWarrant.WarrantData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Qot_Common.Security stock = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->stock_, deterministic, target);
  }

  // required .Qot_Common.Security owner = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->owner_, deterministic, target);
  }

  // required int32 type = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // required int32 issuer = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->issuer(), target);
  }

  // required string maturityTime = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->maturitytime().data(), static_cast<int>(this->maturitytime().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Qot_GetWarrant.WarrantData.maturityTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->maturitytime(), target);
  }

  // optional double maturityTimestamp = 6;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->maturitytimestamp(), target);
  }

  // required string listTime = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->listtime().data(), static_cast<int>(this->listtime().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Qot_GetWarrant.WarrantData.listTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->listtime(), target);
  }

  // optional double listTimestamp = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->listtimestamp(), target);
  }

  // required string lastTradeTime = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lasttradetime().data(), static_cast<int>(this->lasttradetime().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Qot_GetWarrant.WarrantData.lastTradeTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->lasttradetime(), target);
  }

  // optional double lastTradeTimestamp = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->lasttradetimestamp(), target);
  }

  // optional double recoveryPrice = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->recoveryprice(), target);
  }

  // required double conversionRatio = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->conversionratio(), target);
  }

  // required int32 lotSize = 13;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->lotsize(), target);
  }

  // required double strikePrice = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->strikeprice(), target);
  }

  // required double lastClosePrice = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->lastcloseprice(), target);
  }

  // required string name = 16;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Qot_GetWarrant.WarrantData.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->name(), target);
  }

  // required double curPrice = 17;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->curprice(), target);
  }

  // required double priceChangeVal = 18;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->pricechangeval(), target);
  }

  // required double changeRate = 19;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->changerate(), target);
  }

  // required int32 status = 20;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->status(), target);
  }

  // required double bidPrice = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->bidprice(), target);
  }

  // required double askPrice = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->askprice(), target);
  }

  // required int64 bidVol = 23;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(23, this->bidvol(), target);
  }

  // required int64 askVol = 24;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(24, this->askvol(), target);
  }

  // required int64 volume = 25;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(25, this->volume(), target);
  }

  // required double turnover = 26;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->turnover(), target);
  }

  // required double score = 27;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->score(), target);
  }

  // required double premium = 28;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->premium(), target);
  }

  // required double breakEvenPoint = 29;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->breakevenpoint(), target);
  }

  // required double leverage = 30;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->leverage(), target);
  }

  // required double ipop = 31;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->ipop(), target);
  }

  // optional double priceRecoveryRatio = 32;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->pricerecoveryratio(), target);
  }

  cached_has_bits = _has_bits_[1];
  // required double conversionPrice = 33;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->conversionprice(), target);
  }

  // required double streetRate = 34;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(34, this->streetrate(), target);
  }

  // required int64 streetVol = 35;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(35, this->streetvol(), target);
  }

  // required double amplitude = 36;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(36, this->amplitude(), target);
  }

  // required int64 issueSize = 37;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(37, this->issuesize(), target);
  }

  // required double highPrice = 39;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(39, this->highprice(), target);
  }

  // required double lowPrice = 40;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(40, this->lowprice(), target);
  }

  // optional double impliedVolatility = 41;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(41, this->impliedvolatility(), target);
  }

  // optional double delta = 42;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(42, this->delta(), target);
  }

  // required double effectiveLeverage = 43;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(43, this->effectiveleverage(), target);
  }

  // optional double upperStrikePrice = 44;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(44, this->upperstrikeprice(), target);
  }

  // optional double lowerStrikePrice = 45;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(45, this->lowerstrikeprice(), target);
  }

  // optional int32 inLinePriceStatus = 46;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(46, this->inlinepricestatus(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Qot_GetWarrant.WarrantData)
  return target;
}

size_t WarrantData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Qot_GetWarrant.WarrantData)
  size_t total_size = 0;

  if (has_maturitytime()) {
    // required string maturityTime = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->maturitytime());
  }

  if (has_listtime()) {
    // required string listTime = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->listtime());
  }

  if (has_lasttradetime()) {
    // required string lastTradeTime = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lasttradetime());
  }

  if (has_name()) {
    // required string name = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_stock()) {
    // required .Qot_Common.Security stock = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->stock_);
  }

  if (has_owner()) {
    // required .Qot_Common.Security owner = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->owner_);
  }

  if (has_type()) {
    // required int32 type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_issuer()) {
    // required int32 issuer = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->issuer());
  }

  if (has_conversionratio()) {
    // required double conversionRatio = 12;
    total_size += 1 + 8;
  }

  if (has_strikeprice()) {
    // required double strikePrice = 14;
    total_size += 1 + 8;
  }

  if (has_lastcloseprice()) {
    // required double lastClosePrice = 15;
    total_size += 1 + 8;
  }

  if (has_lotsize()) {
    // required int32 lotSize = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lotsize());
  }

  if (has_status()) {
    // required int32 status = 20;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  if (has_curprice()) {
    // required double curPrice = 17;
    total_size += 2 + 8;
  }

  if (has_pricechangeval()) {
    // required double priceChangeVal = 18;
    total_size += 2 + 8;
  }

  if (has_changerate()) {
    // required double changeRate = 19;
    total_size += 2 + 8;
  }

  if (has_bidprice()) {
    // required double bidPrice = 21;
    total_size += 2 + 8;
  }

  if (has_askprice()) {
    // required double askPrice = 22;
    total_size += 2 + 8;
  }

  if (has_bidvol()) {
    // required int64 bidVol = 23;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bidvol());
  }

  if (has_askvol()) {
    // required int64 askVol = 24;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->askvol());
  }

  if (has_volume()) {
    // required int64 volume = 25;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->volume());
  }

  if (has_turnover()) {
    // required double turnover = 26;
    total_size += 2 + 8;
  }

  if (has_score()) {
    // required double score = 27;
    total_size += 2 + 8;
  }

  if (has_premium()) {
    // required double premium = 28;
    total_size += 2 + 8;
  }

  if (has_breakevenpoint()) {
    // required double breakEvenPoint = 29;
    total_size += 2 + 8;
  }

  if (has_leverage()) {
    // required double leverage = 30;
    total_size += 2 + 8;
  }

  if (has_ipop()) {
    // required double ipop = 31;
    total_size += 2 + 8;
  }

  if (has_conversionprice()) {
    // required double conversionPrice = 33;
    total_size += 2 + 8;
  }

  if (has_streetrate()) {
    // required double streetRate = 34;
    total_size += 2 + 8;
  }

  if (has_streetvol()) {
    // required int64 streetVol = 35;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->streetvol());
  }

  if (has_amplitude()) {
    // required double amplitude = 36;
    total_size += 2 + 8;
  }

  if (has_issuesize()) {
    // required int64 issueSize = 37;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->issuesize());
  }

  if (has_highprice()) {
    // required double highPrice = 39;
    total_size += 2 + 8;
  }

  if (has_lowprice()) {
    // required double lowPrice = 40;
    total_size += 2 + 8;
  }

  if (has_effectiveleverage()) {
    // required double effectiveLeverage = 43;
    total_size += 2 + 8;
  }

  return total_size;
}
size_t WarrantData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Qot_GetWarrant.WarrantData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if ((((_has_bits_[0] & 0x7ffff0ff) ^ 0x7ffff0ff)
         | ((_has_bits_[1] & 0x0000027f) ^ 0x0000027f)) == 0) {  // All required fields are present.
    // required string maturityTime = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->maturitytime());

    // required string listTime = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->listtime());

    // required string lastTradeTime = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lasttradetime());

    // required string name = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required .Qot_Common.Security stock = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->stock_);

    // required .Qot_Common.Security owner = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->owner_);

    // required int32 type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 issuer = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->issuer());

    // required double conversionRatio = 12;
    total_size += 1 + 8;

    // required double strikePrice = 14;
    total_size += 1 + 8;

    // required double lastClosePrice = 15;
    total_size += 1 + 8;

    // required int32 lotSize = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lotsize());

    // required int32 status = 20;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());

    // required double curPrice = 17;
    total_size += 2 + 8;

    // required double priceChangeVal = 18;
    total_size += 2 + 8;

    // required double changeRate = 19;
    total_size += 2 + 8;

    // required double bidPrice = 21;
    total_size += 2 + 8;

    // required double askPrice = 22;
    total_size += 2 + 8;

    // required int64 bidVol = 23;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bidvol());

    // required int64 askVol = 24;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->askvol());

    // required int64 volume = 25;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->volume());

    // required double turnover = 26;
    total_size += 2 + 8;

    // required double score = 27;
    total_size += 2 + 8;

    // required double premium = 28;
    total_size += 2 + 8;

    // required double breakEvenPoint = 29;
    total_size += 2 + 8;

    // required double leverage = 30;
    total_size += 2 + 8;

    // required double ipop = 31;
    total_size += 2 + 8;

    // required double conversionPrice = 33;
    total_size += 2 + 8;

    // required double streetRate = 34;
    total_size += 2 + 8;

    // required int64 streetVol = 35;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->streetvol());

    // required double amplitude = 36;
    total_size += 2 + 8;

    // required int64 issueSize = 37;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->issuesize());

    // required double highPrice = 39;
    total_size += 2 + 8;

    // required double lowPrice = 40;
    total_size += 2 + 8;

    // required double effectiveLeverage = 43;
    total_size += 2 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional double maturityTimestamp = 6;
    if (has_maturitytimestamp()) {
      total_size += 1 + 8;
    }

    // optional double listTimestamp = 8;
    if (has_listtimestamp()) {
      total_size += 1 + 8;
    }

    // optional double lastTradeTimestamp = 10;
    if (has_lasttradetimestamp()) {
      total_size += 1 + 8;
    }

    // optional double recoveryPrice = 11;
    if (has_recoveryprice()) {
      total_size += 1 + 8;
    }

  }
  // optional double priceRecoveryRatio = 32;
  if (has_pricerecoveryratio()) {
    total_size += 2 + 8;
  }

  // optional double impliedVolatility = 41;
  if (has_impliedvolatility()) {
    total_size += 2 + 8;
  }

  // optional double delta = 42;
  if (has_delta()) {
    total_size += 2 + 8;
  }

  if (_has_bits_[40 / 32] & 7168u) {
    // optional double upperStrikePrice = 44;
    if (has_upperstrikeprice()) {
      total_size += 2 + 8;
    }

    // optional double lowerStrikePrice = 45;
    if (has_lowerstrikeprice()) {
      total_size += 2 + 8;
    }

    // optional int32 inLinePriceStatus = 46;
    if (has_inlinepricestatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inlinepricestatus());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WarrantData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Qot_GetWarrant.WarrantData)
  GOOGLE_DCHECK_NE(&from, this);
  const WarrantData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WarrantData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Qot_GetWarrant.WarrantData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Qot_GetWarrant.WarrantData)
    MergeFrom(*source);
  }
}

void WarrantData::MergeFrom(const WarrantData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Qot_GetWarrant.WarrantData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_maturitytime();
      maturitytime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.maturitytime_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_listtime();
      listtime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.listtime_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_lasttradetime();
      lasttradetime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lasttradetime_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_stock()->::Qot_Common::Security::MergeFrom(from.stock());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_owner()->::Qot_Common::Security::MergeFrom(from.owner());
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000080u) {
      issuer_ = from.issuer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      maturitytimestamp_ = from.maturitytimestamp_;
    }
    if (cached_has_bits & 0x00000200u) {
      listtimestamp_ = from.listtimestamp_;
    }
    if (cached_has_bits & 0x00000400u) {
      lasttradetimestamp_ = from.lasttradetimestamp_;
    }
    if (cached_has_bits & 0x00000800u) {
      recoveryprice_ = from.recoveryprice_;
    }
    if (cached_has_bits & 0x00001000u) {
      conversionratio_ = from.conversionratio_;
    }
    if (cached_has_bits & 0x00002000u) {
      strikeprice_ = from.strikeprice_;
    }
    if (cached_has_bits & 0x00004000u) {
      lastcloseprice_ = from.lastcloseprice_;
    }
    if (cached_has_bits & 0x00008000u) {
      lotsize_ = from.lotsize_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00020000u) {
      curprice_ = from.curprice_;
    }
    if (cached_has_bits & 0x00040000u) {
      pricechangeval_ = from.pricechangeval_;
    }
    if (cached_has_bits & 0x00080000u) {
      changerate_ = from.changerate_;
    }
    if (cached_has_bits & 0x00100000u) {
      bidprice_ = from.bidprice_;
    }
    if (cached_has_bits & 0x00200000u) {
      askprice_ = from.askprice_;
    }
    if (cached_has_bits & 0x00400000u) {
      bidvol_ = from.bidvol_;
    }
    if (cached_has_bits & 0x00800000u) {
      askvol_ = from.askvol_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      volume_ = from.volume_;
    }
    if (cached_has_bits & 0x02000000u) {
      turnover_ = from.turnover_;
    }
    if (cached_has_bits & 0x04000000u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x08000000u) {
      premium_ = from.premium_;
    }
    if (cached_has_bits & 0x10000000u) {
      breakevenpoint_ = from.breakevenpoint_;
    }
    if (cached_has_bits & 0x20000000u) {
      leverage_ = from.leverage_;
    }
    if (cached_has_bits & 0x40000000u) {
      ipop_ = from.ipop_;
    }
    if (cached_has_bits & 0x80000000u) {
      pricerecoveryratio_ = from.pricerecoveryratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      conversionprice_ = from.conversionprice_;
    }
    if (cached_has_bits & 0x00000002u) {
      streetrate_ = from.streetrate_;
    }
    if (cached_has_bits & 0x00000004u) {
      streetvol_ = from.streetvol_;
    }
    if (cached_has_bits & 0x00000008u) {
      amplitude_ = from.amplitude_;
    }
    if (cached_has_bits & 0x00000010u) {
      issuesize_ = from.issuesize_;
    }
    if (cached_has_bits & 0x00000020u) {
      highprice_ = from.highprice_;
    }
    if (cached_has_bits & 0x00000040u) {
      lowprice_ = from.lowprice_;
    }
    if (cached_has_bits & 0x00000080u) {
      impliedvolatility_ = from.impliedvolatility_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      delta_ = from.delta_;
    }
    if (cached_has_bits & 0x00000200u) {
      effectiveleverage_ = from.effectiveleverage_;
    }
    if (cached_has_bits & 0x00000400u) {
      upperstrikeprice_ = from.upperstrikeprice_;
    }
    if (cached_has_bits & 0x00000800u) {
      lowerstrikeprice_ = from.lowerstrikeprice_;
    }
    if (cached_has_bits & 0x00001000u) {
      inlinepricestatus_ = from.inlinepricestatus_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void WarrantData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Qot_GetWarrant.WarrantData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarrantData::CopyFrom(const WarrantData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Qot_GetWarrant.WarrantData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarrantData::IsInitialized() const {
  if ((_has_bits_[0] & 0x7ffff0ff) != 0x7ffff0ff) return false;
  if ((_has_bits_[1] & 0x0000027f) != 0x0000027f) return false;
  if (has_stock()) {
    if (!this->stock_->IsInitialized()) return false;
  }
  if (has_owner()) {
    if (!this->owner_->IsInitialized()) return false;
  }
  return true;
}

void WarrantData::Swap(WarrantData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WarrantData::InternalSwap(WarrantData* other) {
  using std::swap;
  maturitytime_.Swap(&other->maturitytime_);
  listtime_.Swap(&other->listtime_);
  lasttradetime_.Swap(&other->lasttradetime_);
  name_.Swap(&other->name_);
  swap(stock_, other->stock_);
  swap(owner_, other->owner_);
  swap(type_, other->type_);
  swap(issuer_, other->issuer_);
  swap(maturitytimestamp_, other->maturitytimestamp_);
  swap(listtimestamp_, other->listtimestamp_);
  swap(lasttradetimestamp_, other->lasttradetimestamp_);
  swap(recoveryprice_, other->recoveryprice_);
  swap(conversionratio_, other->conversionratio_);
  swap(strikeprice_, other->strikeprice_);
  swap(lastcloseprice_, other->lastcloseprice_);
  swap(lotsize_, other->lotsize_);
  swap(status_, other->status_);
  swap(curprice_, other->curprice_);
  swap(pricechangeval_, other->pricechangeval_);
  swap(changerate_, other->changerate_);
  swap(bidprice_, other->bidprice_);
  swap(askprice_, other->askprice_);
  swap(bidvol_, other->bidvol_);
  swap(askvol_, other->askvol_);
  swap(volume_, other->volume_);
  swap(turnover_, other->turnover_);
  swap(score_, other->score_);
  swap(premium_, other->premium_);
  swap(breakevenpoint_, other->breakevenpoint_);
  swap(leverage_, other->leverage_);
  swap(ipop_, other->ipop_);
  swap(pricerecoveryratio_, other->pricerecoveryratio_);
  swap(conversionprice_, other->conversionprice_);
  swap(streetrate_, other->streetrate_);
  swap(streetvol_, other->streetvol_);
  swap(amplitude_, other->amplitude_);
  swap(issuesize_, other->issuesize_);
  swap(highprice_, other->highprice_);
  swap(lowprice_, other->lowprice_);
  swap(impliedvolatility_, other->impliedvolatility_);
  swap(delta_, other->delta_);
  swap(effectiveleverage_, other->effectiveleverage_);
  swap(upperstrikeprice_, other->upperstrikeprice_);
  swap(lowerstrikeprice_, other->lowerstrikeprice_);
  swap(inlinepricestatus_, other->inlinepricestatus_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WarrantData::GetMetadata() const {
  protobuf_Qot_5fGetWarrant_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Qot_5fGetWarrant_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void S2C::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2C::kLastPageFieldNumber;
const int S2C::kAllCountFieldNumber;
const int S2C::kWarrantDataListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2C::S2C()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Qot_5fGetWarrant_2eproto::InitDefaultsS2C();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Qot_GetWarrant.S2C)
}
S2C::S2C(const S2C& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      warrantdatalist_(from.warrantdatalist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lastpage_, &from.lastpage_,
    static_cast<size_t>(reinterpret_cast<char*>(&allcount_) -
    reinterpret_cast<char*>(&lastpage_)) + sizeof(allcount_));
  // @@protoc_insertion_point(copy_constructor:Qot_GetWarrant.S2C)
}

void S2C::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&lastpage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allcount_) -
      reinterpret_cast<char*>(&lastpage_)) + sizeof(allcount_));
}

S2C::~S2C() {
  // @@protoc_insertion_point(destructor:Qot_GetWarrant.S2C)
  SharedDtor();
}

void S2C::SharedDtor() {
}

void S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C::descriptor() {
  ::protobuf_Qot_5fGetWarrant_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Qot_5fGetWarrant_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2C& S2C::default_instance() {
  ::protobuf_Qot_5fGetWarrant_2eproto::InitDefaultsS2C();
  return *internal_default_instance();
}

S2C* S2C::New(::google::protobuf::Arena* arena) const {
  S2C* n = new S2C;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void S2C::Clear() {
// @@protoc_insertion_point(message_clear_start:Qot_GetWarrant.S2C)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  warrantdatalist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&lastpage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&allcount_) -
        reinterpret_cast<char*>(&lastpage_)) + sizeof(allcount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Qot_GetWarrant.S2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool lastPage = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_lastpage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lastpage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 allCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_allcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Qot_GetWarrant.WarrantData warrantDataList = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_warrantdatalist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Qot_GetWarrant.S2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Qot_GetWarrant.S2C)
  return false;
#undef DO_
}

void S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Qot_GetWarrant.S2C)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool lastPage = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->lastpage(), output);
  }

  // required int32 allCount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->allcount(), output);
  }

  // repeated .Qot_GetWarrant.WarrantData warrantDataList = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->warrantdatalist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->warrantdatalist(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Qot_GetWarrant.S2C)
}

::google::protobuf::uint8* S2C::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Qot_GetWarrant.S2C)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool lastPage = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->lastpage(), target);
  }

  // required int32 allCount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->allcount(), target);
  }

  // repeated .Qot_GetWarrant.WarrantData warrantDataList = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->warrantdatalist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->warrantdatalist(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Qot_GetWarrant.S2C)
  return target;
}

size_t S2C::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Qot_GetWarrant.S2C)
  size_t total_size = 0;

  if (has_lastpage()) {
    // required bool lastPage = 1;
    total_size += 1 + 1;
  }

  if (has_allcount()) {
    // required int32 allCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->allcount());
  }

  return total_size;
}
size_t S2C::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Qot_GetWarrant.S2C)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bool lastPage = 1;
    total_size += 1 + 1;

    // required int32 allCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->allcount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .Qot_GetWarrant.WarrantData warrantDataList = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->warrantdatalist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->warrantdatalist(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Qot_GetWarrant.S2C)
  GOOGLE_DCHECK_NE(&from, this);
  const S2C* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2C>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Qot_GetWarrant.S2C)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Qot_GetWarrant.S2C)
    MergeFrom(*source);
  }
}

void S2C::MergeFrom(const S2C& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Qot_GetWarrant.S2C)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  warrantdatalist_.MergeFrom(from.warrantdatalist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      lastpage_ = from.lastpage_;
    }
    if (cached_has_bits & 0x00000002u) {
      allcount_ = from.allcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void S2C::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Qot_GetWarrant.S2C)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C::CopyFrom(const S2C& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Qot_GetWarrant.S2C)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->warrantdatalist())) return false;
  return true;
}

void S2C::Swap(S2C* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2C::InternalSwap(S2C* other) {
  using std::swap;
  warrantdatalist_.InternalSwap(&other->warrantdatalist_);
  swap(lastpage_, other->lastpage_);
  swap(allcount_, other->allcount_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata S2C::GetMetadata() const {
  protobuf_Qot_5fGetWarrant_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Qot_5fGetWarrant_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Request::InitAsDefaultInstance() {
  ::Qot_GetWarrant::_Request_default_instance_._instance.get_mutable()->c2s_ = const_cast< ::Qot_GetWarrant::C2S*>(
      ::Qot_GetWarrant::C2S::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kC2SFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Qot_5fGetWarrant_2eproto::InitDefaultsRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Qot_GetWarrant.Request)
}
Request::Request(const Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_c2s()) {
    c2s_ = new ::Qot_GetWarrant::C2S(*from.c2s_);
  } else {
    c2s_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Qot_GetWarrant.Request)
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  c2s_ = NULL;
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:Qot_GetWarrant.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (this != internal_default_instance()) delete c2s_;
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  ::protobuf_Qot_5fGetWarrant_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Qot_5fGetWarrant_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Request& Request::default_instance() {
  ::protobuf_Qot_5fGetWarrant_2eproto::InitDefaultsRequest();
  return *internal_default_instance();
}

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Qot_GetWarrant.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(c2s_ != NULL);
    c2s_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Qot_GetWarrant.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Qot_GetWarrant.C2S c2s = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_c2s()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Qot_GetWarrant.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Qot_GetWarrant.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Qot_GetWarrant.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Qot_GetWarrant.C2S c2s = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->c2s_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Qot_GetWarrant.Request)
}

::google::protobuf::uint8* Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Qot_GetWarrant.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Qot_GetWarrant.C2S c2s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->c2s_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Qot_GetWarrant.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Qot_GetWarrant.Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .Qot_GetWarrant.C2S c2s = 1;
  if (has_c2s()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->c2s_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Qot_GetWarrant.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Qot_GetWarrant.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Qot_GetWarrant.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Qot_GetWarrant.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_c2s()) {
    mutable_c2s()->::Qot_GetWarrant::C2S::MergeFrom(from.c2s());
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Qot_GetWarrant.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Qot_GetWarrant.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_c2s()) {
    if (!this->c2s_->IsInitialized()) return false;
  }
  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  using std::swap;
  swap(c2s_, other->c2s_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_Qot_5fGetWarrant_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Qot_5fGetWarrant_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Response::InitAsDefaultInstance() {
  ::Qot_GetWarrant::_Response_default_instance_._instance.get_mutable()->s2c_ = const_cast< ::Qot_GetWarrant::S2C*>(
      ::Qot_GetWarrant::S2C::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kRetTypeFieldNumber;
const int Response::kRetMsgFieldNumber;
const int Response::kErrCodeFieldNumber;
const int Response::kS2CFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Qot_5fGetWarrant_2eproto::InitDefaultsResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Qot_GetWarrant.Response)
}
Response::Response(const Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_retmsg()) {
    retmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.retmsg_);
  }
  if (from.has_s2c()) {
    s2c_ = new ::Qot_GetWarrant::S2C(*from.s2c_);
  } else {
    s2c_ = NULL;
  }
  ::memcpy(&errcode_, &from.errcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&rettype_) -
    reinterpret_cast<char*>(&errcode_)) + sizeof(rettype_));
  // @@protoc_insertion_point(copy_constructor:Qot_GetWarrant.Response)
}

void Response::SharedCtor() {
  _cached_size_ = 0;
  retmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&s2c_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errcode_) -
      reinterpret_cast<char*>(&s2c_)) + sizeof(errcode_));
  rettype_ = -400;
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:Qot_GetWarrant.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  retmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete s2c_;
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  ::protobuf_Qot_5fGetWarrant_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Qot_5fGetWarrant_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Response& Response::default_instance() {
  ::protobuf_Qot_5fGetWarrant_2eproto::InitDefaultsResponse();
  return *internal_default_instance();
}

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Qot_GetWarrant.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!retmsg_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*retmsg_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(s2c_ != NULL);
      s2c_->Clear();
    }
  }
  if (cached_has_bits & 12u) {
    errcode_ = 0;
    rettype_ = -400;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Qot_GetWarrant.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retType = 1 [default = -400];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_rettype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rettype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string retMsg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->retmsg().data(), static_cast<int>(this->retmsg().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Qot_GetWarrant.Response.retMsg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 errCode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_errcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Qot_GetWarrant.S2C s2c = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_s2c()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Qot_GetWarrant.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Qot_GetWarrant.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Qot_GetWarrant.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 retType = 1 [default = -400];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rettype(), output);
  }

  // optional string retMsg = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retmsg().data(), static_cast<int>(this->retmsg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Qot_GetWarrant.Response.retMsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->retmsg(), output);
  }

  // optional int32 errCode = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->errcode(), output);
  }

  // optional .Qot_GetWarrant.S2C s2c = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->s2c_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Qot_GetWarrant.Response)
}

::google::protobuf::uint8* Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Qot_GetWarrant.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 retType = 1 [default = -400];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rettype(), target);
  }

  // optional string retMsg = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retmsg().data(), static_cast<int>(this->retmsg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Qot_GetWarrant.Response.retMsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->retmsg(), target);
  }

  // optional int32 errCode = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->errcode(), target);
  }

  // optional .Qot_GetWarrant.S2C s2c = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->s2c_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Qot_GetWarrant.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Qot_GetWarrant.Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 retType = 1 [default = -400];
  if (has_rettype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rettype());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string retMsg = 2;
    if (has_retmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->retmsg());
    }

    // optional .Qot_GetWarrant.S2C s2c = 4;
    if (has_s2c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->s2c_);
    }

    // optional int32 errCode = 3;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errcode());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Qot_GetWarrant.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Qot_GetWarrant.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Qot_GetWarrant.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Qot_GetWarrant.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_retmsg();
      retmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.retmsg_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_s2c()->::Qot_GetWarrant::S2C::MergeFrom(from.s2c());
    }
    if (cached_has_bits & 0x00000004u) {
      errcode_ = from.errcode_;
    }
    if (cached_has_bits & 0x00000008u) {
      rettype_ = from.rettype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Qot_GetWarrant.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Qot_GetWarrant.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  if (has_s2c()) {
    if (!this->s2c_->IsInitialized()) return false;
  }
  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  using std::swap;
  retmsg_.Swap(&other->retmsg_);
  swap(s2c_, other->s2c_);
  swap(errcode_, other->errcode_);
  swap(rettype_, other->rettype_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_Qot_5fGetWarrant_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Qot_5fGetWarrant_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Qot_GetWarrant

// @@protoc_insertion_point(global_scope)
