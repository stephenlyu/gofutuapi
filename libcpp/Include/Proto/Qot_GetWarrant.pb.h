// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Qot_GetWarrant.proto

#ifndef PROTOBUF_Qot_5fGetWarrant_2eproto__INCLUDED
#define PROTOBUF_Qot_5fGetWarrant_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Common.pb.h"
#include "Qot_Common.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_Qot_5fGetWarrant_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsC2SImpl();
void InitDefaultsC2S();
void InitDefaultsWarrantDataImpl();
void InitDefaultsWarrantData();
void InitDefaultsS2CImpl();
void InitDefaultsS2C();
void InitDefaultsRequestImpl();
void InitDefaultsRequest();
void InitDefaultsResponseImpl();
void InitDefaultsResponse();
inline void InitDefaults() {
  InitDefaultsC2S();
  InitDefaultsWarrantData();
  InitDefaultsS2C();
  InitDefaultsRequest();
  InitDefaultsResponse();
}
}  // namespace protobuf_Qot_5fGetWarrant_2eproto
namespace Qot_GetWarrant {
class C2S;
class C2SDefaultTypeInternal;
extern C2SDefaultTypeInternal _C2S_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class S2C;
class S2CDefaultTypeInternal;
extern S2CDefaultTypeInternal _S2C_default_instance_;
class WarrantData;
class WarrantDataDefaultTypeInternal;
extern WarrantDataDefaultTypeInternal _WarrantData_default_instance_;
}  // namespace Qot_GetWarrant
namespace Qot_GetWarrant {

// ===================================================================

class C2S : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_GetWarrant.C2S) */ {
 public:
  C2S();
  virtual ~C2S();

  C2S(const C2S& from);

  inline C2S& operator=(const C2S& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  C2S(C2S&& from) noexcept
    : C2S() {
    *this = ::std::move(from);
  }

  inline C2S& operator=(C2S&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2S& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2S* internal_default_instance() {
    return reinterpret_cast<const C2S*>(
               &_C2S_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(C2S* other);
  friend void swap(C2S& a, C2S& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline C2S* New() const PROTOBUF_FINAL { return New(NULL); }

  C2S* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const C2S& from);
  void MergeFrom(const C2S& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(C2S* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 typeList = 6;
  int typelist_size() const;
  void clear_typelist();
  static const int kTypeListFieldNumber = 6;
  ::google::protobuf::int32 typelist(int index) const;
  void set_typelist(int index, ::google::protobuf::int32 value);
  void add_typelist(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      typelist() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_typelist();

  // repeated int32 issuerList = 7;
  int issuerlist_size() const;
  void clear_issuerlist();
  static const int kIssuerListFieldNumber = 7;
  ::google::protobuf::int32 issuerlist(int index) const;
  void set_issuerlist(int index, ::google::protobuf::int32 value);
  void add_issuerlist(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      issuerlist() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_issuerlist();

  // optional string maturityTimeMin = 8;
  bool has_maturitytimemin() const;
  void clear_maturitytimemin();
  static const int kMaturityTimeMinFieldNumber = 8;
  const ::std::string& maturitytimemin() const;
  void set_maturitytimemin(const ::std::string& value);
  #if LANG_CXX11
  void set_maturitytimemin(::std::string&& value);
  #endif
  void set_maturitytimemin(const char* value);
  void set_maturitytimemin(const char* value, size_t size);
  ::std::string* mutable_maturitytimemin();
  ::std::string* release_maturitytimemin();
  void set_allocated_maturitytimemin(::std::string* maturitytimemin);

  // optional string maturityTimeMax = 9;
  bool has_maturitytimemax() const;
  void clear_maturitytimemax();
  static const int kMaturityTimeMaxFieldNumber = 9;
  const ::std::string& maturitytimemax() const;
  void set_maturitytimemax(const ::std::string& value);
  #if LANG_CXX11
  void set_maturitytimemax(::std::string&& value);
  #endif
  void set_maturitytimemax(const char* value);
  void set_maturitytimemax(const char* value, size_t size);
  ::std::string* mutable_maturitytimemax();
  ::std::string* release_maturitytimemax();
  void set_allocated_maturitytimemax(::std::string* maturitytimemax);

  // optional .Qot_Common.Security owner = 5;
  bool has_owner() const;
  void clear_owner();
  static const int kOwnerFieldNumber = 5;
  const ::Qot_Common::Security& owner() const;
  ::Qot_Common::Security* release_owner();
  ::Qot_Common::Security* mutable_owner();
  void set_allocated_owner(::Qot_Common::Security* owner);

  // required int32 begin = 1;
  bool has_begin() const;
  void clear_begin();
  static const int kBeginFieldNumber = 1;
  ::google::protobuf::int32 begin() const;
  void set_begin(::google::protobuf::int32 value);

  // required int32 num = 2;
  bool has_num() const;
  void clear_num();
  static const int kNumFieldNumber = 2;
  ::google::protobuf::int32 num() const;
  void set_num(::google::protobuf::int32 value);

  // required int32 sortField = 3;
  bool has_sortfield() const;
  void clear_sortfield();
  static const int kSortFieldFieldNumber = 3;
  ::google::protobuf::int32 sortfield() const;
  void set_sortfield(::google::protobuf::int32 value);

  // required bool ascend = 4;
  bool has_ascend() const;
  void clear_ascend();
  static const int kAscendFieldNumber = 4;
  bool ascend() const;
  void set_ascend(bool value);

  // optional int32 ipoPeriod = 10;
  bool has_ipoperiod() const;
  void clear_ipoperiod();
  static const int kIpoPeriodFieldNumber = 10;
  ::google::protobuf::int32 ipoperiod() const;
  void set_ipoperiod(::google::protobuf::int32 value);

  // optional int32 priceType = 11;
  bool has_pricetype() const;
  void clear_pricetype();
  static const int kPriceTypeFieldNumber = 11;
  ::google::protobuf::int32 pricetype() const;
  void set_pricetype(::google::protobuf::int32 value);

  // optional double curPriceMin = 13;
  bool has_curpricemin() const;
  void clear_curpricemin();
  static const int kCurPriceMinFieldNumber = 13;
  double curpricemin() const;
  void set_curpricemin(double value);

  // optional double curPriceMax = 14;
  bool has_curpricemax() const;
  void clear_curpricemax();
  static const int kCurPriceMaxFieldNumber = 14;
  double curpricemax() const;
  void set_curpricemax(double value);

  // optional double strikePriceMin = 15;
  bool has_strikepricemin() const;
  void clear_strikepricemin();
  static const int kStrikePriceMinFieldNumber = 15;
  double strikepricemin() const;
  void set_strikepricemin(double value);

  // optional double strikePriceMax = 16;
  bool has_strikepricemax() const;
  void clear_strikepricemax();
  static const int kStrikePriceMaxFieldNumber = 16;
  double strikepricemax() const;
  void set_strikepricemax(double value);

  // optional double streetMin = 17;
  bool has_streetmin() const;
  void clear_streetmin();
  static const int kStreetMinFieldNumber = 17;
  double streetmin() const;
  void set_streetmin(double value);

  // optional double streetMax = 18;
  bool has_streetmax() const;
  void clear_streetmax();
  static const int kStreetMaxFieldNumber = 18;
  double streetmax() const;
  void set_streetmax(double value);

  // optional double conversionMin = 19;
  bool has_conversionmin() const;
  void clear_conversionmin();
  static const int kConversionMinFieldNumber = 19;
  double conversionmin() const;
  void set_conversionmin(double value);

  // optional double conversionMax = 20;
  bool has_conversionmax() const;
  void clear_conversionmax();
  static const int kConversionMaxFieldNumber = 20;
  double conversionmax() const;
  void set_conversionmax(double value);

  // optional uint64 volMin = 21;
  bool has_volmin() const;
  void clear_volmin();
  static const int kVolMinFieldNumber = 21;
  ::google::protobuf::uint64 volmin() const;
  void set_volmin(::google::protobuf::uint64 value);

  // optional uint64 volMax = 22;
  bool has_volmax() const;
  void clear_volmax();
  static const int kVolMaxFieldNumber = 22;
  ::google::protobuf::uint64 volmax() const;
  void set_volmax(::google::protobuf::uint64 value);

  // optional double premiumMin = 23;
  bool has_premiummin() const;
  void clear_premiummin();
  static const int kPremiumMinFieldNumber = 23;
  double premiummin() const;
  void set_premiummin(double value);

  // optional double premiumMax = 24;
  bool has_premiummax() const;
  void clear_premiummax();
  static const int kPremiumMaxFieldNumber = 24;
  double premiummax() const;
  void set_premiummax(double value);

  // optional double leverageRatioMin = 25;
  bool has_leverageratiomin() const;
  void clear_leverageratiomin();
  static const int kLeverageRatioMinFieldNumber = 25;
  double leverageratiomin() const;
  void set_leverageratiomin(double value);

  // optional double leverageRatioMax = 26;
  bool has_leverageratiomax() const;
  void clear_leverageratiomax();
  static const int kLeverageRatioMaxFieldNumber = 26;
  double leverageratiomax() const;
  void set_leverageratiomax(double value);

  // optional double deltaMin = 27;
  bool has_deltamin() const;
  void clear_deltamin();
  static const int kDeltaMinFieldNumber = 27;
  double deltamin() const;
  void set_deltamin(double value);

  // optional double deltaMax = 28;
  bool has_deltamax() const;
  void clear_deltamax();
  static const int kDeltaMaxFieldNumber = 28;
  double deltamax() const;
  void set_deltamax(double value);

  // optional double impliedMin = 29;
  bool has_impliedmin() const;
  void clear_impliedmin();
  static const int kImpliedMinFieldNumber = 29;
  double impliedmin() const;
  void set_impliedmin(double value);

  // optional double impliedMax = 30;
  bool has_impliedmax() const;
  void clear_impliedmax();
  static const int kImpliedMaxFieldNumber = 30;
  double impliedmax() const;
  void set_impliedmax(double value);

  // optional double recoveryPriceMin = 31;
  bool has_recoverypricemin() const;
  void clear_recoverypricemin();
  static const int kRecoveryPriceMinFieldNumber = 31;
  double recoverypricemin() const;
  void set_recoverypricemin(double value);

  // optional double recoveryPriceMax = 32;
  bool has_recoverypricemax() const;
  void clear_recoverypricemax();
  static const int kRecoveryPriceMaxFieldNumber = 32;
  double recoverypricemax() const;
  void set_recoverypricemax(double value);

  // optional double priceRecoveryRatioMin = 33;
  bool has_pricerecoveryratiomin() const;
  void clear_pricerecoveryratiomin();
  static const int kPriceRecoveryRatioMinFieldNumber = 33;
  double pricerecoveryratiomin() const;
  void set_pricerecoveryratiomin(double value);

  // optional double priceRecoveryRatioMax = 34;
  bool has_pricerecoveryratiomax() const;
  void clear_pricerecoveryratiomax();
  static const int kPriceRecoveryRatioMaxFieldNumber = 34;
  double pricerecoveryratiomax() const;
  void set_pricerecoveryratiomax(double value);

  // optional int32 status = 12;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 12;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Qot_GetWarrant.C2S)
 private:
  void set_has_begin();
  void clear_has_begin();
  void set_has_num();
  void clear_has_num();
  void set_has_sortfield();
  void clear_has_sortfield();
  void set_has_ascend();
  void clear_has_ascend();
  void set_has_owner();
  void clear_has_owner();
  void set_has_maturitytimemin();
  void clear_has_maturitytimemin();
  void set_has_maturitytimemax();
  void clear_has_maturitytimemax();
  void set_has_ipoperiod();
  void clear_has_ipoperiod();
  void set_has_pricetype();
  void clear_has_pricetype();
  void set_has_status();
  void clear_has_status();
  void set_has_curpricemin();
  void clear_has_curpricemin();
  void set_has_curpricemax();
  void clear_has_curpricemax();
  void set_has_strikepricemin();
  void clear_has_strikepricemin();
  void set_has_strikepricemax();
  void clear_has_strikepricemax();
  void set_has_streetmin();
  void clear_has_streetmin();
  void set_has_streetmax();
  void clear_has_streetmax();
  void set_has_conversionmin();
  void clear_has_conversionmin();
  void set_has_conversionmax();
  void clear_has_conversionmax();
  void set_has_volmin();
  void clear_has_volmin();
  void set_has_volmax();
  void clear_has_volmax();
  void set_has_premiummin();
  void clear_has_premiummin();
  void set_has_premiummax();
  void clear_has_premiummax();
  void set_has_leverageratiomin();
  void clear_has_leverageratiomin();
  void set_has_leverageratiomax();
  void clear_has_leverageratiomax();
  void set_has_deltamin();
  void clear_has_deltamin();
  void set_has_deltamax();
  void clear_has_deltamax();
  void set_has_impliedmin();
  void clear_has_impliedmin();
  void set_has_impliedmax();
  void clear_has_impliedmax();
  void set_has_recoverypricemin();
  void clear_has_recoverypricemin();
  void set_has_recoverypricemax();
  void clear_has_recoverypricemax();
  void set_has_pricerecoveryratiomin();
  void clear_has_pricerecoveryratiomin();
  void set_has_pricerecoveryratiomax();
  void clear_has_pricerecoveryratiomax();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > typelist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > issuerlist_;
  ::google::protobuf::internal::ArenaStringPtr maturitytimemin_;
  ::google::protobuf::internal::ArenaStringPtr maturitytimemax_;
  ::Qot_Common::Security* owner_;
  ::google::protobuf::int32 begin_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 sortfield_;
  bool ascend_;
  ::google::protobuf::int32 ipoperiod_;
  ::google::protobuf::int32 pricetype_;
  double curpricemin_;
  double curpricemax_;
  double strikepricemin_;
  double strikepricemax_;
  double streetmin_;
  double streetmax_;
  double conversionmin_;
  double conversionmax_;
  ::google::protobuf::uint64 volmin_;
  ::google::protobuf::uint64 volmax_;
  double premiummin_;
  double premiummax_;
  double leverageratiomin_;
  double leverageratiomax_;
  double deltamin_;
  double deltamax_;
  double impliedmin_;
  double impliedmax_;
  double recoverypricemin_;
  double recoverypricemax_;
  double pricerecoveryratiomin_;
  double pricerecoveryratiomax_;
  ::google::protobuf::int32 status_;
  friend struct ::protobuf_Qot_5fGetWarrant_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fGetWarrant_2eproto::InitDefaultsC2SImpl();
};
// -------------------------------------------------------------------

class WarrantData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_GetWarrant.WarrantData) */ {
 public:
  WarrantData();
  virtual ~WarrantData();

  WarrantData(const WarrantData& from);

  inline WarrantData& operator=(const WarrantData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WarrantData(WarrantData&& from) noexcept
    : WarrantData() {
    *this = ::std::move(from);
  }

  inline WarrantData& operator=(WarrantData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WarrantData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WarrantData* internal_default_instance() {
    return reinterpret_cast<const WarrantData*>(
               &_WarrantData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(WarrantData* other);
  friend void swap(WarrantData& a, WarrantData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WarrantData* New() const PROTOBUF_FINAL { return New(NULL); }

  WarrantData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WarrantData& from);
  void MergeFrom(const WarrantData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WarrantData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string maturityTime = 5;
  bool has_maturitytime() const;
  void clear_maturitytime();
  static const int kMaturityTimeFieldNumber = 5;
  const ::std::string& maturitytime() const;
  void set_maturitytime(const ::std::string& value);
  #if LANG_CXX11
  void set_maturitytime(::std::string&& value);
  #endif
  void set_maturitytime(const char* value);
  void set_maturitytime(const char* value, size_t size);
  ::std::string* mutable_maturitytime();
  ::std::string* release_maturitytime();
  void set_allocated_maturitytime(::std::string* maturitytime);

  // required string listTime = 7;
  bool has_listtime() const;
  void clear_listtime();
  static const int kListTimeFieldNumber = 7;
  const ::std::string& listtime() const;
  void set_listtime(const ::std::string& value);
  #if LANG_CXX11
  void set_listtime(::std::string&& value);
  #endif
  void set_listtime(const char* value);
  void set_listtime(const char* value, size_t size);
  ::std::string* mutable_listtime();
  ::std::string* release_listtime();
  void set_allocated_listtime(::std::string* listtime);

  // required string lastTradeTime = 9;
  bool has_lasttradetime() const;
  void clear_lasttradetime();
  static const int kLastTradeTimeFieldNumber = 9;
  const ::std::string& lasttradetime() const;
  void set_lasttradetime(const ::std::string& value);
  #if LANG_CXX11
  void set_lasttradetime(::std::string&& value);
  #endif
  void set_lasttradetime(const char* value);
  void set_lasttradetime(const char* value, size_t size);
  ::std::string* mutable_lasttradetime();
  ::std::string* release_lasttradetime();
  void set_allocated_lasttradetime(::std::string* lasttradetime);

  // required string name = 16;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 16;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required .Qot_Common.Security stock = 1;
  bool has_stock() const;
  void clear_stock();
  static const int kStockFieldNumber = 1;
  const ::Qot_Common::Security& stock() const;
  ::Qot_Common::Security* release_stock();
  ::Qot_Common::Security* mutable_stock();
  void set_allocated_stock(::Qot_Common::Security* stock);

  // required .Qot_Common.Security owner = 2;
  bool has_owner() const;
  void clear_owner();
  static const int kOwnerFieldNumber = 2;
  const ::Qot_Common::Security& owner() const;
  ::Qot_Common::Security* release_owner();
  ::Qot_Common::Security* mutable_owner();
  void set_allocated_owner(::Qot_Common::Security* owner);

  // required int32 type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required int32 issuer = 4;
  bool has_issuer() const;
  void clear_issuer();
  static const int kIssuerFieldNumber = 4;
  ::google::protobuf::int32 issuer() const;
  void set_issuer(::google::protobuf::int32 value);

  // optional double maturityTimestamp = 6;
  bool has_maturitytimestamp() const;
  void clear_maturitytimestamp();
  static const int kMaturityTimestampFieldNumber = 6;
  double maturitytimestamp() const;
  void set_maturitytimestamp(double value);

  // optional double listTimestamp = 8;
  bool has_listtimestamp() const;
  void clear_listtimestamp();
  static const int kListTimestampFieldNumber = 8;
  double listtimestamp() const;
  void set_listtimestamp(double value);

  // optional double lastTradeTimestamp = 10;
  bool has_lasttradetimestamp() const;
  void clear_lasttradetimestamp();
  static const int kLastTradeTimestampFieldNumber = 10;
  double lasttradetimestamp() const;
  void set_lasttradetimestamp(double value);

  // optional double recoveryPrice = 11;
  bool has_recoveryprice() const;
  void clear_recoveryprice();
  static const int kRecoveryPriceFieldNumber = 11;
  double recoveryprice() const;
  void set_recoveryprice(double value);

  // required double conversionRatio = 12;
  bool has_conversionratio() const;
  void clear_conversionratio();
  static const int kConversionRatioFieldNumber = 12;
  double conversionratio() const;
  void set_conversionratio(double value);

  // required double strikePrice = 14;
  bool has_strikeprice() const;
  void clear_strikeprice();
  static const int kStrikePriceFieldNumber = 14;
  double strikeprice() const;
  void set_strikeprice(double value);

  // required double lastClosePrice = 15;
  bool has_lastcloseprice() const;
  void clear_lastcloseprice();
  static const int kLastClosePriceFieldNumber = 15;
  double lastcloseprice() const;
  void set_lastcloseprice(double value);

  // required int32 lotSize = 13;
  bool has_lotsize() const;
  void clear_lotsize();
  static const int kLotSizeFieldNumber = 13;
  ::google::protobuf::int32 lotsize() const;
  void set_lotsize(::google::protobuf::int32 value);

  // required int32 status = 20;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 20;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // required double curPrice = 17;
  bool has_curprice() const;
  void clear_curprice();
  static const int kCurPriceFieldNumber = 17;
  double curprice() const;
  void set_curprice(double value);

  // required double priceChangeVal = 18;
  bool has_pricechangeval() const;
  void clear_pricechangeval();
  static const int kPriceChangeValFieldNumber = 18;
  double pricechangeval() const;
  void set_pricechangeval(double value);

  // required double changeRate = 19;
  bool has_changerate() const;
  void clear_changerate();
  static const int kChangeRateFieldNumber = 19;
  double changerate() const;
  void set_changerate(double value);

  // required double bidPrice = 21;
  bool has_bidprice() const;
  void clear_bidprice();
  static const int kBidPriceFieldNumber = 21;
  double bidprice() const;
  void set_bidprice(double value);

  // required double askPrice = 22;
  bool has_askprice() const;
  void clear_askprice();
  static const int kAskPriceFieldNumber = 22;
  double askprice() const;
  void set_askprice(double value);

  // required int64 bidVol = 23;
  bool has_bidvol() const;
  void clear_bidvol();
  static const int kBidVolFieldNumber = 23;
  ::google::protobuf::int64 bidvol() const;
  void set_bidvol(::google::protobuf::int64 value);

  // required int64 askVol = 24;
  bool has_askvol() const;
  void clear_askvol();
  static const int kAskVolFieldNumber = 24;
  ::google::protobuf::int64 askvol() const;
  void set_askvol(::google::protobuf::int64 value);

  // required int64 volume = 25;
  bool has_volume() const;
  void clear_volume();
  static const int kVolumeFieldNumber = 25;
  ::google::protobuf::int64 volume() const;
  void set_volume(::google::protobuf::int64 value);

  // required double turnover = 26;
  bool has_turnover() const;
  void clear_turnover();
  static const int kTurnoverFieldNumber = 26;
  double turnover() const;
  void set_turnover(double value);

  // required double score = 27;
  bool has_score() const;
  void clear_score();
  static const int kScoreFieldNumber = 27;
  double score() const;
  void set_score(double value);

  // required double premium = 28;
  bool has_premium() const;
  void clear_premium();
  static const int kPremiumFieldNumber = 28;
  double premium() const;
  void set_premium(double value);

  // required double breakEvenPoint = 29;
  bool has_breakevenpoint() const;
  void clear_breakevenpoint();
  static const int kBreakEvenPointFieldNumber = 29;
  double breakevenpoint() const;
  void set_breakevenpoint(double value);

  // required double leverage = 30;
  bool has_leverage() const;
  void clear_leverage();
  static const int kLeverageFieldNumber = 30;
  double leverage() const;
  void set_leverage(double value);

  // required double ipop = 31;
  bool has_ipop() const;
  void clear_ipop();
  static const int kIpopFieldNumber = 31;
  double ipop() const;
  void set_ipop(double value);

  // optional double priceRecoveryRatio = 32;
  bool has_pricerecoveryratio() const;
  void clear_pricerecoveryratio();
  static const int kPriceRecoveryRatioFieldNumber = 32;
  double pricerecoveryratio() const;
  void set_pricerecoveryratio(double value);

  // required double conversionPrice = 33;
  bool has_conversionprice() const;
  void clear_conversionprice();
  static const int kConversionPriceFieldNumber = 33;
  double conversionprice() const;
  void set_conversionprice(double value);

  // required double streetRate = 34;
  bool has_streetrate() const;
  void clear_streetrate();
  static const int kStreetRateFieldNumber = 34;
  double streetrate() const;
  void set_streetrate(double value);

  // required int64 streetVol = 35;
  bool has_streetvol() const;
  void clear_streetvol();
  static const int kStreetVolFieldNumber = 35;
  ::google::protobuf::int64 streetvol() const;
  void set_streetvol(::google::protobuf::int64 value);

  // required double amplitude = 36;
  bool has_amplitude() const;
  void clear_amplitude();
  static const int kAmplitudeFieldNumber = 36;
  double amplitude() const;
  void set_amplitude(double value);

  // required int64 issueSize = 37;
  bool has_issuesize() const;
  void clear_issuesize();
  static const int kIssueSizeFieldNumber = 37;
  ::google::protobuf::int64 issuesize() const;
  void set_issuesize(::google::protobuf::int64 value);

  // required double highPrice = 39;
  bool has_highprice() const;
  void clear_highprice();
  static const int kHighPriceFieldNumber = 39;
  double highprice() const;
  void set_highprice(double value);

  // required double lowPrice = 40;
  bool has_lowprice() const;
  void clear_lowprice();
  static const int kLowPriceFieldNumber = 40;
  double lowprice() const;
  void set_lowprice(double value);

  // optional double impliedVolatility = 41;
  bool has_impliedvolatility() const;
  void clear_impliedvolatility();
  static const int kImpliedVolatilityFieldNumber = 41;
  double impliedvolatility() const;
  void set_impliedvolatility(double value);

  // optional double delta = 42;
  bool has_delta() const;
  void clear_delta();
  static const int kDeltaFieldNumber = 42;
  double delta() const;
  void set_delta(double value);

  // required double effectiveLeverage = 43;
  bool has_effectiveleverage() const;
  void clear_effectiveleverage();
  static const int kEffectiveLeverageFieldNumber = 43;
  double effectiveleverage() const;
  void set_effectiveleverage(double value);

  // optional double upperStrikePrice = 44;
  bool has_upperstrikeprice() const;
  void clear_upperstrikeprice();
  static const int kUpperStrikePriceFieldNumber = 44;
  double upperstrikeprice() const;
  void set_upperstrikeprice(double value);

  // optional double lowerStrikePrice = 45;
  bool has_lowerstrikeprice() const;
  void clear_lowerstrikeprice();
  static const int kLowerStrikePriceFieldNumber = 45;
  double lowerstrikeprice() const;
  void set_lowerstrikeprice(double value);

  // optional int32 inLinePriceStatus = 46;
  bool has_inlinepricestatus() const;
  void clear_inlinepricestatus();
  static const int kInLinePriceStatusFieldNumber = 46;
  ::google::protobuf::int32 inlinepricestatus() const;
  void set_inlinepricestatus(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Qot_GetWarrant.WarrantData)
 private:
  void set_has_stock();
  void clear_has_stock();
  void set_has_owner();
  void clear_has_owner();
  void set_has_type();
  void clear_has_type();
  void set_has_issuer();
  void clear_has_issuer();
  void set_has_maturitytime();
  void clear_has_maturitytime();
  void set_has_maturitytimestamp();
  void clear_has_maturitytimestamp();
  void set_has_listtime();
  void clear_has_listtime();
  void set_has_listtimestamp();
  void clear_has_listtimestamp();
  void set_has_lasttradetime();
  void clear_has_lasttradetime();
  void set_has_lasttradetimestamp();
  void clear_has_lasttradetimestamp();
  void set_has_recoveryprice();
  void clear_has_recoveryprice();
  void set_has_conversionratio();
  void clear_has_conversionratio();
  void set_has_lotsize();
  void clear_has_lotsize();
  void set_has_strikeprice();
  void clear_has_strikeprice();
  void set_has_lastcloseprice();
  void clear_has_lastcloseprice();
  void set_has_name();
  void clear_has_name();
  void set_has_curprice();
  void clear_has_curprice();
  void set_has_pricechangeval();
  void clear_has_pricechangeval();
  void set_has_changerate();
  void clear_has_changerate();
  void set_has_status();
  void clear_has_status();
  void set_has_bidprice();
  void clear_has_bidprice();
  void set_has_askprice();
  void clear_has_askprice();
  void set_has_bidvol();
  void clear_has_bidvol();
  void set_has_askvol();
  void clear_has_askvol();
  void set_has_volume();
  void clear_has_volume();
  void set_has_turnover();
  void clear_has_turnover();
  void set_has_score();
  void clear_has_score();
  void set_has_premium();
  void clear_has_premium();
  void set_has_breakevenpoint();
  void clear_has_breakevenpoint();
  void set_has_leverage();
  void clear_has_leverage();
  void set_has_ipop();
  void clear_has_ipop();
  void set_has_pricerecoveryratio();
  void clear_has_pricerecoveryratio();
  void set_has_conversionprice();
  void clear_has_conversionprice();
  void set_has_streetrate();
  void clear_has_streetrate();
  void set_has_streetvol();
  void clear_has_streetvol();
  void set_has_amplitude();
  void clear_has_amplitude();
  void set_has_issuesize();
  void clear_has_issuesize();
  void set_has_highprice();
  void clear_has_highprice();
  void set_has_lowprice();
  void clear_has_lowprice();
  void set_has_impliedvolatility();
  void clear_has_impliedvolatility();
  void set_has_delta();
  void clear_has_delta();
  void set_has_effectiveleverage();
  void clear_has_effectiveleverage();
  void set_has_upperstrikeprice();
  void clear_has_upperstrikeprice();
  void set_has_lowerstrikeprice();
  void clear_has_lowerstrikeprice();
  void set_has_inlinepricestatus();
  void clear_has_inlinepricestatus();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::google::protobuf::internal::ArenaStringPtr maturitytime_;
  ::google::protobuf::internal::ArenaStringPtr listtime_;
  ::google::protobuf::internal::ArenaStringPtr lasttradetime_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::Qot_Common::Security* stock_;
  ::Qot_Common::Security* owner_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 issuer_;
  double maturitytimestamp_;
  double listtimestamp_;
  double lasttradetimestamp_;
  double recoveryprice_;
  double conversionratio_;
  double strikeprice_;
  double lastcloseprice_;
  ::google::protobuf::int32 lotsize_;
  ::google::protobuf::int32 status_;
  double curprice_;
  double pricechangeval_;
  double changerate_;
  double bidprice_;
  double askprice_;
  ::google::protobuf::int64 bidvol_;
  ::google::protobuf::int64 askvol_;
  ::google::protobuf::int64 volume_;
  double turnover_;
  double score_;
  double premium_;
  double breakevenpoint_;
  double leverage_;
  double ipop_;
  double pricerecoveryratio_;
  double conversionprice_;
  double streetrate_;
  ::google::protobuf::int64 streetvol_;
  double amplitude_;
  ::google::protobuf::int64 issuesize_;
  double highprice_;
  double lowprice_;
  double impliedvolatility_;
  double delta_;
  double effectiveleverage_;
  double upperstrikeprice_;
  double lowerstrikeprice_;
  ::google::protobuf::int32 inlinepricestatus_;
  mutable int _cached_size_;
  friend struct ::protobuf_Qot_5fGetWarrant_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fGetWarrant_2eproto::InitDefaultsWarrantDataImpl();
};
// -------------------------------------------------------------------

class S2C : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_GetWarrant.S2C) */ {
 public:
  S2C();
  virtual ~S2C();

  S2C(const S2C& from);

  inline S2C& operator=(const S2C& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2C(S2C&& from) noexcept
    : S2C() {
    *this = ::std::move(from);
  }

  inline S2C& operator=(S2C&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2C* internal_default_instance() {
    return reinterpret_cast<const S2C*>(
               &_S2C_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(S2C* other);
  friend void swap(S2C& a, S2C& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2C* New() const PROTOBUF_FINAL { return New(NULL); }

  S2C* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const S2C& from);
  void MergeFrom(const S2C& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(S2C* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Qot_GetWarrant.WarrantData warrantDataList = 3;
  int warrantdatalist_size() const;
  void clear_warrantdatalist();
  static const int kWarrantDataListFieldNumber = 3;
  const ::Qot_GetWarrant::WarrantData& warrantdatalist(int index) const;
  ::Qot_GetWarrant::WarrantData* mutable_warrantdatalist(int index);
  ::Qot_GetWarrant::WarrantData* add_warrantdatalist();
  ::google::protobuf::RepeatedPtrField< ::Qot_GetWarrant::WarrantData >*
      mutable_warrantdatalist();
  const ::google::protobuf::RepeatedPtrField< ::Qot_GetWarrant::WarrantData >&
      warrantdatalist() const;

  // required bool lastPage = 1;
  bool has_lastpage() const;
  void clear_lastpage();
  static const int kLastPageFieldNumber = 1;
  bool lastpage() const;
  void set_lastpage(bool value);

  // required int32 allCount = 2;
  bool has_allcount() const;
  void clear_allcount();
  static const int kAllCountFieldNumber = 2;
  ::google::protobuf::int32 allcount() const;
  void set_allcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Qot_GetWarrant.S2C)
 private:
  void set_has_lastpage();
  void clear_has_lastpage();
  void set_has_allcount();
  void clear_has_allcount();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Qot_GetWarrant::WarrantData > warrantdatalist_;
  bool lastpage_;
  ::google::protobuf::int32 allcount_;
  friend struct ::protobuf_Qot_5fGetWarrant_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fGetWarrant_2eproto::InitDefaultsS2CImpl();
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_GetWarrant.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const PROTOBUF_FINAL { return New(NULL); }

  Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Qot_GetWarrant.C2S c2s = 1;
  bool has_c2s() const;
  void clear_c2s();
  static const int kC2SFieldNumber = 1;
  const ::Qot_GetWarrant::C2S& c2s() const;
  ::Qot_GetWarrant::C2S* release_c2s();
  ::Qot_GetWarrant::C2S* mutable_c2s();
  void set_allocated_c2s(::Qot_GetWarrant::C2S* c2s);

  // @@protoc_insertion_point(class_scope:Qot_GetWarrant.Request)
 private:
  void set_has_c2s();
  void clear_has_c2s();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::Qot_GetWarrant::C2S* c2s_;
  friend struct ::protobuf_Qot_5fGetWarrant_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fGetWarrant_2eproto::InitDefaultsRequestImpl();
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_GetWarrant.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Response* other);
  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const PROTOBUF_FINAL { return New(NULL); }

  Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string retMsg = 2;
  bool has_retmsg() const;
  void clear_retmsg();
  static const int kRetMsgFieldNumber = 2;
  const ::std::string& retmsg() const;
  void set_retmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_retmsg(::std::string&& value);
  #endif
  void set_retmsg(const char* value);
  void set_retmsg(const char* value, size_t size);
  ::std::string* mutable_retmsg();
  ::std::string* release_retmsg();
  void set_allocated_retmsg(::std::string* retmsg);

  // optional .Qot_GetWarrant.S2C s2c = 4;
  bool has_s2c() const;
  void clear_s2c();
  static const int kS2CFieldNumber = 4;
  const ::Qot_GetWarrant::S2C& s2c() const;
  ::Qot_GetWarrant::S2C* release_s2c();
  ::Qot_GetWarrant::S2C* mutable_s2c();
  void set_allocated_s2c(::Qot_GetWarrant::S2C* s2c);

  // optional int32 errCode = 3;
  bool has_errcode() const;
  void clear_errcode();
  static const int kErrCodeFieldNumber = 3;
  ::google::protobuf::int32 errcode() const;
  void set_errcode(::google::protobuf::int32 value);

  // required int32 retType = 1 [default = -400];
  bool has_rettype() const;
  void clear_rettype();
  static const int kRetTypeFieldNumber = 1;
  ::google::protobuf::int32 rettype() const;
  void set_rettype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Qot_GetWarrant.Response)
 private:
  void set_has_rettype();
  void clear_has_rettype();
  void set_has_retmsg();
  void clear_has_retmsg();
  void set_has_errcode();
  void clear_has_errcode();
  void set_has_s2c();
  void clear_has_s2c();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr retmsg_;
  ::Qot_GetWarrant::S2C* s2c_;
  ::google::protobuf::int32 errcode_;
  ::google::protobuf::int32 rettype_;
  friend struct ::protobuf_Qot_5fGetWarrant_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fGetWarrant_2eproto::InitDefaultsResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C2S

// required int32 begin = 1;
inline bool C2S::has_begin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void C2S::set_has_begin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void C2S::clear_has_begin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void C2S::clear_begin() {
  begin_ = 0;
  clear_has_begin();
}
inline ::google::protobuf::int32 C2S::begin() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.C2S.begin)
  return begin_;
}
inline void C2S::set_begin(::google::protobuf::int32 value) {
  set_has_begin();
  begin_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.C2S.begin)
}

// required int32 num = 2;
inline bool C2S::has_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void C2S::set_has_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void C2S::clear_has_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void C2S::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 C2S::num() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.C2S.num)
  return num_;
}
inline void C2S::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.C2S.num)
}

// required int32 sortField = 3;
inline bool C2S::has_sortfield() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void C2S::set_has_sortfield() {
  _has_bits_[0] |= 0x00000020u;
}
inline void C2S::clear_has_sortfield() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void C2S::clear_sortfield() {
  sortfield_ = 0;
  clear_has_sortfield();
}
inline ::google::protobuf::int32 C2S::sortfield() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.C2S.sortField)
  return sortfield_;
}
inline void C2S::set_sortfield(::google::protobuf::int32 value) {
  set_has_sortfield();
  sortfield_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.C2S.sortField)
}

// required bool ascend = 4;
inline bool C2S::has_ascend() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void C2S::set_has_ascend() {
  _has_bits_[0] |= 0x00000040u;
}
inline void C2S::clear_has_ascend() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void C2S::clear_ascend() {
  ascend_ = false;
  clear_has_ascend();
}
inline bool C2S::ascend() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.C2S.ascend)
  return ascend_;
}
inline void C2S::set_ascend(bool value) {
  set_has_ascend();
  ascend_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.C2S.ascend)
}

// optional .Qot_Common.Security owner = 5;
inline bool C2S::has_owner() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void C2S::set_has_owner() {
  _has_bits_[0] |= 0x00000004u;
}
inline void C2S::clear_has_owner() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::Qot_Common::Security& C2S::owner() const {
  const ::Qot_Common::Security* p = owner_;
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.C2S.owner)
  return p != NULL ? *p : *reinterpret_cast<const ::Qot_Common::Security*>(
      &::Qot_Common::_Security_default_instance_);
}
inline ::Qot_Common::Security* C2S::release_owner() {
  // @@protoc_insertion_point(field_release:Qot_GetWarrant.C2S.owner)
  clear_has_owner();
  ::Qot_Common::Security* temp = owner_;
  owner_ = NULL;
  return temp;
}
inline ::Qot_Common::Security* C2S::mutable_owner() {
  set_has_owner();
  if (owner_ == NULL) {
    owner_ = new ::Qot_Common::Security;
  }
  // @@protoc_insertion_point(field_mutable:Qot_GetWarrant.C2S.owner)
  return owner_;
}
inline void C2S::set_allocated_owner(::Qot_Common::Security* owner) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(owner_);
  }
  if (owner) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      owner = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, owner, submessage_arena);
    }
    set_has_owner();
  } else {
    clear_has_owner();
  }
  owner_ = owner;
  // @@protoc_insertion_point(field_set_allocated:Qot_GetWarrant.C2S.owner)
}

// repeated int32 typeList = 6;
inline int C2S::typelist_size() const {
  return typelist_.size();
}
inline void C2S::clear_typelist() {
  typelist_.Clear();
}
inline ::google::protobuf::int32 C2S::typelist(int index) const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.C2S.typeList)
  return typelist_.Get(index);
}
inline void C2S::set_typelist(int index, ::google::protobuf::int32 value) {
  typelist_.Set(index, value);
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.C2S.typeList)
}
inline void C2S::add_typelist(::google::protobuf::int32 value) {
  typelist_.Add(value);
  // @@protoc_insertion_point(field_add:Qot_GetWarrant.C2S.typeList)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
C2S::typelist() const {
  // @@protoc_insertion_point(field_list:Qot_GetWarrant.C2S.typeList)
  return typelist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
C2S::mutable_typelist() {
  // @@protoc_insertion_point(field_mutable_list:Qot_GetWarrant.C2S.typeList)
  return &typelist_;
}

// repeated int32 issuerList = 7;
inline int C2S::issuerlist_size() const {
  return issuerlist_.size();
}
inline void C2S::clear_issuerlist() {
  issuerlist_.Clear();
}
inline ::google::protobuf::int32 C2S::issuerlist(int index) const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.C2S.issuerList)
  return issuerlist_.Get(index);
}
inline void C2S::set_issuerlist(int index, ::google::protobuf::int32 value) {
  issuerlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.C2S.issuerList)
}
inline void C2S::add_issuerlist(::google::protobuf::int32 value) {
  issuerlist_.Add(value);
  // @@protoc_insertion_point(field_add:Qot_GetWarrant.C2S.issuerList)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
C2S::issuerlist() const {
  // @@protoc_insertion_point(field_list:Qot_GetWarrant.C2S.issuerList)
  return issuerlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
C2S::mutable_issuerlist() {
  // @@protoc_insertion_point(field_mutable_list:Qot_GetWarrant.C2S.issuerList)
  return &issuerlist_;
}

// optional string maturityTimeMin = 8;
inline bool C2S::has_maturitytimemin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2S::set_has_maturitytimemin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2S::clear_has_maturitytimemin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2S::clear_maturitytimemin() {
  maturitytimemin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_maturitytimemin();
}
inline const ::std::string& C2S::maturitytimemin() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.C2S.maturityTimeMin)
  return maturitytimemin_.GetNoArena();
}
inline void C2S::set_maturitytimemin(const ::std::string& value) {
  set_has_maturitytimemin();
  maturitytimemin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.C2S.maturityTimeMin)
}
#if LANG_CXX11
inline void C2S::set_maturitytimemin(::std::string&& value) {
  set_has_maturitytimemin();
  maturitytimemin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_GetWarrant.C2S.maturityTimeMin)
}
#endif
inline void C2S::set_maturitytimemin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_maturitytimemin();
  maturitytimemin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_GetWarrant.C2S.maturityTimeMin)
}
inline void C2S::set_maturitytimemin(const char* value, size_t size) {
  set_has_maturitytimemin();
  maturitytimemin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_GetWarrant.C2S.maturityTimeMin)
}
inline ::std::string* C2S::mutable_maturitytimemin() {
  set_has_maturitytimemin();
  // @@protoc_insertion_point(field_mutable:Qot_GetWarrant.C2S.maturityTimeMin)
  return maturitytimemin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* C2S::release_maturitytimemin() {
  // @@protoc_insertion_point(field_release:Qot_GetWarrant.C2S.maturityTimeMin)
  clear_has_maturitytimemin();
  return maturitytimemin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void C2S::set_allocated_maturitytimemin(::std::string* maturitytimemin) {
  if (maturitytimemin != NULL) {
    set_has_maturitytimemin();
  } else {
    clear_has_maturitytimemin();
  }
  maturitytimemin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), maturitytimemin);
  // @@protoc_insertion_point(field_set_allocated:Qot_GetWarrant.C2S.maturityTimeMin)
}

// optional string maturityTimeMax = 9;
inline bool C2S::has_maturitytimemax() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2S::set_has_maturitytimemax() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2S::clear_has_maturitytimemax() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2S::clear_maturitytimemax() {
  maturitytimemax_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_maturitytimemax();
}
inline const ::std::string& C2S::maturitytimemax() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.C2S.maturityTimeMax)
  return maturitytimemax_.GetNoArena();
}
inline void C2S::set_maturitytimemax(const ::std::string& value) {
  set_has_maturitytimemax();
  maturitytimemax_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.C2S.maturityTimeMax)
}
#if LANG_CXX11
inline void C2S::set_maturitytimemax(::std::string&& value) {
  set_has_maturitytimemax();
  maturitytimemax_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_GetWarrant.C2S.maturityTimeMax)
}
#endif
inline void C2S::set_maturitytimemax(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_maturitytimemax();
  maturitytimemax_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_GetWarrant.C2S.maturityTimeMax)
}
inline void C2S::set_maturitytimemax(const char* value, size_t size) {
  set_has_maturitytimemax();
  maturitytimemax_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_GetWarrant.C2S.maturityTimeMax)
}
inline ::std::string* C2S::mutable_maturitytimemax() {
  set_has_maturitytimemax();
  // @@protoc_insertion_point(field_mutable:Qot_GetWarrant.C2S.maturityTimeMax)
  return maturitytimemax_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* C2S::release_maturitytimemax() {
  // @@protoc_insertion_point(field_release:Qot_GetWarrant.C2S.maturityTimeMax)
  clear_has_maturitytimemax();
  return maturitytimemax_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void C2S::set_allocated_maturitytimemax(::std::string* maturitytimemax) {
  if (maturitytimemax != NULL) {
    set_has_maturitytimemax();
  } else {
    clear_has_maturitytimemax();
  }
  maturitytimemax_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), maturitytimemax);
  // @@protoc_insertion_point(field_set_allocated:Qot_GetWarrant.C2S.maturityTimeMax)
}

// optional int32 ipoPeriod = 10;
inline bool C2S::has_ipoperiod() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void C2S::set_has_ipoperiod() {
  _has_bits_[0] |= 0x00000080u;
}
inline void C2S::clear_has_ipoperiod() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void C2S::clear_ipoperiod() {
  ipoperiod_ = 0;
  clear_has_ipoperiod();
}
inline ::google::protobuf::int32 C2S::ipoperiod() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.C2S.ipoPeriod)
  return ipoperiod_;
}
inline void C2S::set_ipoperiod(::google::protobuf::int32 value) {
  set_has_ipoperiod();
  ipoperiod_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.C2S.ipoPeriod)
}

// optional int32 priceType = 11;
inline bool C2S::has_pricetype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void C2S::set_has_pricetype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void C2S::clear_has_pricetype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void C2S::clear_pricetype() {
  pricetype_ = 0;
  clear_has_pricetype();
}
inline ::google::protobuf::int32 C2S::pricetype() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.C2S.priceType)
  return pricetype_;
}
inline void C2S::set_pricetype(::google::protobuf::int32 value) {
  set_has_pricetype();
  pricetype_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.C2S.priceType)
}

// optional int32 status = 12;
inline bool C2S::has_status() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void C2S::set_has_status() {
  _has_bits_[0] |= 0x80000000u;
}
inline void C2S::clear_has_status() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void C2S::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 C2S::status() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.C2S.status)
  return status_;
}
inline void C2S::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.C2S.status)
}

// optional double curPriceMin = 13;
inline bool C2S::has_curpricemin() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void C2S::set_has_curpricemin() {
  _has_bits_[0] |= 0x00000200u;
}
inline void C2S::clear_has_curpricemin() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void C2S::clear_curpricemin() {
  curpricemin_ = 0;
  clear_has_curpricemin();
}
inline double C2S::curpricemin() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.C2S.curPriceMin)
  return curpricemin_;
}
inline void C2S::set_curpricemin(double value) {
  set_has_curpricemin();
  curpricemin_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.C2S.curPriceMin)
}

// optional double curPriceMax = 14;
inline bool C2S::has_curpricemax() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void C2S::set_has_curpricemax() {
  _has_bits_[0] |= 0x00000400u;
}
inline void C2S::clear_has_curpricemax() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void C2S::clear_curpricemax() {
  curpricemax_ = 0;
  clear_has_curpricemax();
}
inline double C2S::curpricemax() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.C2S.curPriceMax)
  return curpricemax_;
}
inline void C2S::set_curpricemax(double value) {
  set_has_curpricemax();
  curpricemax_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.C2S.curPriceMax)
}

// optional double strikePriceMin = 15;
inline bool C2S::has_strikepricemin() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void C2S::set_has_strikepricemin() {
  _has_bits_[0] |= 0x00000800u;
}
inline void C2S::clear_has_strikepricemin() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void C2S::clear_strikepricemin() {
  strikepricemin_ = 0;
  clear_has_strikepricemin();
}
inline double C2S::strikepricemin() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.C2S.strikePriceMin)
  return strikepricemin_;
}
inline void C2S::set_strikepricemin(double value) {
  set_has_strikepricemin();
  strikepricemin_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.C2S.strikePriceMin)
}

// optional double strikePriceMax = 16;
inline bool C2S::has_strikepricemax() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void C2S::set_has_strikepricemax() {
  _has_bits_[0] |= 0x00001000u;
}
inline void C2S::clear_has_strikepricemax() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void C2S::clear_strikepricemax() {
  strikepricemax_ = 0;
  clear_has_strikepricemax();
}
inline double C2S::strikepricemax() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.C2S.strikePriceMax)
  return strikepricemax_;
}
inline void C2S::set_strikepricemax(double value) {
  set_has_strikepricemax();
  strikepricemax_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.C2S.strikePriceMax)
}

// optional double streetMin = 17;
inline bool C2S::has_streetmin() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void C2S::set_has_streetmin() {
  _has_bits_[0] |= 0x00002000u;
}
inline void C2S::clear_has_streetmin() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void C2S::clear_streetmin() {
  streetmin_ = 0;
  clear_has_streetmin();
}
inline double C2S::streetmin() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.C2S.streetMin)
  return streetmin_;
}
inline void C2S::set_streetmin(double value) {
  set_has_streetmin();
  streetmin_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.C2S.streetMin)
}

// optional double streetMax = 18;
inline bool C2S::has_streetmax() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void C2S::set_has_streetmax() {
  _has_bits_[0] |= 0x00004000u;
}
inline void C2S::clear_has_streetmax() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void C2S::clear_streetmax() {
  streetmax_ = 0;
  clear_has_streetmax();
}
inline double C2S::streetmax() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.C2S.streetMax)
  return streetmax_;
}
inline void C2S::set_streetmax(double value) {
  set_has_streetmax();
  streetmax_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.C2S.streetMax)
}

// optional double conversionMin = 19;
inline bool C2S::has_conversionmin() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void C2S::set_has_conversionmin() {
  _has_bits_[0] |= 0x00008000u;
}
inline void C2S::clear_has_conversionmin() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void C2S::clear_conversionmin() {
  conversionmin_ = 0;
  clear_has_conversionmin();
}
inline double C2S::conversionmin() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.C2S.conversionMin)
  return conversionmin_;
}
inline void C2S::set_conversionmin(double value) {
  set_has_conversionmin();
  conversionmin_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.C2S.conversionMin)
}

// optional double conversionMax = 20;
inline bool C2S::has_conversionmax() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void C2S::set_has_conversionmax() {
  _has_bits_[0] |= 0x00010000u;
}
inline void C2S::clear_has_conversionmax() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void C2S::clear_conversionmax() {
  conversionmax_ = 0;
  clear_has_conversionmax();
}
inline double C2S::conversionmax() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.C2S.conversionMax)
  return conversionmax_;
}
inline void C2S::set_conversionmax(double value) {
  set_has_conversionmax();
  conversionmax_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.C2S.conversionMax)
}

// optional uint64 volMin = 21;
inline bool C2S::has_volmin() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void C2S::set_has_volmin() {
  _has_bits_[0] |= 0x00020000u;
}
inline void C2S::clear_has_volmin() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void C2S::clear_volmin() {
  volmin_ = GOOGLE_ULONGLONG(0);
  clear_has_volmin();
}
inline ::google::protobuf::uint64 C2S::volmin() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.C2S.volMin)
  return volmin_;
}
inline void C2S::set_volmin(::google::protobuf::uint64 value) {
  set_has_volmin();
  volmin_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.C2S.volMin)
}

// optional uint64 volMax = 22;
inline bool C2S::has_volmax() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void C2S::set_has_volmax() {
  _has_bits_[0] |= 0x00040000u;
}
inline void C2S::clear_has_volmax() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void C2S::clear_volmax() {
  volmax_ = GOOGLE_ULONGLONG(0);
  clear_has_volmax();
}
inline ::google::protobuf::uint64 C2S::volmax() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.C2S.volMax)
  return volmax_;
}
inline void C2S::set_volmax(::google::protobuf::uint64 value) {
  set_has_volmax();
  volmax_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.C2S.volMax)
}

// optional double premiumMin = 23;
inline bool C2S::has_premiummin() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void C2S::set_has_premiummin() {
  _has_bits_[0] |= 0x00080000u;
}
inline void C2S::clear_has_premiummin() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void C2S::clear_premiummin() {
  premiummin_ = 0;
  clear_has_premiummin();
}
inline double C2S::premiummin() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.C2S.premiumMin)
  return premiummin_;
}
inline void C2S::set_premiummin(double value) {
  set_has_premiummin();
  premiummin_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.C2S.premiumMin)
}

// optional double premiumMax = 24;
inline bool C2S::has_premiummax() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void C2S::set_has_premiummax() {
  _has_bits_[0] |= 0x00100000u;
}
inline void C2S::clear_has_premiummax() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void C2S::clear_premiummax() {
  premiummax_ = 0;
  clear_has_premiummax();
}
inline double C2S::premiummax() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.C2S.premiumMax)
  return premiummax_;
}
inline void C2S::set_premiummax(double value) {
  set_has_premiummax();
  premiummax_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.C2S.premiumMax)
}

// optional double leverageRatioMin = 25;
inline bool C2S::has_leverageratiomin() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void C2S::set_has_leverageratiomin() {
  _has_bits_[0] |= 0x00200000u;
}
inline void C2S::clear_has_leverageratiomin() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void C2S::clear_leverageratiomin() {
  leverageratiomin_ = 0;
  clear_has_leverageratiomin();
}
inline double C2S::leverageratiomin() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.C2S.leverageRatioMin)
  return leverageratiomin_;
}
inline void C2S::set_leverageratiomin(double value) {
  set_has_leverageratiomin();
  leverageratiomin_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.C2S.leverageRatioMin)
}

// optional double leverageRatioMax = 26;
inline bool C2S::has_leverageratiomax() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void C2S::set_has_leverageratiomax() {
  _has_bits_[0] |= 0x00400000u;
}
inline void C2S::clear_has_leverageratiomax() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void C2S::clear_leverageratiomax() {
  leverageratiomax_ = 0;
  clear_has_leverageratiomax();
}
inline double C2S::leverageratiomax() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.C2S.leverageRatioMax)
  return leverageratiomax_;
}
inline void C2S::set_leverageratiomax(double value) {
  set_has_leverageratiomax();
  leverageratiomax_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.C2S.leverageRatioMax)
}

// optional double deltaMin = 27;
inline bool C2S::has_deltamin() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void C2S::set_has_deltamin() {
  _has_bits_[0] |= 0x00800000u;
}
inline void C2S::clear_has_deltamin() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void C2S::clear_deltamin() {
  deltamin_ = 0;
  clear_has_deltamin();
}
inline double C2S::deltamin() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.C2S.deltaMin)
  return deltamin_;
}
inline void C2S::set_deltamin(double value) {
  set_has_deltamin();
  deltamin_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.C2S.deltaMin)
}

// optional double deltaMax = 28;
inline bool C2S::has_deltamax() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void C2S::set_has_deltamax() {
  _has_bits_[0] |= 0x01000000u;
}
inline void C2S::clear_has_deltamax() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void C2S::clear_deltamax() {
  deltamax_ = 0;
  clear_has_deltamax();
}
inline double C2S::deltamax() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.C2S.deltaMax)
  return deltamax_;
}
inline void C2S::set_deltamax(double value) {
  set_has_deltamax();
  deltamax_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.C2S.deltaMax)
}

// optional double impliedMin = 29;
inline bool C2S::has_impliedmin() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void C2S::set_has_impliedmin() {
  _has_bits_[0] |= 0x02000000u;
}
inline void C2S::clear_has_impliedmin() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void C2S::clear_impliedmin() {
  impliedmin_ = 0;
  clear_has_impliedmin();
}
inline double C2S::impliedmin() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.C2S.impliedMin)
  return impliedmin_;
}
inline void C2S::set_impliedmin(double value) {
  set_has_impliedmin();
  impliedmin_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.C2S.impliedMin)
}

// optional double impliedMax = 30;
inline bool C2S::has_impliedmax() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void C2S::set_has_impliedmax() {
  _has_bits_[0] |= 0x04000000u;
}
inline void C2S::clear_has_impliedmax() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void C2S::clear_impliedmax() {
  impliedmax_ = 0;
  clear_has_impliedmax();
}
inline double C2S::impliedmax() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.C2S.impliedMax)
  return impliedmax_;
}
inline void C2S::set_impliedmax(double value) {
  set_has_impliedmax();
  impliedmax_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.C2S.impliedMax)
}

// optional double recoveryPriceMin = 31;
inline bool C2S::has_recoverypricemin() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void C2S::set_has_recoverypricemin() {
  _has_bits_[0] |= 0x08000000u;
}
inline void C2S::clear_has_recoverypricemin() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void C2S::clear_recoverypricemin() {
  recoverypricemin_ = 0;
  clear_has_recoverypricemin();
}
inline double C2S::recoverypricemin() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.C2S.recoveryPriceMin)
  return recoverypricemin_;
}
inline void C2S::set_recoverypricemin(double value) {
  set_has_recoverypricemin();
  recoverypricemin_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.C2S.recoveryPriceMin)
}

// optional double recoveryPriceMax = 32;
inline bool C2S::has_recoverypricemax() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void C2S::set_has_recoverypricemax() {
  _has_bits_[0] |= 0x10000000u;
}
inline void C2S::clear_has_recoverypricemax() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void C2S::clear_recoverypricemax() {
  recoverypricemax_ = 0;
  clear_has_recoverypricemax();
}
inline double C2S::recoverypricemax() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.C2S.recoveryPriceMax)
  return recoverypricemax_;
}
inline void C2S::set_recoverypricemax(double value) {
  set_has_recoverypricemax();
  recoverypricemax_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.C2S.recoveryPriceMax)
}

// optional double priceRecoveryRatioMin = 33;
inline bool C2S::has_pricerecoveryratiomin() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void C2S::set_has_pricerecoveryratiomin() {
  _has_bits_[0] |= 0x20000000u;
}
inline void C2S::clear_has_pricerecoveryratiomin() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void C2S::clear_pricerecoveryratiomin() {
  pricerecoveryratiomin_ = 0;
  clear_has_pricerecoveryratiomin();
}
inline double C2S::pricerecoveryratiomin() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.C2S.priceRecoveryRatioMin)
  return pricerecoveryratiomin_;
}
inline void C2S::set_pricerecoveryratiomin(double value) {
  set_has_pricerecoveryratiomin();
  pricerecoveryratiomin_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.C2S.priceRecoveryRatioMin)
}

// optional double priceRecoveryRatioMax = 34;
inline bool C2S::has_pricerecoveryratiomax() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void C2S::set_has_pricerecoveryratiomax() {
  _has_bits_[0] |= 0x40000000u;
}
inline void C2S::clear_has_pricerecoveryratiomax() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void C2S::clear_pricerecoveryratiomax() {
  pricerecoveryratiomax_ = 0;
  clear_has_pricerecoveryratiomax();
}
inline double C2S::pricerecoveryratiomax() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.C2S.priceRecoveryRatioMax)
  return pricerecoveryratiomax_;
}
inline void C2S::set_pricerecoveryratiomax(double value) {
  set_has_pricerecoveryratiomax();
  pricerecoveryratiomax_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.C2S.priceRecoveryRatioMax)
}

// -------------------------------------------------------------------

// WarrantData

// required .Qot_Common.Security stock = 1;
inline bool WarrantData::has_stock() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WarrantData::set_has_stock() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WarrantData::clear_has_stock() {
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::Qot_Common::Security& WarrantData::stock() const {
  const ::Qot_Common::Security* p = stock_;
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.WarrantData.stock)
  return p != NULL ? *p : *reinterpret_cast<const ::Qot_Common::Security*>(
      &::Qot_Common::_Security_default_instance_);
}
inline ::Qot_Common::Security* WarrantData::release_stock() {
  // @@protoc_insertion_point(field_release:Qot_GetWarrant.WarrantData.stock)
  clear_has_stock();
  ::Qot_Common::Security* temp = stock_;
  stock_ = NULL;
  return temp;
}
inline ::Qot_Common::Security* WarrantData::mutable_stock() {
  set_has_stock();
  if (stock_ == NULL) {
    stock_ = new ::Qot_Common::Security;
  }
  // @@protoc_insertion_point(field_mutable:Qot_GetWarrant.WarrantData.stock)
  return stock_;
}
inline void WarrantData::set_allocated_stock(::Qot_Common::Security* stock) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(stock_);
  }
  if (stock) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stock = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stock, submessage_arena);
    }
    set_has_stock();
  } else {
    clear_has_stock();
  }
  stock_ = stock;
  // @@protoc_insertion_point(field_set_allocated:Qot_GetWarrant.WarrantData.stock)
}

// required .Qot_Common.Security owner = 2;
inline bool WarrantData::has_owner() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WarrantData::set_has_owner() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WarrantData::clear_has_owner() {
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::Qot_Common::Security& WarrantData::owner() const {
  const ::Qot_Common::Security* p = owner_;
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.WarrantData.owner)
  return p != NULL ? *p : *reinterpret_cast<const ::Qot_Common::Security*>(
      &::Qot_Common::_Security_default_instance_);
}
inline ::Qot_Common::Security* WarrantData::release_owner() {
  // @@protoc_insertion_point(field_release:Qot_GetWarrant.WarrantData.owner)
  clear_has_owner();
  ::Qot_Common::Security* temp = owner_;
  owner_ = NULL;
  return temp;
}
inline ::Qot_Common::Security* WarrantData::mutable_owner() {
  set_has_owner();
  if (owner_ == NULL) {
    owner_ = new ::Qot_Common::Security;
  }
  // @@protoc_insertion_point(field_mutable:Qot_GetWarrant.WarrantData.owner)
  return owner_;
}
inline void WarrantData::set_allocated_owner(::Qot_Common::Security* owner) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(owner_);
  }
  if (owner) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      owner = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, owner, submessage_arena);
    }
    set_has_owner();
  } else {
    clear_has_owner();
  }
  owner_ = owner;
  // @@protoc_insertion_point(field_set_allocated:Qot_GetWarrant.WarrantData.owner)
}

// required int32 type = 3;
inline bool WarrantData::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WarrantData::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void WarrantData::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void WarrantData::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 WarrantData::type() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.WarrantData.type)
  return type_;
}
inline void WarrantData::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.WarrantData.type)
}

// required int32 issuer = 4;
inline bool WarrantData::has_issuer() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void WarrantData::set_has_issuer() {
  _has_bits_[0] |= 0x00000080u;
}
inline void WarrantData::clear_has_issuer() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void WarrantData::clear_issuer() {
  issuer_ = 0;
  clear_has_issuer();
}
inline ::google::protobuf::int32 WarrantData::issuer() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.WarrantData.issuer)
  return issuer_;
}
inline void WarrantData::set_issuer(::google::protobuf::int32 value) {
  set_has_issuer();
  issuer_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.WarrantData.issuer)
}

// required string maturityTime = 5;
inline bool WarrantData::has_maturitytime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WarrantData::set_has_maturitytime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WarrantData::clear_has_maturitytime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WarrantData::clear_maturitytime() {
  maturitytime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_maturitytime();
}
inline const ::std::string& WarrantData::maturitytime() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.WarrantData.maturityTime)
  return maturitytime_.GetNoArena();
}
inline void WarrantData::set_maturitytime(const ::std::string& value) {
  set_has_maturitytime();
  maturitytime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.WarrantData.maturityTime)
}
#if LANG_CXX11
inline void WarrantData::set_maturitytime(::std::string&& value) {
  set_has_maturitytime();
  maturitytime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_GetWarrant.WarrantData.maturityTime)
}
#endif
inline void WarrantData::set_maturitytime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_maturitytime();
  maturitytime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_GetWarrant.WarrantData.maturityTime)
}
inline void WarrantData::set_maturitytime(const char* value, size_t size) {
  set_has_maturitytime();
  maturitytime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_GetWarrant.WarrantData.maturityTime)
}
inline ::std::string* WarrantData::mutable_maturitytime() {
  set_has_maturitytime();
  // @@protoc_insertion_point(field_mutable:Qot_GetWarrant.WarrantData.maturityTime)
  return maturitytime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WarrantData::release_maturitytime() {
  // @@protoc_insertion_point(field_release:Qot_GetWarrant.WarrantData.maturityTime)
  clear_has_maturitytime();
  return maturitytime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WarrantData::set_allocated_maturitytime(::std::string* maturitytime) {
  if (maturitytime != NULL) {
    set_has_maturitytime();
  } else {
    clear_has_maturitytime();
  }
  maturitytime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), maturitytime);
  // @@protoc_insertion_point(field_set_allocated:Qot_GetWarrant.WarrantData.maturityTime)
}

// optional double maturityTimestamp = 6;
inline bool WarrantData::has_maturitytimestamp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void WarrantData::set_has_maturitytimestamp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void WarrantData::clear_has_maturitytimestamp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void WarrantData::clear_maturitytimestamp() {
  maturitytimestamp_ = 0;
  clear_has_maturitytimestamp();
}
inline double WarrantData::maturitytimestamp() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.WarrantData.maturityTimestamp)
  return maturitytimestamp_;
}
inline void WarrantData::set_maturitytimestamp(double value) {
  set_has_maturitytimestamp();
  maturitytimestamp_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.WarrantData.maturityTimestamp)
}

// required string listTime = 7;
inline bool WarrantData::has_listtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WarrantData::set_has_listtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WarrantData::clear_has_listtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WarrantData::clear_listtime() {
  listtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_listtime();
}
inline const ::std::string& WarrantData::listtime() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.WarrantData.listTime)
  return listtime_.GetNoArena();
}
inline void WarrantData::set_listtime(const ::std::string& value) {
  set_has_listtime();
  listtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.WarrantData.listTime)
}
#if LANG_CXX11
inline void WarrantData::set_listtime(::std::string&& value) {
  set_has_listtime();
  listtime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_GetWarrant.WarrantData.listTime)
}
#endif
inline void WarrantData::set_listtime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_listtime();
  listtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_GetWarrant.WarrantData.listTime)
}
inline void WarrantData::set_listtime(const char* value, size_t size) {
  set_has_listtime();
  listtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_GetWarrant.WarrantData.listTime)
}
inline ::std::string* WarrantData::mutable_listtime() {
  set_has_listtime();
  // @@protoc_insertion_point(field_mutable:Qot_GetWarrant.WarrantData.listTime)
  return listtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WarrantData::release_listtime() {
  // @@protoc_insertion_point(field_release:Qot_GetWarrant.WarrantData.listTime)
  clear_has_listtime();
  return listtime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WarrantData::set_allocated_listtime(::std::string* listtime) {
  if (listtime != NULL) {
    set_has_listtime();
  } else {
    clear_has_listtime();
  }
  listtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), listtime);
  // @@protoc_insertion_point(field_set_allocated:Qot_GetWarrant.WarrantData.listTime)
}

// optional double listTimestamp = 8;
inline bool WarrantData::has_listtimestamp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void WarrantData::set_has_listtimestamp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void WarrantData::clear_has_listtimestamp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void WarrantData::clear_listtimestamp() {
  listtimestamp_ = 0;
  clear_has_listtimestamp();
}
inline double WarrantData::listtimestamp() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.WarrantData.listTimestamp)
  return listtimestamp_;
}
inline void WarrantData::set_listtimestamp(double value) {
  set_has_listtimestamp();
  listtimestamp_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.WarrantData.listTimestamp)
}

// required string lastTradeTime = 9;
inline bool WarrantData::has_lasttradetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WarrantData::set_has_lasttradetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WarrantData::clear_has_lasttradetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WarrantData::clear_lasttradetime() {
  lasttradetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lasttradetime();
}
inline const ::std::string& WarrantData::lasttradetime() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.WarrantData.lastTradeTime)
  return lasttradetime_.GetNoArena();
}
inline void WarrantData::set_lasttradetime(const ::std::string& value) {
  set_has_lasttradetime();
  lasttradetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.WarrantData.lastTradeTime)
}
#if LANG_CXX11
inline void WarrantData::set_lasttradetime(::std::string&& value) {
  set_has_lasttradetime();
  lasttradetime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_GetWarrant.WarrantData.lastTradeTime)
}
#endif
inline void WarrantData::set_lasttradetime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_lasttradetime();
  lasttradetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_GetWarrant.WarrantData.lastTradeTime)
}
inline void WarrantData::set_lasttradetime(const char* value, size_t size) {
  set_has_lasttradetime();
  lasttradetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_GetWarrant.WarrantData.lastTradeTime)
}
inline ::std::string* WarrantData::mutable_lasttradetime() {
  set_has_lasttradetime();
  // @@protoc_insertion_point(field_mutable:Qot_GetWarrant.WarrantData.lastTradeTime)
  return lasttradetime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WarrantData::release_lasttradetime() {
  // @@protoc_insertion_point(field_release:Qot_GetWarrant.WarrantData.lastTradeTime)
  clear_has_lasttradetime();
  return lasttradetime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WarrantData::set_allocated_lasttradetime(::std::string* lasttradetime) {
  if (lasttradetime != NULL) {
    set_has_lasttradetime();
  } else {
    clear_has_lasttradetime();
  }
  lasttradetime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lasttradetime);
  // @@protoc_insertion_point(field_set_allocated:Qot_GetWarrant.WarrantData.lastTradeTime)
}

// optional double lastTradeTimestamp = 10;
inline bool WarrantData::has_lasttradetimestamp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void WarrantData::set_has_lasttradetimestamp() {
  _has_bits_[0] |= 0x00000400u;
}
inline void WarrantData::clear_has_lasttradetimestamp() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void WarrantData::clear_lasttradetimestamp() {
  lasttradetimestamp_ = 0;
  clear_has_lasttradetimestamp();
}
inline double WarrantData::lasttradetimestamp() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.WarrantData.lastTradeTimestamp)
  return lasttradetimestamp_;
}
inline void WarrantData::set_lasttradetimestamp(double value) {
  set_has_lasttradetimestamp();
  lasttradetimestamp_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.WarrantData.lastTradeTimestamp)
}

// optional double recoveryPrice = 11;
inline bool WarrantData::has_recoveryprice() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void WarrantData::set_has_recoveryprice() {
  _has_bits_[0] |= 0x00000800u;
}
inline void WarrantData::clear_has_recoveryprice() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void WarrantData::clear_recoveryprice() {
  recoveryprice_ = 0;
  clear_has_recoveryprice();
}
inline double WarrantData::recoveryprice() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.WarrantData.recoveryPrice)
  return recoveryprice_;
}
inline void WarrantData::set_recoveryprice(double value) {
  set_has_recoveryprice();
  recoveryprice_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.WarrantData.recoveryPrice)
}

// required double conversionRatio = 12;
inline bool WarrantData::has_conversionratio() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void WarrantData::set_has_conversionratio() {
  _has_bits_[0] |= 0x00001000u;
}
inline void WarrantData::clear_has_conversionratio() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void WarrantData::clear_conversionratio() {
  conversionratio_ = 0;
  clear_has_conversionratio();
}
inline double WarrantData::conversionratio() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.WarrantData.conversionRatio)
  return conversionratio_;
}
inline void WarrantData::set_conversionratio(double value) {
  set_has_conversionratio();
  conversionratio_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.WarrantData.conversionRatio)
}

// required int32 lotSize = 13;
inline bool WarrantData::has_lotsize() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void WarrantData::set_has_lotsize() {
  _has_bits_[0] |= 0x00008000u;
}
inline void WarrantData::clear_has_lotsize() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void WarrantData::clear_lotsize() {
  lotsize_ = 0;
  clear_has_lotsize();
}
inline ::google::protobuf::int32 WarrantData::lotsize() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.WarrantData.lotSize)
  return lotsize_;
}
inline void WarrantData::set_lotsize(::google::protobuf::int32 value) {
  set_has_lotsize();
  lotsize_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.WarrantData.lotSize)
}

// required double strikePrice = 14;
inline bool WarrantData::has_strikeprice() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void WarrantData::set_has_strikeprice() {
  _has_bits_[0] |= 0x00002000u;
}
inline void WarrantData::clear_has_strikeprice() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void WarrantData::clear_strikeprice() {
  strikeprice_ = 0;
  clear_has_strikeprice();
}
inline double WarrantData::strikeprice() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.WarrantData.strikePrice)
  return strikeprice_;
}
inline void WarrantData::set_strikeprice(double value) {
  set_has_strikeprice();
  strikeprice_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.WarrantData.strikePrice)
}

// required double lastClosePrice = 15;
inline bool WarrantData::has_lastcloseprice() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void WarrantData::set_has_lastcloseprice() {
  _has_bits_[0] |= 0x00004000u;
}
inline void WarrantData::clear_has_lastcloseprice() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void WarrantData::clear_lastcloseprice() {
  lastcloseprice_ = 0;
  clear_has_lastcloseprice();
}
inline double WarrantData::lastcloseprice() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.WarrantData.lastClosePrice)
  return lastcloseprice_;
}
inline void WarrantData::set_lastcloseprice(double value) {
  set_has_lastcloseprice();
  lastcloseprice_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.WarrantData.lastClosePrice)
}

// required string name = 16;
inline bool WarrantData::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WarrantData::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WarrantData::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WarrantData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& WarrantData::name() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.WarrantData.name)
  return name_.GetNoArena();
}
inline void WarrantData::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.WarrantData.name)
}
#if LANG_CXX11
inline void WarrantData::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_GetWarrant.WarrantData.name)
}
#endif
inline void WarrantData::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_GetWarrant.WarrantData.name)
}
inline void WarrantData::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_GetWarrant.WarrantData.name)
}
inline ::std::string* WarrantData::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Qot_GetWarrant.WarrantData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WarrantData::release_name() {
  // @@protoc_insertion_point(field_release:Qot_GetWarrant.WarrantData.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WarrantData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Qot_GetWarrant.WarrantData.name)
}

// required double curPrice = 17;
inline bool WarrantData::has_curprice() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void WarrantData::set_has_curprice() {
  _has_bits_[0] |= 0x00020000u;
}
inline void WarrantData::clear_has_curprice() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void WarrantData::clear_curprice() {
  curprice_ = 0;
  clear_has_curprice();
}
inline double WarrantData::curprice() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.WarrantData.curPrice)
  return curprice_;
}
inline void WarrantData::set_curprice(double value) {
  set_has_curprice();
  curprice_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.WarrantData.curPrice)
}

// required double priceChangeVal = 18;
inline bool WarrantData::has_pricechangeval() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void WarrantData::set_has_pricechangeval() {
  _has_bits_[0] |= 0x00040000u;
}
inline void WarrantData::clear_has_pricechangeval() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void WarrantData::clear_pricechangeval() {
  pricechangeval_ = 0;
  clear_has_pricechangeval();
}
inline double WarrantData::pricechangeval() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.WarrantData.priceChangeVal)
  return pricechangeval_;
}
inline void WarrantData::set_pricechangeval(double value) {
  set_has_pricechangeval();
  pricechangeval_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.WarrantData.priceChangeVal)
}

// required double changeRate = 19;
inline bool WarrantData::has_changerate() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void WarrantData::set_has_changerate() {
  _has_bits_[0] |= 0x00080000u;
}
inline void WarrantData::clear_has_changerate() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void WarrantData::clear_changerate() {
  changerate_ = 0;
  clear_has_changerate();
}
inline double WarrantData::changerate() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.WarrantData.changeRate)
  return changerate_;
}
inline void WarrantData::set_changerate(double value) {
  set_has_changerate();
  changerate_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.WarrantData.changeRate)
}

// required int32 status = 20;
inline bool WarrantData::has_status() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void WarrantData::set_has_status() {
  _has_bits_[0] |= 0x00010000u;
}
inline void WarrantData::clear_has_status() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void WarrantData::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 WarrantData::status() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.WarrantData.status)
  return status_;
}
inline void WarrantData::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.WarrantData.status)
}

// required double bidPrice = 21;
inline bool WarrantData::has_bidprice() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void WarrantData::set_has_bidprice() {
  _has_bits_[0] |= 0x00100000u;
}
inline void WarrantData::clear_has_bidprice() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void WarrantData::clear_bidprice() {
  bidprice_ = 0;
  clear_has_bidprice();
}
inline double WarrantData::bidprice() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.WarrantData.bidPrice)
  return bidprice_;
}
inline void WarrantData::set_bidprice(double value) {
  set_has_bidprice();
  bidprice_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.WarrantData.bidPrice)
}

// required double askPrice = 22;
inline bool WarrantData::has_askprice() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void WarrantData::set_has_askprice() {
  _has_bits_[0] |= 0x00200000u;
}
inline void WarrantData::clear_has_askprice() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void WarrantData::clear_askprice() {
  askprice_ = 0;
  clear_has_askprice();
}
inline double WarrantData::askprice() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.WarrantData.askPrice)
  return askprice_;
}
inline void WarrantData::set_askprice(double value) {
  set_has_askprice();
  askprice_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.WarrantData.askPrice)
}

// required int64 bidVol = 23;
inline bool WarrantData::has_bidvol() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void WarrantData::set_has_bidvol() {
  _has_bits_[0] |= 0x00400000u;
}
inline void WarrantData::clear_has_bidvol() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void WarrantData::clear_bidvol() {
  bidvol_ = GOOGLE_LONGLONG(0);
  clear_has_bidvol();
}
inline ::google::protobuf::int64 WarrantData::bidvol() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.WarrantData.bidVol)
  return bidvol_;
}
inline void WarrantData::set_bidvol(::google::protobuf::int64 value) {
  set_has_bidvol();
  bidvol_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.WarrantData.bidVol)
}

// required int64 askVol = 24;
inline bool WarrantData::has_askvol() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void WarrantData::set_has_askvol() {
  _has_bits_[0] |= 0x00800000u;
}
inline void WarrantData::clear_has_askvol() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void WarrantData::clear_askvol() {
  askvol_ = GOOGLE_LONGLONG(0);
  clear_has_askvol();
}
inline ::google::protobuf::int64 WarrantData::askvol() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.WarrantData.askVol)
  return askvol_;
}
inline void WarrantData::set_askvol(::google::protobuf::int64 value) {
  set_has_askvol();
  askvol_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.WarrantData.askVol)
}

// required int64 volume = 25;
inline bool WarrantData::has_volume() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void WarrantData::set_has_volume() {
  _has_bits_[0] |= 0x01000000u;
}
inline void WarrantData::clear_has_volume() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void WarrantData::clear_volume() {
  volume_ = GOOGLE_LONGLONG(0);
  clear_has_volume();
}
inline ::google::protobuf::int64 WarrantData::volume() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.WarrantData.volume)
  return volume_;
}
inline void WarrantData::set_volume(::google::protobuf::int64 value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.WarrantData.volume)
}

// required double turnover = 26;
inline bool WarrantData::has_turnover() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void WarrantData::set_has_turnover() {
  _has_bits_[0] |= 0x02000000u;
}
inline void WarrantData::clear_has_turnover() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void WarrantData::clear_turnover() {
  turnover_ = 0;
  clear_has_turnover();
}
inline double WarrantData::turnover() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.WarrantData.turnover)
  return turnover_;
}
inline void WarrantData::set_turnover(double value) {
  set_has_turnover();
  turnover_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.WarrantData.turnover)
}

// required double score = 27;
inline bool WarrantData::has_score() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void WarrantData::set_has_score() {
  _has_bits_[0] |= 0x04000000u;
}
inline void WarrantData::clear_has_score() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void WarrantData::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline double WarrantData::score() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.WarrantData.score)
  return score_;
}
inline void WarrantData::set_score(double value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.WarrantData.score)
}

// required double premium = 28;
inline bool WarrantData::has_premium() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void WarrantData::set_has_premium() {
  _has_bits_[0] |= 0x08000000u;
}
inline void WarrantData::clear_has_premium() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void WarrantData::clear_premium() {
  premium_ = 0;
  clear_has_premium();
}
inline double WarrantData::premium() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.WarrantData.premium)
  return premium_;
}
inline void WarrantData::set_premium(double value) {
  set_has_premium();
  premium_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.WarrantData.premium)
}

// required double breakEvenPoint = 29;
inline bool WarrantData::has_breakevenpoint() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void WarrantData::set_has_breakevenpoint() {
  _has_bits_[0] |= 0x10000000u;
}
inline void WarrantData::clear_has_breakevenpoint() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void WarrantData::clear_breakevenpoint() {
  breakevenpoint_ = 0;
  clear_has_breakevenpoint();
}
inline double WarrantData::breakevenpoint() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.WarrantData.breakEvenPoint)
  return breakevenpoint_;
}
inline void WarrantData::set_breakevenpoint(double value) {
  set_has_breakevenpoint();
  breakevenpoint_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.WarrantData.breakEvenPoint)
}

// required double leverage = 30;
inline bool WarrantData::has_leverage() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void WarrantData::set_has_leverage() {
  _has_bits_[0] |= 0x20000000u;
}
inline void WarrantData::clear_has_leverage() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void WarrantData::clear_leverage() {
  leverage_ = 0;
  clear_has_leverage();
}
inline double WarrantData::leverage() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.WarrantData.leverage)
  return leverage_;
}
inline void WarrantData::set_leverage(double value) {
  set_has_leverage();
  leverage_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.WarrantData.leverage)
}

// required double ipop = 31;
inline bool WarrantData::has_ipop() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void WarrantData::set_has_ipop() {
  _has_bits_[0] |= 0x40000000u;
}
inline void WarrantData::clear_has_ipop() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void WarrantData::clear_ipop() {
  ipop_ = 0;
  clear_has_ipop();
}
inline double WarrantData::ipop() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.WarrantData.ipop)
  return ipop_;
}
inline void WarrantData::set_ipop(double value) {
  set_has_ipop();
  ipop_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.WarrantData.ipop)
}

// optional double priceRecoveryRatio = 32;
inline bool WarrantData::has_pricerecoveryratio() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void WarrantData::set_has_pricerecoveryratio() {
  _has_bits_[0] |= 0x80000000u;
}
inline void WarrantData::clear_has_pricerecoveryratio() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void WarrantData::clear_pricerecoveryratio() {
  pricerecoveryratio_ = 0;
  clear_has_pricerecoveryratio();
}
inline double WarrantData::pricerecoveryratio() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.WarrantData.priceRecoveryRatio)
  return pricerecoveryratio_;
}
inline void WarrantData::set_pricerecoveryratio(double value) {
  set_has_pricerecoveryratio();
  pricerecoveryratio_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.WarrantData.priceRecoveryRatio)
}

// required double conversionPrice = 33;
inline bool WarrantData::has_conversionprice() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void WarrantData::set_has_conversionprice() {
  _has_bits_[1] |= 0x00000001u;
}
inline void WarrantData::clear_has_conversionprice() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void WarrantData::clear_conversionprice() {
  conversionprice_ = 0;
  clear_has_conversionprice();
}
inline double WarrantData::conversionprice() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.WarrantData.conversionPrice)
  return conversionprice_;
}
inline void WarrantData::set_conversionprice(double value) {
  set_has_conversionprice();
  conversionprice_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.WarrantData.conversionPrice)
}

// required double streetRate = 34;
inline bool WarrantData::has_streetrate() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void WarrantData::set_has_streetrate() {
  _has_bits_[1] |= 0x00000002u;
}
inline void WarrantData::clear_has_streetrate() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void WarrantData::clear_streetrate() {
  streetrate_ = 0;
  clear_has_streetrate();
}
inline double WarrantData::streetrate() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.WarrantData.streetRate)
  return streetrate_;
}
inline void WarrantData::set_streetrate(double value) {
  set_has_streetrate();
  streetrate_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.WarrantData.streetRate)
}

// required int64 streetVol = 35;
inline bool WarrantData::has_streetvol() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void WarrantData::set_has_streetvol() {
  _has_bits_[1] |= 0x00000004u;
}
inline void WarrantData::clear_has_streetvol() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void WarrantData::clear_streetvol() {
  streetvol_ = GOOGLE_LONGLONG(0);
  clear_has_streetvol();
}
inline ::google::protobuf::int64 WarrantData::streetvol() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.WarrantData.streetVol)
  return streetvol_;
}
inline void WarrantData::set_streetvol(::google::protobuf::int64 value) {
  set_has_streetvol();
  streetvol_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.WarrantData.streetVol)
}

// required double amplitude = 36;
inline bool WarrantData::has_amplitude() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void WarrantData::set_has_amplitude() {
  _has_bits_[1] |= 0x00000008u;
}
inline void WarrantData::clear_has_amplitude() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void WarrantData::clear_amplitude() {
  amplitude_ = 0;
  clear_has_amplitude();
}
inline double WarrantData::amplitude() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.WarrantData.amplitude)
  return amplitude_;
}
inline void WarrantData::set_amplitude(double value) {
  set_has_amplitude();
  amplitude_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.WarrantData.amplitude)
}

// required int64 issueSize = 37;
inline bool WarrantData::has_issuesize() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void WarrantData::set_has_issuesize() {
  _has_bits_[1] |= 0x00000010u;
}
inline void WarrantData::clear_has_issuesize() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void WarrantData::clear_issuesize() {
  issuesize_ = GOOGLE_LONGLONG(0);
  clear_has_issuesize();
}
inline ::google::protobuf::int64 WarrantData::issuesize() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.WarrantData.issueSize)
  return issuesize_;
}
inline void WarrantData::set_issuesize(::google::protobuf::int64 value) {
  set_has_issuesize();
  issuesize_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.WarrantData.issueSize)
}

// required double highPrice = 39;
inline bool WarrantData::has_highprice() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void WarrantData::set_has_highprice() {
  _has_bits_[1] |= 0x00000020u;
}
inline void WarrantData::clear_has_highprice() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void WarrantData::clear_highprice() {
  highprice_ = 0;
  clear_has_highprice();
}
inline double WarrantData::highprice() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.WarrantData.highPrice)
  return highprice_;
}
inline void WarrantData::set_highprice(double value) {
  set_has_highprice();
  highprice_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.WarrantData.highPrice)
}

// required double lowPrice = 40;
inline bool WarrantData::has_lowprice() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void WarrantData::set_has_lowprice() {
  _has_bits_[1] |= 0x00000040u;
}
inline void WarrantData::clear_has_lowprice() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void WarrantData::clear_lowprice() {
  lowprice_ = 0;
  clear_has_lowprice();
}
inline double WarrantData::lowprice() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.WarrantData.lowPrice)
  return lowprice_;
}
inline void WarrantData::set_lowprice(double value) {
  set_has_lowprice();
  lowprice_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.WarrantData.lowPrice)
}

// optional double impliedVolatility = 41;
inline bool WarrantData::has_impliedvolatility() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void WarrantData::set_has_impliedvolatility() {
  _has_bits_[1] |= 0x00000080u;
}
inline void WarrantData::clear_has_impliedvolatility() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void WarrantData::clear_impliedvolatility() {
  impliedvolatility_ = 0;
  clear_has_impliedvolatility();
}
inline double WarrantData::impliedvolatility() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.WarrantData.impliedVolatility)
  return impliedvolatility_;
}
inline void WarrantData::set_impliedvolatility(double value) {
  set_has_impliedvolatility();
  impliedvolatility_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.WarrantData.impliedVolatility)
}

// optional double delta = 42;
inline bool WarrantData::has_delta() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void WarrantData::set_has_delta() {
  _has_bits_[1] |= 0x00000100u;
}
inline void WarrantData::clear_has_delta() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void WarrantData::clear_delta() {
  delta_ = 0;
  clear_has_delta();
}
inline double WarrantData::delta() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.WarrantData.delta)
  return delta_;
}
inline void WarrantData::set_delta(double value) {
  set_has_delta();
  delta_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.WarrantData.delta)
}

// required double effectiveLeverage = 43;
inline bool WarrantData::has_effectiveleverage() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void WarrantData::set_has_effectiveleverage() {
  _has_bits_[1] |= 0x00000200u;
}
inline void WarrantData::clear_has_effectiveleverage() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void WarrantData::clear_effectiveleverage() {
  effectiveleverage_ = 0;
  clear_has_effectiveleverage();
}
inline double WarrantData::effectiveleverage() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.WarrantData.effectiveLeverage)
  return effectiveleverage_;
}
inline void WarrantData::set_effectiveleverage(double value) {
  set_has_effectiveleverage();
  effectiveleverage_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.WarrantData.effectiveLeverage)
}

// optional double upperStrikePrice = 44;
inline bool WarrantData::has_upperstrikeprice() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void WarrantData::set_has_upperstrikeprice() {
  _has_bits_[1] |= 0x00000400u;
}
inline void WarrantData::clear_has_upperstrikeprice() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void WarrantData::clear_upperstrikeprice() {
  upperstrikeprice_ = 0;
  clear_has_upperstrikeprice();
}
inline double WarrantData::upperstrikeprice() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.WarrantData.upperStrikePrice)
  return upperstrikeprice_;
}
inline void WarrantData::set_upperstrikeprice(double value) {
  set_has_upperstrikeprice();
  upperstrikeprice_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.WarrantData.upperStrikePrice)
}

// optional double lowerStrikePrice = 45;
inline bool WarrantData::has_lowerstrikeprice() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void WarrantData::set_has_lowerstrikeprice() {
  _has_bits_[1] |= 0x00000800u;
}
inline void WarrantData::clear_has_lowerstrikeprice() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void WarrantData::clear_lowerstrikeprice() {
  lowerstrikeprice_ = 0;
  clear_has_lowerstrikeprice();
}
inline double WarrantData::lowerstrikeprice() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.WarrantData.lowerStrikePrice)
  return lowerstrikeprice_;
}
inline void WarrantData::set_lowerstrikeprice(double value) {
  set_has_lowerstrikeprice();
  lowerstrikeprice_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.WarrantData.lowerStrikePrice)
}

// optional int32 inLinePriceStatus = 46;
inline bool WarrantData::has_inlinepricestatus() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void WarrantData::set_has_inlinepricestatus() {
  _has_bits_[1] |= 0x00001000u;
}
inline void WarrantData::clear_has_inlinepricestatus() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void WarrantData::clear_inlinepricestatus() {
  inlinepricestatus_ = 0;
  clear_has_inlinepricestatus();
}
inline ::google::protobuf::int32 WarrantData::inlinepricestatus() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.WarrantData.inLinePriceStatus)
  return inlinepricestatus_;
}
inline void WarrantData::set_inlinepricestatus(::google::protobuf::int32 value) {
  set_has_inlinepricestatus();
  inlinepricestatus_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.WarrantData.inLinePriceStatus)
}

// -------------------------------------------------------------------

// S2C

// required bool lastPage = 1;
inline bool S2C::has_lastpage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2C::set_has_lastpage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2C::clear_has_lastpage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2C::clear_lastpage() {
  lastpage_ = false;
  clear_has_lastpage();
}
inline bool S2C::lastpage() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.S2C.lastPage)
  return lastpage_;
}
inline void S2C::set_lastpage(bool value) {
  set_has_lastpage();
  lastpage_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.S2C.lastPage)
}

// required int32 allCount = 2;
inline bool S2C::has_allcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2C::set_has_allcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2C::clear_has_allcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2C::clear_allcount() {
  allcount_ = 0;
  clear_has_allcount();
}
inline ::google::protobuf::int32 S2C::allcount() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.S2C.allCount)
  return allcount_;
}
inline void S2C::set_allcount(::google::protobuf::int32 value) {
  set_has_allcount();
  allcount_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.S2C.allCount)
}

// repeated .Qot_GetWarrant.WarrantData warrantDataList = 3;
inline int S2C::warrantdatalist_size() const {
  return warrantdatalist_.size();
}
inline void S2C::clear_warrantdatalist() {
  warrantdatalist_.Clear();
}
inline const ::Qot_GetWarrant::WarrantData& S2C::warrantdatalist(int index) const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.S2C.warrantDataList)
  return warrantdatalist_.Get(index);
}
inline ::Qot_GetWarrant::WarrantData* S2C::mutable_warrantdatalist(int index) {
  // @@protoc_insertion_point(field_mutable:Qot_GetWarrant.S2C.warrantDataList)
  return warrantdatalist_.Mutable(index);
}
inline ::Qot_GetWarrant::WarrantData* S2C::add_warrantdatalist() {
  // @@protoc_insertion_point(field_add:Qot_GetWarrant.S2C.warrantDataList)
  return warrantdatalist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Qot_GetWarrant::WarrantData >*
S2C::mutable_warrantdatalist() {
  // @@protoc_insertion_point(field_mutable_list:Qot_GetWarrant.S2C.warrantDataList)
  return &warrantdatalist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Qot_GetWarrant::WarrantData >&
S2C::warrantdatalist() const {
  // @@protoc_insertion_point(field_list:Qot_GetWarrant.S2C.warrantDataList)
  return warrantdatalist_;
}

// -------------------------------------------------------------------

// Request

// required .Qot_GetWarrant.C2S c2s = 1;
inline bool Request::has_c2s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_c2s() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_c2s() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_c2s() {
  if (c2s_ != NULL) c2s_->Clear();
  clear_has_c2s();
}
inline const ::Qot_GetWarrant::C2S& Request::c2s() const {
  const ::Qot_GetWarrant::C2S* p = c2s_;
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.Request.c2s)
  return p != NULL ? *p : *reinterpret_cast<const ::Qot_GetWarrant::C2S*>(
      &::Qot_GetWarrant::_C2S_default_instance_);
}
inline ::Qot_GetWarrant::C2S* Request::release_c2s() {
  // @@protoc_insertion_point(field_release:Qot_GetWarrant.Request.c2s)
  clear_has_c2s();
  ::Qot_GetWarrant::C2S* temp = c2s_;
  c2s_ = NULL;
  return temp;
}
inline ::Qot_GetWarrant::C2S* Request::mutable_c2s() {
  set_has_c2s();
  if (c2s_ == NULL) {
    c2s_ = new ::Qot_GetWarrant::C2S;
  }
  // @@protoc_insertion_point(field_mutable:Qot_GetWarrant.Request.c2s)
  return c2s_;
}
inline void Request::set_allocated_c2s(::Qot_GetWarrant::C2S* c2s) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete c2s_;
  }
  if (c2s) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      c2s = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, c2s, submessage_arena);
    }
    set_has_c2s();
  } else {
    clear_has_c2s();
  }
  c2s_ = c2s;
  // @@protoc_insertion_point(field_set_allocated:Qot_GetWarrant.Request.c2s)
}

// -------------------------------------------------------------------

// Response

// required int32 retType = 1 [default = -400];
inline bool Response::has_rettype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Response::set_has_rettype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Response::clear_has_rettype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Response::clear_rettype() {
  rettype_ = -400;
  clear_has_rettype();
}
inline ::google::protobuf::int32 Response::rettype() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.Response.retType)
  return rettype_;
}
inline void Response::set_rettype(::google::protobuf::int32 value) {
  set_has_rettype();
  rettype_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.Response.retType)
}

// optional string retMsg = 2;
inline bool Response::has_retmsg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::set_has_retmsg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response::clear_has_retmsg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response::clear_retmsg() {
  retmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_retmsg();
}
inline const ::std::string& Response::retmsg() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.Response.retMsg)
  return retmsg_.GetNoArena();
}
inline void Response::set_retmsg(const ::std::string& value) {
  set_has_retmsg();
  retmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.Response.retMsg)
}
#if LANG_CXX11
inline void Response::set_retmsg(::std::string&& value) {
  set_has_retmsg();
  retmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_GetWarrant.Response.retMsg)
}
#endif
inline void Response::set_retmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_retmsg();
  retmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_GetWarrant.Response.retMsg)
}
inline void Response::set_retmsg(const char* value, size_t size) {
  set_has_retmsg();
  retmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_GetWarrant.Response.retMsg)
}
inline ::std::string* Response::mutable_retmsg() {
  set_has_retmsg();
  // @@protoc_insertion_point(field_mutable:Qot_GetWarrant.Response.retMsg)
  return retmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_retmsg() {
  // @@protoc_insertion_point(field_release:Qot_GetWarrant.Response.retMsg)
  clear_has_retmsg();
  return retmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_retmsg(::std::string* retmsg) {
  if (retmsg != NULL) {
    set_has_retmsg();
  } else {
    clear_has_retmsg();
  }
  retmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), retmsg);
  // @@protoc_insertion_point(field_set_allocated:Qot_GetWarrant.Response.retMsg)
}

// optional int32 errCode = 3;
inline bool Response::has_errcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Response::set_has_errcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Response::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Response::clear_errcode() {
  errcode_ = 0;
  clear_has_errcode();
}
inline ::google::protobuf::int32 Response::errcode() const {
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.Response.errCode)
  return errcode_;
}
inline void Response::set_errcode(::google::protobuf::int32 value) {
  set_has_errcode();
  errcode_ = value;
  // @@protoc_insertion_point(field_set:Qot_GetWarrant.Response.errCode)
}

// optional .Qot_GetWarrant.S2C s2c = 4;
inline bool Response::has_s2c() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response::set_has_s2c() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Response::clear_has_s2c() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Response::clear_s2c() {
  if (s2c_ != NULL) s2c_->Clear();
  clear_has_s2c();
}
inline const ::Qot_GetWarrant::S2C& Response::s2c() const {
  const ::Qot_GetWarrant::S2C* p = s2c_;
  // @@protoc_insertion_point(field_get:Qot_GetWarrant.Response.s2c)
  return p != NULL ? *p : *reinterpret_cast<const ::Qot_GetWarrant::S2C*>(
      &::Qot_GetWarrant::_S2C_default_instance_);
}
inline ::Qot_GetWarrant::S2C* Response::release_s2c() {
  // @@protoc_insertion_point(field_release:Qot_GetWarrant.Response.s2c)
  clear_has_s2c();
  ::Qot_GetWarrant::S2C* temp = s2c_;
  s2c_ = NULL;
  return temp;
}
inline ::Qot_GetWarrant::S2C* Response::mutable_s2c() {
  set_has_s2c();
  if (s2c_ == NULL) {
    s2c_ = new ::Qot_GetWarrant::S2C;
  }
  // @@protoc_insertion_point(field_mutable:Qot_GetWarrant.Response.s2c)
  return s2c_;
}
inline void Response::set_allocated_s2c(::Qot_GetWarrant::S2C* s2c) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete s2c_;
  }
  if (s2c) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      s2c = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, s2c, submessage_arena);
    }
    set_has_s2c();
  } else {
    clear_has_s2c();
  }
  s2c_ = s2c;
  // @@protoc_insertion_point(field_set_allocated:Qot_GetWarrant.Response.s2c)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Qot_GetWarrant

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Qot_5fGetWarrant_2eproto__INCLUDED
