// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Qot_GetSecuritySnapshot.proto

/*
Package Qot_GetSecuritySnapshot is a generated protocol buffer package.

It is generated from these files:
	Qot_GetSecuritySnapshot.proto

It has these top-level messages:
	C2S
	EquitySnapshotExData
	WarrantSnapshotExData
	OptionSnapshotExData
	IndexSnapshotExData
	PlateSnapshotExData
	FutureSnapshotExData
	SnapshotBasicData
	Snapshot
	S2C
	Request
	Response
*/
package Qot_GetSecuritySnapshot

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/stephenlyu/gofutuapi/futuproto/Common"
import Qot_Common "github.com/stephenlyu/gofutuapi/futuproto/Qot_Common"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type C2S struct {
	SecurityList     []*Qot_Common.Security `protobuf:"bytes,1,rep,name=securityList" json:"securityList,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *C2S) Reset()                    { *m = C2S{} }
func (m *C2S) String() string            { return proto.CompactTextString(m) }
func (*C2S) ProtoMessage()               {}
func (*C2S) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *C2S) GetSecurityList() []*Qot_Common.Security {
	if m != nil {
		return m.SecurityList
	}
	return nil
}

// 正股类型额外数据
type EquitySnapshotExData struct {
	IssuedShares         *int64   `protobuf:"varint,1,req,name=issuedShares" json:"issuedShares,omitempty"`
	IssuedMarketVal      *float64 `protobuf:"fixed64,2,req,name=issuedMarketVal" json:"issuedMarketVal,omitempty"`
	NetAsset             *float64 `protobuf:"fixed64,3,req,name=netAsset" json:"netAsset,omitempty"`
	NetProfit            *float64 `protobuf:"fixed64,4,req,name=netProfit" json:"netProfit,omitempty"`
	EarningsPershare     *float64 `protobuf:"fixed64,5,req,name=earningsPershare" json:"earningsPershare,omitempty"`
	OutstandingShares    *int64   `protobuf:"varint,6,req,name=outstandingShares" json:"outstandingShares,omitempty"`
	OutstandingMarketVal *float64 `protobuf:"fixed64,7,req,name=outstandingMarketVal" json:"outstandingMarketVal,omitempty"`
	NetAssetPershare     *float64 `protobuf:"fixed64,8,req,name=netAssetPershare" json:"netAssetPershare,omitempty"`
	EyRate               *float64 `protobuf:"fixed64,9,req,name=eyRate" json:"eyRate,omitempty"`
	PeRate               *float64 `protobuf:"fixed64,10,req,name=peRate" json:"peRate,omitempty"`
	PbRate               *float64 `protobuf:"fixed64,11,req,name=pbRate" json:"pbRate,omitempty"`
	PeTTMRate            *float64 `protobuf:"fixed64,12,req,name=peTTMRate" json:"peTTMRate,omitempty"`
	DividendTTM          *float64 `protobuf:"fixed64,13,opt,name=dividendTTM" json:"dividendTTM,omitempty"`
	DividendRatioTTM     *float64 `protobuf:"fixed64,14,opt,name=dividendRatioTTM" json:"dividendRatioTTM,omitempty"`
	DividendLFY          *float64 `protobuf:"fixed64,15,opt,name=dividendLFY" json:"dividendLFY,omitempty"`
	DividendLFYRatio     *float64 `protobuf:"fixed64,16,opt,name=dividendLFYRatio" json:"dividendLFYRatio,omitempty"`
	XXX_unrecognized     []byte   `json:"-"`
}

func (m *EquitySnapshotExData) Reset()                    { *m = EquitySnapshotExData{} }
func (m *EquitySnapshotExData) String() string            { return proto.CompactTextString(m) }
func (*EquitySnapshotExData) ProtoMessage()               {}
func (*EquitySnapshotExData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EquitySnapshotExData) GetIssuedShares() int64 {
	if m != nil && m.IssuedShares != nil {
		return *m.IssuedShares
	}
	return 0
}

func (m *EquitySnapshotExData) GetIssuedMarketVal() float64 {
	if m != nil && m.IssuedMarketVal != nil {
		return *m.IssuedMarketVal
	}
	return 0
}

func (m *EquitySnapshotExData) GetNetAsset() float64 {
	if m != nil && m.NetAsset != nil {
		return *m.NetAsset
	}
	return 0
}

func (m *EquitySnapshotExData) GetNetProfit() float64 {
	if m != nil && m.NetProfit != nil {
		return *m.NetProfit
	}
	return 0
}

func (m *EquitySnapshotExData) GetEarningsPershare() float64 {
	if m != nil && m.EarningsPershare != nil {
		return *m.EarningsPershare
	}
	return 0
}

func (m *EquitySnapshotExData) GetOutstandingShares() int64 {
	if m != nil && m.OutstandingShares != nil {
		return *m.OutstandingShares
	}
	return 0
}

func (m *EquitySnapshotExData) GetOutstandingMarketVal() float64 {
	if m != nil && m.OutstandingMarketVal != nil {
		return *m.OutstandingMarketVal
	}
	return 0
}

func (m *EquitySnapshotExData) GetNetAssetPershare() float64 {
	if m != nil && m.NetAssetPershare != nil {
		return *m.NetAssetPershare
	}
	return 0
}

func (m *EquitySnapshotExData) GetEyRate() float64 {
	if m != nil && m.EyRate != nil {
		return *m.EyRate
	}
	return 0
}

func (m *EquitySnapshotExData) GetPeRate() float64 {
	if m != nil && m.PeRate != nil {
		return *m.PeRate
	}
	return 0
}

func (m *EquitySnapshotExData) GetPbRate() float64 {
	if m != nil && m.PbRate != nil {
		return *m.PbRate
	}
	return 0
}

func (m *EquitySnapshotExData) GetPeTTMRate() float64 {
	if m != nil && m.PeTTMRate != nil {
		return *m.PeTTMRate
	}
	return 0
}

func (m *EquitySnapshotExData) GetDividendTTM() float64 {
	if m != nil && m.DividendTTM != nil {
		return *m.DividendTTM
	}
	return 0
}

func (m *EquitySnapshotExData) GetDividendRatioTTM() float64 {
	if m != nil && m.DividendRatioTTM != nil {
		return *m.DividendRatioTTM
	}
	return 0
}

func (m *EquitySnapshotExData) GetDividendLFY() float64 {
	if m != nil && m.DividendLFY != nil {
		return *m.DividendLFY
	}
	return 0
}

func (m *EquitySnapshotExData) GetDividendLFYRatio() float64 {
	if m != nil && m.DividendLFYRatio != nil {
		return *m.DividendLFYRatio
	}
	return 0
}

// 窝轮类型额外数据
type WarrantSnapshotExData struct {
	ConversionRate     *float64             `protobuf:"fixed64,1,req,name=conversionRate" json:"conversionRate,omitempty"`
	WarrantType        *int32               `protobuf:"varint,2,req,name=warrantType" json:"warrantType,omitempty"`
	StrikePrice        *float64             `protobuf:"fixed64,3,req,name=strikePrice" json:"strikePrice,omitempty"`
	MaturityTime       *string              `protobuf:"bytes,4,req,name=maturityTime" json:"maturityTime,omitempty"`
	EndTradeTime       *string              `protobuf:"bytes,5,req,name=endTradeTime" json:"endTradeTime,omitempty"`
	Owner              *Qot_Common.Security `protobuf:"bytes,6,req,name=owner" json:"owner,omitempty"`
	RecoveryPrice      *float64             `protobuf:"fixed64,7,req,name=recoveryPrice" json:"recoveryPrice,omitempty"`
	StreetVolumn       *int64               `protobuf:"varint,8,req,name=streetVolumn" json:"streetVolumn,omitempty"`
	IssueVolumn        *int64               `protobuf:"varint,9,req,name=issueVolumn" json:"issueVolumn,omitempty"`
	StreetRate         *float64             `protobuf:"fixed64,10,req,name=streetRate" json:"streetRate,omitempty"`
	Delta              *float64             `protobuf:"fixed64,11,req,name=delta" json:"delta,omitempty"`
	ImpliedVolatility  *float64             `protobuf:"fixed64,12,req,name=impliedVolatility" json:"impliedVolatility,omitempty"`
	Premium            *float64             `protobuf:"fixed64,13,req,name=premium" json:"premium,omitempty"`
	MaturityTimestamp  *float64             `protobuf:"fixed64,14,opt,name=maturityTimestamp" json:"maturityTimestamp,omitempty"`
	EndTradeTimestamp  *float64             `protobuf:"fixed64,15,opt,name=endTradeTimestamp" json:"endTradeTimestamp,omitempty"`
	Leverage           *float64             `protobuf:"fixed64,16,opt,name=leverage" json:"leverage,omitempty"`
	Ipop               *float64             `protobuf:"fixed64,17,opt,name=ipop" json:"ipop,omitempty"`
	BreakEvenPoint     *float64             `protobuf:"fixed64,18,opt,name=breakEvenPoint" json:"breakEvenPoint,omitempty"`
	ConversionPrice    *float64             `protobuf:"fixed64,19,opt,name=conversionPrice" json:"conversionPrice,omitempty"`
	PriceRecoveryRatio *float64             `protobuf:"fixed64,20,opt,name=priceRecoveryRatio" json:"priceRecoveryRatio,omitempty"`
	Score              *float64             `protobuf:"fixed64,21,opt,name=score" json:"score,omitempty"`
	UpperStrikePrice   *float64             `protobuf:"fixed64,22,opt,name=upperStrikePrice" json:"upperStrikePrice,omitempty"`
	LowerStrikePrice   *float64             `protobuf:"fixed64,23,opt,name=lowerStrikePrice" json:"lowerStrikePrice,omitempty"`
	InLinePriceStatus  *int32               `protobuf:"varint,24,opt,name=inLinePriceStatus" json:"inLinePriceStatus,omitempty"`
	XXX_unrecognized   []byte               `json:"-"`
}

func (m *WarrantSnapshotExData) Reset()                    { *m = WarrantSnapshotExData{} }
func (m *WarrantSnapshotExData) String() string            { return proto.CompactTextString(m) }
func (*WarrantSnapshotExData) ProtoMessage()               {}
func (*WarrantSnapshotExData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *WarrantSnapshotExData) GetConversionRate() float64 {
	if m != nil && m.ConversionRate != nil {
		return *m.ConversionRate
	}
	return 0
}

func (m *WarrantSnapshotExData) GetWarrantType() int32 {
	if m != nil && m.WarrantType != nil {
		return *m.WarrantType
	}
	return 0
}

func (m *WarrantSnapshotExData) GetStrikePrice() float64 {
	if m != nil && m.StrikePrice != nil {
		return *m.StrikePrice
	}
	return 0
}

func (m *WarrantSnapshotExData) GetMaturityTime() string {
	if m != nil && m.MaturityTime != nil {
		return *m.MaturityTime
	}
	return ""
}

func (m *WarrantSnapshotExData) GetEndTradeTime() string {
	if m != nil && m.EndTradeTime != nil {
		return *m.EndTradeTime
	}
	return ""
}

func (m *WarrantSnapshotExData) GetOwner() *Qot_Common.Security {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *WarrantSnapshotExData) GetRecoveryPrice() float64 {
	if m != nil && m.RecoveryPrice != nil {
		return *m.RecoveryPrice
	}
	return 0
}

func (m *WarrantSnapshotExData) GetStreetVolumn() int64 {
	if m != nil && m.StreetVolumn != nil {
		return *m.StreetVolumn
	}
	return 0
}

func (m *WarrantSnapshotExData) GetIssueVolumn() int64 {
	if m != nil && m.IssueVolumn != nil {
		return *m.IssueVolumn
	}
	return 0
}

func (m *WarrantSnapshotExData) GetStreetRate() float64 {
	if m != nil && m.StreetRate != nil {
		return *m.StreetRate
	}
	return 0
}

func (m *WarrantSnapshotExData) GetDelta() float64 {
	if m != nil && m.Delta != nil {
		return *m.Delta
	}
	return 0
}

func (m *WarrantSnapshotExData) GetImpliedVolatility() float64 {
	if m != nil && m.ImpliedVolatility != nil {
		return *m.ImpliedVolatility
	}
	return 0
}

func (m *WarrantSnapshotExData) GetPremium() float64 {
	if m != nil && m.Premium != nil {
		return *m.Premium
	}
	return 0
}

func (m *WarrantSnapshotExData) GetMaturityTimestamp() float64 {
	if m != nil && m.MaturityTimestamp != nil {
		return *m.MaturityTimestamp
	}
	return 0
}

func (m *WarrantSnapshotExData) GetEndTradeTimestamp() float64 {
	if m != nil && m.EndTradeTimestamp != nil {
		return *m.EndTradeTimestamp
	}
	return 0
}

func (m *WarrantSnapshotExData) GetLeverage() float64 {
	if m != nil && m.Leverage != nil {
		return *m.Leverage
	}
	return 0
}

func (m *WarrantSnapshotExData) GetIpop() float64 {
	if m != nil && m.Ipop != nil {
		return *m.Ipop
	}
	return 0
}

func (m *WarrantSnapshotExData) GetBreakEvenPoint() float64 {
	if m != nil && m.BreakEvenPoint != nil {
		return *m.BreakEvenPoint
	}
	return 0
}

func (m *WarrantSnapshotExData) GetConversionPrice() float64 {
	if m != nil && m.ConversionPrice != nil {
		return *m.ConversionPrice
	}
	return 0
}

func (m *WarrantSnapshotExData) GetPriceRecoveryRatio() float64 {
	if m != nil && m.PriceRecoveryRatio != nil {
		return *m.PriceRecoveryRatio
	}
	return 0
}

func (m *WarrantSnapshotExData) GetScore() float64 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *WarrantSnapshotExData) GetUpperStrikePrice() float64 {
	if m != nil && m.UpperStrikePrice != nil {
		return *m.UpperStrikePrice
	}
	return 0
}

func (m *WarrantSnapshotExData) GetLowerStrikePrice() float64 {
	if m != nil && m.LowerStrikePrice != nil {
		return *m.LowerStrikePrice
	}
	return 0
}

func (m *WarrantSnapshotExData) GetInLinePriceStatus() int32 {
	if m != nil && m.InLinePriceStatus != nil {
		return *m.InLinePriceStatus
	}
	return 0
}

// 期权类型额外数据
type OptionSnapshotExData struct {
	Type              *int32               `protobuf:"varint,1,req,name=type" json:"type,omitempty"`
	Owner             *Qot_Common.Security `protobuf:"bytes,2,req,name=owner" json:"owner,omitempty"`
	StrikeTime        *string              `protobuf:"bytes,3,req,name=strikeTime" json:"strikeTime,omitempty"`
	StrikePrice       *float64             `protobuf:"fixed64,4,req,name=strikePrice" json:"strikePrice,omitempty"`
	ContractSize      *int32               `protobuf:"varint,5,req,name=contractSize" json:"contractSize,omitempty"`
	OpenInterest      *int32               `protobuf:"varint,6,req,name=openInterest" json:"openInterest,omitempty"`
	ImpliedVolatility *float64             `protobuf:"fixed64,7,req,name=impliedVolatility" json:"impliedVolatility,omitempty"`
	Premium           *float64             `protobuf:"fixed64,8,req,name=premium" json:"premium,omitempty"`
	Delta             *float64             `protobuf:"fixed64,9,req,name=delta" json:"delta,omitempty"`
	Gamma             *float64             `protobuf:"fixed64,10,req,name=gamma" json:"gamma,omitempty"`
	Vega              *float64             `protobuf:"fixed64,11,req,name=vega" json:"vega,omitempty"`
	Theta             *float64             `protobuf:"fixed64,12,req,name=theta" json:"theta,omitempty"`
	Rho               *float64             `protobuf:"fixed64,13,req,name=rho" json:"rho,omitempty"`
	StrikeTimestamp   *float64             `protobuf:"fixed64,14,opt,name=strikeTimestamp" json:"strikeTimestamp,omitempty"`
	// 以下字段仅支持港股期权
	IndexOptionType      *int32   `protobuf:"varint,15,opt,name=indexOptionType" json:"indexOptionType,omitempty"`
	NetOpenInterest      *int32   `protobuf:"varint,16,opt,name=netOpenInterest" json:"netOpenInterest,omitempty"`
	ExpiryDateDistance   *int32   `protobuf:"varint,17,opt,name=expiryDateDistance" json:"expiryDateDistance,omitempty"`
	ContractNominalValue *float64 `protobuf:"fixed64,18,opt,name=contractNominalValue" json:"contractNominalValue,omitempty"`
	OwnerLotMultiplier   *float64 `protobuf:"fixed64,19,opt,name=ownerLotMultiplier" json:"ownerLotMultiplier,omitempty"`
	OptionAreaType       *int32   `protobuf:"varint,20,opt,name=optionAreaType" json:"optionAreaType,omitempty"`
	ContractMultiplier   *float64 `protobuf:"fixed64,21,opt,name=contractMultiplier" json:"contractMultiplier,omitempty"`
	XXX_unrecognized     []byte   `json:"-"`
}

func (m *OptionSnapshotExData) Reset()                    { *m = OptionSnapshotExData{} }
func (m *OptionSnapshotExData) String() string            { return proto.CompactTextString(m) }
func (*OptionSnapshotExData) ProtoMessage()               {}
func (*OptionSnapshotExData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *OptionSnapshotExData) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *OptionSnapshotExData) GetOwner() *Qot_Common.Security {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *OptionSnapshotExData) GetStrikeTime() string {
	if m != nil && m.StrikeTime != nil {
		return *m.StrikeTime
	}
	return ""
}

func (m *OptionSnapshotExData) GetStrikePrice() float64 {
	if m != nil && m.StrikePrice != nil {
		return *m.StrikePrice
	}
	return 0
}

func (m *OptionSnapshotExData) GetContractSize() int32 {
	if m != nil && m.ContractSize != nil {
		return *m.ContractSize
	}
	return 0
}

func (m *OptionSnapshotExData) GetOpenInterest() int32 {
	if m != nil && m.OpenInterest != nil {
		return *m.OpenInterest
	}
	return 0
}

func (m *OptionSnapshotExData) GetImpliedVolatility() float64 {
	if m != nil && m.ImpliedVolatility != nil {
		return *m.ImpliedVolatility
	}
	return 0
}

func (m *OptionSnapshotExData) GetPremium() float64 {
	if m != nil && m.Premium != nil {
		return *m.Premium
	}
	return 0
}

func (m *OptionSnapshotExData) GetDelta() float64 {
	if m != nil && m.Delta != nil {
		return *m.Delta
	}
	return 0
}

func (m *OptionSnapshotExData) GetGamma() float64 {
	if m != nil && m.Gamma != nil {
		return *m.Gamma
	}
	return 0
}

func (m *OptionSnapshotExData) GetVega() float64 {
	if m != nil && m.Vega != nil {
		return *m.Vega
	}
	return 0
}

func (m *OptionSnapshotExData) GetTheta() float64 {
	if m != nil && m.Theta != nil {
		return *m.Theta
	}
	return 0
}

func (m *OptionSnapshotExData) GetRho() float64 {
	if m != nil && m.Rho != nil {
		return *m.Rho
	}
	return 0
}

func (m *OptionSnapshotExData) GetStrikeTimestamp() float64 {
	if m != nil && m.StrikeTimestamp != nil {
		return *m.StrikeTimestamp
	}
	return 0
}

func (m *OptionSnapshotExData) GetIndexOptionType() int32 {
	if m != nil && m.IndexOptionType != nil {
		return *m.IndexOptionType
	}
	return 0
}

func (m *OptionSnapshotExData) GetNetOpenInterest() int32 {
	if m != nil && m.NetOpenInterest != nil {
		return *m.NetOpenInterest
	}
	return 0
}

func (m *OptionSnapshotExData) GetExpiryDateDistance() int32 {
	if m != nil && m.ExpiryDateDistance != nil {
		return *m.ExpiryDateDistance
	}
	return 0
}

func (m *OptionSnapshotExData) GetContractNominalValue() float64 {
	if m != nil && m.ContractNominalValue != nil {
		return *m.ContractNominalValue
	}
	return 0
}

func (m *OptionSnapshotExData) GetOwnerLotMultiplier() float64 {
	if m != nil && m.OwnerLotMultiplier != nil {
		return *m.OwnerLotMultiplier
	}
	return 0
}

func (m *OptionSnapshotExData) GetOptionAreaType() int32 {
	if m != nil && m.OptionAreaType != nil {
		return *m.OptionAreaType
	}
	return 0
}

func (m *OptionSnapshotExData) GetContractMultiplier() float64 {
	if m != nil && m.ContractMultiplier != nil {
		return *m.ContractMultiplier
	}
	return 0
}

// 指数类型额外数据
type IndexSnapshotExData struct {
	RaiseCount       *int32 `protobuf:"varint,1,req,name=raiseCount" json:"raiseCount,omitempty"`
	FallCount        *int32 `protobuf:"varint,2,req,name=fallCount" json:"fallCount,omitempty"`
	EqualCount       *int32 `protobuf:"varint,3,req,name=equalCount" json:"equalCount,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *IndexSnapshotExData) Reset()                    { *m = IndexSnapshotExData{} }
func (m *IndexSnapshotExData) String() string            { return proto.CompactTextString(m) }
func (*IndexSnapshotExData) ProtoMessage()               {}
func (*IndexSnapshotExData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *IndexSnapshotExData) GetRaiseCount() int32 {
	if m != nil && m.RaiseCount != nil {
		return *m.RaiseCount
	}
	return 0
}

func (m *IndexSnapshotExData) GetFallCount() int32 {
	if m != nil && m.FallCount != nil {
		return *m.FallCount
	}
	return 0
}

func (m *IndexSnapshotExData) GetEqualCount() int32 {
	if m != nil && m.EqualCount != nil {
		return *m.EqualCount
	}
	return 0
}

// 板块类型额外数据
type PlateSnapshotExData struct {
	RaiseCount       *int32 `protobuf:"varint,1,req,name=raiseCount" json:"raiseCount,omitempty"`
	FallCount        *int32 `protobuf:"varint,2,req,name=fallCount" json:"fallCount,omitempty"`
	EqualCount       *int32 `protobuf:"varint,3,req,name=equalCount" json:"equalCount,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PlateSnapshotExData) Reset()                    { *m = PlateSnapshotExData{} }
func (m *PlateSnapshotExData) String() string            { return proto.CompactTextString(m) }
func (*PlateSnapshotExData) ProtoMessage()               {}
func (*PlateSnapshotExData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PlateSnapshotExData) GetRaiseCount() int32 {
	if m != nil && m.RaiseCount != nil {
		return *m.RaiseCount
	}
	return 0
}

func (m *PlateSnapshotExData) GetFallCount() int32 {
	if m != nil && m.FallCount != nil {
		return *m.FallCount
	}
	return 0
}

func (m *PlateSnapshotExData) GetEqualCount() int32 {
	if m != nil && m.EqualCount != nil {
		return *m.EqualCount
	}
	return 0
}

// 期货类型额外数据
type FutureSnapshotExData struct {
	LastSettlePrice    *float64 `protobuf:"fixed64,1,req,name=lastSettlePrice" json:"lastSettlePrice,omitempty"`
	Position           *int32   `protobuf:"varint,2,req,name=position" json:"position,omitempty"`
	PositionChange     *int32   `protobuf:"varint,3,req,name=positionChange" json:"positionChange,omitempty"`
	LastTradeTime      *string  `protobuf:"bytes,4,req,name=lastTradeTime" json:"lastTradeTime,omitempty"`
	LastTradeTimestamp *float64 `protobuf:"fixed64,5,opt,name=lastTradeTimestamp" json:"lastTradeTimestamp,omitempty"`
	IsMainContract     *bool    `protobuf:"varint,6,req,name=isMainContract" json:"isMainContract,omitempty"`
	XXX_unrecognized   []byte   `json:"-"`
}

func (m *FutureSnapshotExData) Reset()                    { *m = FutureSnapshotExData{} }
func (m *FutureSnapshotExData) String() string            { return proto.CompactTextString(m) }
func (*FutureSnapshotExData) ProtoMessage()               {}
func (*FutureSnapshotExData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *FutureSnapshotExData) GetLastSettlePrice() float64 {
	if m != nil && m.LastSettlePrice != nil {
		return *m.LastSettlePrice
	}
	return 0
}

func (m *FutureSnapshotExData) GetPosition() int32 {
	if m != nil && m.Position != nil {
		return *m.Position
	}
	return 0
}

func (m *FutureSnapshotExData) GetPositionChange() int32 {
	if m != nil && m.PositionChange != nil {
		return *m.PositionChange
	}
	return 0
}

func (m *FutureSnapshotExData) GetLastTradeTime() string {
	if m != nil && m.LastTradeTime != nil {
		return *m.LastTradeTime
	}
	return ""
}

func (m *FutureSnapshotExData) GetLastTradeTimestamp() float64 {
	if m != nil && m.LastTradeTimestamp != nil {
		return *m.LastTradeTimestamp
	}
	return 0
}

func (m *FutureSnapshotExData) GetIsMainContract() bool {
	if m != nil && m.IsMainContract != nil {
		return *m.IsMainContract
	}
	return false
}

// 基本快照数据
type SnapshotBasicData struct {
	Security                *Qot_Common.Security           `protobuf:"bytes,1,req,name=security" json:"security,omitempty"`
	Type                    *int32                         `protobuf:"varint,2,req,name=type" json:"type,omitempty"`
	IsSuspend               *bool                          `protobuf:"varint,3,req,name=isSuspend" json:"isSuspend,omitempty"`
	ListTime                *string                        `protobuf:"bytes,4,req,name=listTime" json:"listTime,omitempty"`
	LotSize                 *int32                         `protobuf:"varint,5,req,name=lotSize" json:"lotSize,omitempty"`
	PriceSpread             *float64                       `protobuf:"fixed64,6,req,name=priceSpread" json:"priceSpread,omitempty"`
	UpdateTime              *string                        `protobuf:"bytes,7,req,name=updateTime" json:"updateTime,omitempty"`
	HighPrice               *float64                       `protobuf:"fixed64,8,req,name=highPrice" json:"highPrice,omitempty"`
	OpenPrice               *float64                       `protobuf:"fixed64,9,req,name=openPrice" json:"openPrice,omitempty"`
	LowPrice                *float64                       `protobuf:"fixed64,10,req,name=lowPrice" json:"lowPrice,omitempty"`
	LastClosePrice          *float64                       `protobuf:"fixed64,11,req,name=lastClosePrice" json:"lastClosePrice,omitempty"`
	CurPrice                *float64                       `protobuf:"fixed64,12,req,name=curPrice" json:"curPrice,omitempty"`
	Volume                  *int64                         `protobuf:"varint,13,req,name=volume" json:"volume,omitempty"`
	Turnover                *float64                       `protobuf:"fixed64,14,req,name=turnover" json:"turnover,omitempty"`
	TurnoverRate            *float64                       `protobuf:"fixed64,15,req,name=turnoverRate" json:"turnoverRate,omitempty"`
	ListTimestamp           *float64                       `protobuf:"fixed64,16,opt,name=listTimestamp" json:"listTimestamp,omitempty"`
	UpdateTimestamp         *float64                       `protobuf:"fixed64,17,opt,name=updateTimestamp" json:"updateTimestamp,omitempty"`
	AskPrice                *float64                       `protobuf:"fixed64,18,opt,name=askPrice" json:"askPrice,omitempty"`
	BidPrice                *float64                       `protobuf:"fixed64,19,opt,name=bidPrice" json:"bidPrice,omitempty"`
	AskVol                  *int64                         `protobuf:"varint,20,opt,name=askVol" json:"askVol,omitempty"`
	BidVol                  *int64                         `protobuf:"varint,21,opt,name=bidVol" json:"bidVol,omitempty"`
	EnableMargin            *bool                          `protobuf:"varint,22,opt,name=enableMargin" json:"enableMargin,omitempty"`
	MortgageRatio           *float64                       `protobuf:"fixed64,23,opt,name=mortgageRatio" json:"mortgageRatio,omitempty"`
	LongMarginInitialRatio  *float64                       `protobuf:"fixed64,24,opt,name=longMarginInitialRatio" json:"longMarginInitialRatio,omitempty"`
	EnableShortSell         *bool                          `protobuf:"varint,25,opt,name=enableShortSell" json:"enableShortSell,omitempty"`
	ShortSellRate           *float64                       `protobuf:"fixed64,26,opt,name=shortSellRate" json:"shortSellRate,omitempty"`
	ShortAvailableVolume    *int64                         `protobuf:"varint,27,opt,name=shortAvailableVolume" json:"shortAvailableVolume,omitempty"`
	ShortMarginInitialRatio *float64                       `protobuf:"fixed64,28,opt,name=shortMarginInitialRatio" json:"shortMarginInitialRatio,omitempty"`
	Amplitude               *float64                       `protobuf:"fixed64,29,opt,name=amplitude" json:"amplitude,omitempty"`
	AvgPrice                *float64                       `protobuf:"fixed64,30,opt,name=avgPrice" json:"avgPrice,omitempty"`
	BidAskRatio             *float64                       `protobuf:"fixed64,31,opt,name=bidAskRatio" json:"bidAskRatio,omitempty"`
	VolumeRatio             *float64                       `protobuf:"fixed64,32,opt,name=volumeRatio" json:"volumeRatio,omitempty"`
	Highest52WeeksPrice     *float64                       `protobuf:"fixed64,33,opt,name=highest52WeeksPrice" json:"highest52WeeksPrice,omitempty"`
	Lowest52WeeksPrice      *float64                       `protobuf:"fixed64,34,opt,name=lowest52WeeksPrice" json:"lowest52WeeksPrice,omitempty"`
	HighestHistoryPrice     *float64                       `protobuf:"fixed64,35,opt,name=highestHistoryPrice" json:"highestHistoryPrice,omitempty"`
	LowestHistoryPrice      *float64                       `protobuf:"fixed64,36,opt,name=lowestHistoryPrice" json:"lowestHistoryPrice,omitempty"`
	PreMarket               *Qot_Common.PreAfterMarketData `protobuf:"bytes,37,opt,name=preMarket" json:"preMarket,omitempty"`
	AfterMarket             *Qot_Common.PreAfterMarketData `protobuf:"bytes,38,opt,name=afterMarket" json:"afterMarket,omitempty"`
	SecStatus               *int32                         `protobuf:"varint,39,opt,name=secStatus" json:"secStatus,omitempty"`
	XXX_unrecognized        []byte                         `json:"-"`
}

func (m *SnapshotBasicData) Reset()                    { *m = SnapshotBasicData{} }
func (m *SnapshotBasicData) String() string            { return proto.CompactTextString(m) }
func (*SnapshotBasicData) ProtoMessage()               {}
func (*SnapshotBasicData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SnapshotBasicData) GetSecurity() *Qot_Common.Security {
	if m != nil {
		return m.Security
	}
	return nil
}

func (m *SnapshotBasicData) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *SnapshotBasicData) GetIsSuspend() bool {
	if m != nil && m.IsSuspend != nil {
		return *m.IsSuspend
	}
	return false
}

func (m *SnapshotBasicData) GetListTime() string {
	if m != nil && m.ListTime != nil {
		return *m.ListTime
	}
	return ""
}

func (m *SnapshotBasicData) GetLotSize() int32 {
	if m != nil && m.LotSize != nil {
		return *m.LotSize
	}
	return 0
}

func (m *SnapshotBasicData) GetPriceSpread() float64 {
	if m != nil && m.PriceSpread != nil {
		return *m.PriceSpread
	}
	return 0
}

func (m *SnapshotBasicData) GetUpdateTime() string {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return ""
}

func (m *SnapshotBasicData) GetHighPrice() float64 {
	if m != nil && m.HighPrice != nil {
		return *m.HighPrice
	}
	return 0
}

func (m *SnapshotBasicData) GetOpenPrice() float64 {
	if m != nil && m.OpenPrice != nil {
		return *m.OpenPrice
	}
	return 0
}

func (m *SnapshotBasicData) GetLowPrice() float64 {
	if m != nil && m.LowPrice != nil {
		return *m.LowPrice
	}
	return 0
}

func (m *SnapshotBasicData) GetLastClosePrice() float64 {
	if m != nil && m.LastClosePrice != nil {
		return *m.LastClosePrice
	}
	return 0
}

func (m *SnapshotBasicData) GetCurPrice() float64 {
	if m != nil && m.CurPrice != nil {
		return *m.CurPrice
	}
	return 0
}

func (m *SnapshotBasicData) GetVolume() int64 {
	if m != nil && m.Volume != nil {
		return *m.Volume
	}
	return 0
}

func (m *SnapshotBasicData) GetTurnover() float64 {
	if m != nil && m.Turnover != nil {
		return *m.Turnover
	}
	return 0
}

func (m *SnapshotBasicData) GetTurnoverRate() float64 {
	if m != nil && m.TurnoverRate != nil {
		return *m.TurnoverRate
	}
	return 0
}

func (m *SnapshotBasicData) GetListTimestamp() float64 {
	if m != nil && m.ListTimestamp != nil {
		return *m.ListTimestamp
	}
	return 0
}

func (m *SnapshotBasicData) GetUpdateTimestamp() float64 {
	if m != nil && m.UpdateTimestamp != nil {
		return *m.UpdateTimestamp
	}
	return 0
}

func (m *SnapshotBasicData) GetAskPrice() float64 {
	if m != nil && m.AskPrice != nil {
		return *m.AskPrice
	}
	return 0
}

func (m *SnapshotBasicData) GetBidPrice() float64 {
	if m != nil && m.BidPrice != nil {
		return *m.BidPrice
	}
	return 0
}

func (m *SnapshotBasicData) GetAskVol() int64 {
	if m != nil && m.AskVol != nil {
		return *m.AskVol
	}
	return 0
}

func (m *SnapshotBasicData) GetBidVol() int64 {
	if m != nil && m.BidVol != nil {
		return *m.BidVol
	}
	return 0
}

func (m *SnapshotBasicData) GetEnableMargin() bool {
	if m != nil && m.EnableMargin != nil {
		return *m.EnableMargin
	}
	return false
}

func (m *SnapshotBasicData) GetMortgageRatio() float64 {
	if m != nil && m.MortgageRatio != nil {
		return *m.MortgageRatio
	}
	return 0
}

func (m *SnapshotBasicData) GetLongMarginInitialRatio() float64 {
	if m != nil && m.LongMarginInitialRatio != nil {
		return *m.LongMarginInitialRatio
	}
	return 0
}

func (m *SnapshotBasicData) GetEnableShortSell() bool {
	if m != nil && m.EnableShortSell != nil {
		return *m.EnableShortSell
	}
	return false
}

func (m *SnapshotBasicData) GetShortSellRate() float64 {
	if m != nil && m.ShortSellRate != nil {
		return *m.ShortSellRate
	}
	return 0
}

func (m *SnapshotBasicData) GetShortAvailableVolume() int64 {
	if m != nil && m.ShortAvailableVolume != nil {
		return *m.ShortAvailableVolume
	}
	return 0
}

func (m *SnapshotBasicData) GetShortMarginInitialRatio() float64 {
	if m != nil && m.ShortMarginInitialRatio != nil {
		return *m.ShortMarginInitialRatio
	}
	return 0
}

func (m *SnapshotBasicData) GetAmplitude() float64 {
	if m != nil && m.Amplitude != nil {
		return *m.Amplitude
	}
	return 0
}

func (m *SnapshotBasicData) GetAvgPrice() float64 {
	if m != nil && m.AvgPrice != nil {
		return *m.AvgPrice
	}
	return 0
}

func (m *SnapshotBasicData) GetBidAskRatio() float64 {
	if m != nil && m.BidAskRatio != nil {
		return *m.BidAskRatio
	}
	return 0
}

func (m *SnapshotBasicData) GetVolumeRatio() float64 {
	if m != nil && m.VolumeRatio != nil {
		return *m.VolumeRatio
	}
	return 0
}

func (m *SnapshotBasicData) GetHighest52WeeksPrice() float64 {
	if m != nil && m.Highest52WeeksPrice != nil {
		return *m.Highest52WeeksPrice
	}
	return 0
}

func (m *SnapshotBasicData) GetLowest52WeeksPrice() float64 {
	if m != nil && m.Lowest52WeeksPrice != nil {
		return *m.Lowest52WeeksPrice
	}
	return 0
}

func (m *SnapshotBasicData) GetHighestHistoryPrice() float64 {
	if m != nil && m.HighestHistoryPrice != nil {
		return *m.HighestHistoryPrice
	}
	return 0
}

func (m *SnapshotBasicData) GetLowestHistoryPrice() float64 {
	if m != nil && m.LowestHistoryPrice != nil {
		return *m.LowestHistoryPrice
	}
	return 0
}

func (m *SnapshotBasicData) GetPreMarket() *Qot_Common.PreAfterMarketData {
	if m != nil {
		return m.PreMarket
	}
	return nil
}

func (m *SnapshotBasicData) GetAfterMarket() *Qot_Common.PreAfterMarketData {
	if m != nil {
		return m.AfterMarket
	}
	return nil
}

func (m *SnapshotBasicData) GetSecStatus() int32 {
	if m != nil && m.SecStatus != nil {
		return *m.SecStatus
	}
	return 0
}

type Snapshot struct {
	Basic            *SnapshotBasicData     `protobuf:"bytes,1,req,name=basic" json:"basic,omitempty"`
	EquityExData     *EquitySnapshotExData  `protobuf:"bytes,2,opt,name=equityExData" json:"equityExData,omitempty"`
	WarrantExData    *WarrantSnapshotExData `protobuf:"bytes,3,opt,name=warrantExData" json:"warrantExData,omitempty"`
	OptionExData     *OptionSnapshotExData  `protobuf:"bytes,4,opt,name=optionExData" json:"optionExData,omitempty"`
	IndexExData      *IndexSnapshotExData   `protobuf:"bytes,5,opt,name=indexExData" json:"indexExData,omitempty"`
	PlateExData      *PlateSnapshotExData   `protobuf:"bytes,6,opt,name=plateExData" json:"plateExData,omitempty"`
	FutureExData     *FutureSnapshotExData  `protobuf:"bytes,7,opt,name=futureExData" json:"futureExData,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *Snapshot) Reset()                    { *m = Snapshot{} }
func (m *Snapshot) String() string            { return proto.CompactTextString(m) }
func (*Snapshot) ProtoMessage()               {}
func (*Snapshot) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Snapshot) GetBasic() *SnapshotBasicData {
	if m != nil {
		return m.Basic
	}
	return nil
}

func (m *Snapshot) GetEquityExData() *EquitySnapshotExData {
	if m != nil {
		return m.EquityExData
	}
	return nil
}

func (m *Snapshot) GetWarrantExData() *WarrantSnapshotExData {
	if m != nil {
		return m.WarrantExData
	}
	return nil
}

func (m *Snapshot) GetOptionExData() *OptionSnapshotExData {
	if m != nil {
		return m.OptionExData
	}
	return nil
}

func (m *Snapshot) GetIndexExData() *IndexSnapshotExData {
	if m != nil {
		return m.IndexExData
	}
	return nil
}

func (m *Snapshot) GetPlateExData() *PlateSnapshotExData {
	if m != nil {
		return m.PlateExData
	}
	return nil
}

func (m *Snapshot) GetFutureExData() *FutureSnapshotExData {
	if m != nil {
		return m.FutureExData
	}
	return nil
}

type S2C struct {
	SnapshotList     []*Snapshot `protobuf:"bytes,1,rep,name=snapshotList" json:"snapshotList,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *S2C) Reset()                    { *m = S2C{} }
func (m *S2C) String() string            { return proto.CompactTextString(m) }
func (*S2C) ProtoMessage()               {}
func (*S2C) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *S2C) GetSnapshotList() []*Snapshot {
	if m != nil {
		return m.SnapshotList
	}
	return nil
}

type Request struct {
	C2S              *C2S   `protobuf:"bytes,1,req,name=c2s" json:"c2s,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Request) GetC2S() *C2S {
	if m != nil {
		return m.C2S
	}
	return nil
}

type Response struct {
	RetType          *int32  `protobuf:"varint,1,req,name=retType,def=-400" json:"retType,omitempty"`
	RetMsg           *string `protobuf:"bytes,2,opt,name=retMsg" json:"retMsg,omitempty"`
	ErrCode          *int32  `protobuf:"varint,3,opt,name=errCode" json:"errCode,omitempty"`
	S2C              *S2C    `protobuf:"bytes,4,opt,name=s2c" json:"s2c,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

const Default_Response_RetType int32 = -400

func (m *Response) GetRetType() int32 {
	if m != nil && m.RetType != nil {
		return *m.RetType
	}
	return Default_Response_RetType
}

func (m *Response) GetRetMsg() string {
	if m != nil && m.RetMsg != nil {
		return *m.RetMsg
	}
	return ""
}

func (m *Response) GetErrCode() int32 {
	if m != nil && m.ErrCode != nil {
		return *m.ErrCode
	}
	return 0
}

func (m *Response) GetS2C() *S2C {
	if m != nil {
		return m.S2C
	}
	return nil
}

func init() {
	proto.RegisterType((*C2S)(nil), "Qot_GetSecuritySnapshot.C2S")
	proto.RegisterType((*EquitySnapshotExData)(nil), "Qot_GetSecuritySnapshot.EquitySnapshotExData")
	proto.RegisterType((*WarrantSnapshotExData)(nil), "Qot_GetSecuritySnapshot.WarrantSnapshotExData")
	proto.RegisterType((*OptionSnapshotExData)(nil), "Qot_GetSecuritySnapshot.OptionSnapshotExData")
	proto.RegisterType((*IndexSnapshotExData)(nil), "Qot_GetSecuritySnapshot.IndexSnapshotExData")
	proto.RegisterType((*PlateSnapshotExData)(nil), "Qot_GetSecuritySnapshot.PlateSnapshotExData")
	proto.RegisterType((*FutureSnapshotExData)(nil), "Qot_GetSecuritySnapshot.FutureSnapshotExData")
	proto.RegisterType((*SnapshotBasicData)(nil), "Qot_GetSecuritySnapshot.SnapshotBasicData")
	proto.RegisterType((*Snapshot)(nil), "Qot_GetSecuritySnapshot.Snapshot")
	proto.RegisterType((*S2C)(nil), "Qot_GetSecuritySnapshot.S2C")
	proto.RegisterType((*Request)(nil), "Qot_GetSecuritySnapshot.Request")
	proto.RegisterType((*Response)(nil), "Qot_GetSecuritySnapshot.Response")
}

func init() { proto.RegisterFile("Qot_GetSecuritySnapshot.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1876 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0x5f, 0x6f, 0x1b, 0xc7,
	0x11, 0x07, 0x45, 0x31, 0x92, 0x56, 0xf2, 0xbf, 0xb3, 0x62, 0x5f, 0x5d, 0x47, 0x55, 0xd8, 0x34,
	0x15, 0x8c, 0x44, 0x36, 0x88, 0xb6, 0x48, 0x8b, 0x02, 0x8d, 0x42, 0xdb, 0xad, 0x01, 0x29, 0x51,
	0x96, 0x82, 0x52, 0xf7, 0xa5, 0x58, 0x91, 0x63, 0x72, 0xa1, 0xe3, 0xed, 0x79, 0x77, 0x4f, 0xb2,
	0xfa, 0xd8, 0xd7, 0xf6, 0x1b, 0xe5, 0x9b, 0xf4, 0xa3, 0xf4, 0xa9, 0x98, 0x99, 0x3d, 0x72, 0xef,
	0x48, 0x42, 0x79, 0xea, 0x93, 0x6e, 0x7e, 0xf3, 0xdb, 0xd9, 0xd9, 0x9d, 0x3f, 0x3b, 0xa2, 0xf8,
	0xe4, 0x7b, 0xe3, 0xff, 0xfe, 0x67, 0xf0, 0x03, 0x18, 0x96, 0x56, 0xfb, 0x9b, 0x41, 0xae, 0x0a,
	0x37, 0x31, 0xfe, 0xb0, 0xb0, 0xc6, 0x9b, 0xe4, 0xf1, 0x0a, 0xf5, 0x93, 0x9d, 0xbe, 0x99, 0x4e,
	0x4d, 0xce, 0xb4, 0x27, 0xf7, 0x91, 0x16, 0x23, 0xdd, 0x3f, 0x89, 0x76, 0xbf, 0x37, 0x48, 0xbe,
	0x12, 0x3b, 0x2e, 0x2c, 0x3d, 0xd6, 0xce, 0xa7, 0xad, 0xfd, 0xf6, 0xc1, 0x76, 0x6f, 0xf7, 0x30,
	0xe2, 0x57, 0xa6, 0x65, 0x8d, 0xd9, 0xfd, 0xcf, 0xba, 0xd8, 0x7d, 0xf5, 0xbe, 0x8c, 0xf6, 0x7c,
	0xf5, 0xe1, 0xa5, 0xf2, 0x2a, 0xe9, 0x8a, 0x1d, 0xed, 0x5c, 0x09, 0xa3, 0xc1, 0x44, 0x59, 0x70,
	0x69, 0x6b, 0x7f, 0xed, 0xa0, 0x2d, 0x6b, 0x58, 0x72, 0x20, 0xee, 0xb1, 0x7c, 0xa2, 0xec, 0x25,
	0xf8, 0x73, 0x95, 0xa5, 0x6b, 0xfb, 0x6b, 0x07, 0x2d, 0xd9, 0x84, 0x93, 0x27, 0x62, 0x33, 0x07,
	0x7f, 0xe4, 0x1c, 0xf8, 0xb4, 0x4d, 0x94, 0x99, 0x9c, 0x3c, 0x15, 0x5b, 0x39, 0xf8, 0x53, 0x6b,
	0xde, 0x69, 0x9f, 0xae, 0x93, 0x72, 0x0e, 0x24, 0xcf, 0xc4, 0x7d, 0x50, 0x36, 0xd7, 0xf9, 0xd8,
	0x9d, 0x82, 0x75, 0xb8, 0x71, 0xda, 0x21, 0xd2, 0x02, 0x9e, 0x7c, 0x21, 0x1e, 0x98, 0xd2, 0x3b,
	0xaf, 0xf2, 0x91, 0xce, 0xc7, 0xc1, 0xf1, 0x8f, 0xc8, 0xf1, 0x45, 0x45, 0xd2, 0x13, 0xbb, 0x11,
	0x38, 0x3f, 0xc2, 0x06, 0x59, 0x5f, 0xaa, 0x43, 0x6f, 0x2a, 0xbf, 0x67, 0xde, 0x6c, 0xb2, 0x37,
	0x4d, 0x3c, 0x79, 0x24, 0x3e, 0x82, 0x1b, 0xa9, 0x3c, 0xa4, 0x5b, 0xc4, 0x08, 0x12, 0xe2, 0x05,
	0x10, 0x2e, 0x18, 0x67, 0x89, 0xf0, 0x0b, 0xc2, 0xb7, 0x03, 0x4e, 0x12, 0xde, 0x4f, 0x01, 0x67,
	0x67, 0x27, 0xa4, 0xda, 0xe1, 0xfb, 0x99, 0x01, 0xc9, 0xbe, 0xd8, 0x1e, 0xe9, 0x2b, 0x3d, 0x82,
	0x7c, 0x74, 0x76, 0x76, 0x92, 0xde, 0xd9, 0x6f, 0x1d, 0xb4, 0x64, 0x0c, 0xa1, 0xcf, 0x95, 0x28,
	0x95, 0xd7, 0x06, 0x69, 0x77, 0x89, 0xb6, 0x80, 0xc7, 0xd6, 0x8e, 0x5f, 0xbf, 0x4d, 0xef, 0xd5,
	0xad, 0x1d, 0xbf, 0x7e, 0x1b, 0x5b, 0x3b, 0x7e, 0xfd, 0x96, 0x16, 0xa6, 0xf7, 0xeb, 0xd6, 0x2a,
	0xbc, 0xfb, 0xaf, 0x0d, 0xf1, 0xf1, 0x0f, 0xca, 0x5a, 0x95, 0xfb, 0x46, 0x76, 0x7d, 0x2e, 0xee,
	0x0e, 0x4d, 0x7e, 0x05, 0xd6, 0x69, 0x93, 0xd3, 0xc1, 0x5a, 0x74, 0xb0, 0x06, 0x8a, 0xfe, 0x5c,
	0xb3, 0x81, 0xb3, 0x9b, 0x02, 0x28, 0xbb, 0x3a, 0x32, 0x86, 0x90, 0xe1, 0xbc, 0xd5, 0x97, 0x70,
	0x6a, 0xf5, 0x10, 0x42, 0x72, 0xc5, 0x10, 0x66, 0xf2, 0x54, 0x79, 0x4a, 0xf9, 0x33, 0x3d, 0x05,
	0x4a, 0xb1, 0x2d, 0x59, 0xc3, 0x90, 0x83, 0xb7, 0x65, 0xd5, 0x08, 0x88, 0xd3, 0x61, 0x4e, 0x8c,
	0x25, 0xcf, 0x44, 0xc7, 0x5c, 0xe7, 0x60, 0x29, 0xa3, 0x56, 0x55, 0x17, 0x53, 0x92, 0xcf, 0xc4,
	0x1d, 0x0b, 0x43, 0x73, 0x05, 0xf6, 0x86, 0xfd, 0xe2, 0xa4, 0xaa, 0x83, 0xb8, 0xab, 0xf3, 0x16,
	0xc0, 0x9f, 0x9b, 0xac, 0x9c, 0xe6, 0x94, 0x49, 0x6d, 0x59, 0xc3, 0xf0, 0x7c, 0x54, 0x4c, 0x81,
	0xb2, 0x45, 0x94, 0x18, 0x4a, 0xf6, 0x84, 0xe0, 0x15, 0x51, 0x4e, 0x45, 0x48, 0xb2, 0x2b, 0x3a,
	0x23, 0xc8, 0xbc, 0x0a, 0x69, 0xc5, 0x02, 0xd6, 0x8a, 0x9e, 0x16, 0x99, 0x86, 0xd1, 0xb9, 0xc9,
	0x94, 0xd7, 0x99, 0xf6, 0x37, 0x21, 0xbb, 0x16, 0x15, 0x49, 0x2a, 0x36, 0x0a, 0x0b, 0x53, 0x5d,
	0x4e, 0xd3, 0x3b, 0xc4, 0xa9, 0x44, 0xb4, 0x13, 0xdf, 0xa4, 0xf3, 0x6a, 0x5a, 0x84, 0xf4, 0x5a,
	0x54, 0x20, 0x3b, 0xbe, 0x53, 0x66, 0x73, 0x96, 0x2d, 0x2a, 0xb0, 0x6b, 0x64, 0x70, 0x05, 0x56,
	0x8d, 0x21, 0xe4, 0xd8, 0x4c, 0x4e, 0x12, 0xb1, 0xae, 0x0b, 0x53, 0xa4, 0x0f, 0x08, 0xa7, 0x6f,
	0xcc, 0xaa, 0x0b, 0x0b, 0xea, 0xf2, 0xd5, 0x15, 0xe4, 0xa7, 0x46, 0xe7, 0x3e, 0x4d, 0x48, 0xdb,
	0x40, 0xb1, 0x6f, 0xcd, 0xf3, 0x8c, 0xe3, 0xf3, 0x90, 0x88, 0x4d, 0x38, 0x39, 0x14, 0x49, 0x81,
	0x1f, 0x32, 0xc4, 0x8d, 0xf3, 0x7d, 0x97, 0xc8, 0x4b, 0x34, 0x78, 0xd7, 0x6e, 0x68, 0x2c, 0xa4,
	0x1f, 0x13, 0x85, 0x05, 0xac, 0x99, 0xb2, 0x28, 0xc0, 0x0e, 0xa2, 0x44, 0x7d, 0xc4, 0x35, 0xd3,
	0xc4, 0x91, 0x9b, 0x99, 0xeb, 0x3a, 0xf7, 0x31, 0x73, 0x9b, 0x38, 0xc5, 0x30, 0x3f, 0xd6, 0x39,
	0x8b, 0x03, 0xaf, 0x7c, 0xe9, 0xd2, 0x74, 0xbf, 0x75, 0xd0, 0x91, 0x8b, 0x8a, 0xee, 0x7f, 0x3b,
	0x62, 0xf7, 0xbb, 0xc2, 0x6b, 0x93, 0x37, 0x8a, 0x31, 0x11, 0xeb, 0x1e, 0xab, 0xab, 0x45, 0xd5,
	0x45, 0xdf, 0xf3, 0x64, 0x5f, 0xbb, 0x3d, 0xd9, 0x39, 0x01, 0xf5, 0x25, 0x97, 0x4e, 0x9b, 0x4a,
	0x27, 0x42, 0x9a, 0x25, 0xba, 0xbe, 0xb4, 0x44, 0x87, 0x26, 0xf7, 0x56, 0x0d, 0xfd, 0x40, 0xff,
	0x83, 0xcb, 0xaf, 0x23, 0x6b, 0x18, 0x72, 0x4c, 0x01, 0xf9, 0x9b, 0xdc, 0x83, 0x05, 0xe7, 0xa9,
	0x0a, 0x3b, 0xb2, 0x86, 0x2d, 0x4f, 0xea, 0x8d, 0x9f, 0x90, 0xd4, 0x9b, 0xf5, 0xa4, 0x9e, 0x95,
	0xcc, 0x56, 0x5c, 0x32, 0xbb, 0xa2, 0x33, 0x56, 0xd3, 0xa9, 0x0a, 0x35, 0xc6, 0x02, 0xde, 0xde,
	0x15, 0x8c, 0xab, 0xea, 0xa2, 0x6f, 0x64, 0xfa, 0x09, 0x78, 0x15, 0x0a, 0x8a, 0x85, 0xe4, 0xbe,
	0x68, 0xdb, 0x89, 0x09, 0x05, 0x84, 0x9f, 0x98, 0x88, 0xf3, 0x7b, 0x8a, 0x4b, 0xa7, 0x09, 0xd3,
	0x53, 0x9b, 0x8f, 0xe0, 0x03, 0x07, 0x90, 0x9a, 0xe1, 0x3d, 0x0a, 0x74, 0x13, 0x46, 0x66, 0x0e,
	0xfe, 0xbb, 0xf8, 0xaa, 0xee, 0x33, 0xb3, 0x01, 0x63, 0x72, 0xc3, 0x87, 0x42, 0xdb, 0x9b, 0x97,
	0xca, 0xc3, 0x4b, 0x8d, 0xaf, 0xdd, 0x10, 0xa8, 0xa0, 0x3a, 0x72, 0x89, 0x06, 0x1f, 0xcc, 0x2a,
	0x22, 0xdf, 0x9a, 0xa9, 0xce, 0x55, 0x76, 0xae, 0xb2, 0x12, 0x42, 0x91, 0x2d, 0xd5, 0xe1, 0x1e,
	0x94, 0x24, 0xc7, 0xc6, 0x9f, 0x94, 0x99, 0xd7, 0x18, 0x03, 0x1b, 0xaa, 0x6d, 0x89, 0x06, 0x4b,
	0xd8, 0xd0, 0x59, 0x8e, 0x2c, 0x28, 0x3a, 0xe6, 0x2e, 0xf9, 0xd3, 0x40, 0xd1, 0x6e, 0xb5, 0x5f,
	0x64, 0x97, 0xab, 0x6e, 0x89, 0xa6, 0xeb, 0xc4, 0xc3, 0x37, 0x78, 0x51, 0x8d, 0xd4, 0xdf, 0x13,
	0xc2, 0x2a, 0xed, 0xa0, 0x6f, 0xca, 0xdc, 0x87, 0x02, 0x88, 0x10, 0x7c, 0x7b, 0xdf, 0xa9, 0x2c,
	0x63, 0x35, 0xbf, 0x3e, 0x73, 0x00, 0x57, 0xc3, 0xfb, 0x52, 0x05, 0x75, 0x9b, 0x57, 0xcf, 0x11,
	0xdc, 0xf4, 0x34, 0x53, 0x1e, 0xfe, 0xaf, 0x9b, 0xfe, 0x73, 0x4d, 0xec, 0xbe, 0x2e, 0x7d, 0x69,
	0x9b, 0xdb, 0x1e, 0x88, 0x7b, 0x99, 0x72, 0x7e, 0x00, 0xde, 0x67, 0xa1, 0x14, 0xf9, 0xd1, 0x6d,
	0xc2, 0xd8, 0x77, 0x0b, 0xe3, 0x34, 0x5e, 0x78, 0xd8, 0x7f, 0x26, 0x63, 0x80, 0xaa, 0xef, 0xfe,
	0x44, 0xe5, 0x63, 0x08, 0x2e, 0x34, 0x50, 0x7c, 0x01, 0xd1, 0xec, 0xfc, 0x49, 0xe5, 0x67, 0xb7,
	0x0e, 0x62, 0x18, 0x6b, 0x00, 0xd7, 0x40, 0x87, 0xc3, 0xb8, 0xa8, 0xc1, 0xdd, 0xb5, 0x3b, 0x51,
	0x3a, 0xef, 0x87, 0x10, 0x53, 0x1b, 0xd8, 0x94, 0x0d, 0xb4, 0xfb, 0xe3, 0xb6, 0x78, 0x50, 0x1d,
	0xff, 0x1b, 0xe5, 0xf4, 0x90, 0x6e, 0xe0, 0x85, 0xd8, 0xac, 0x86, 0x5f, 0x3a, 0xfa, 0xaa, 0xbe,
	0x36, 0x63, 0xcd, 0x5a, 0xe3, 0x5a, 0xd4, 0x1a, 0x9f, 0x8a, 0x2d, 0xed, 0x06, 0xa5, 0x2b, 0x20,
	0x1f, 0xd1, 0xe1, 0x37, 0xe5, 0x1c, 0xa0, 0x37, 0x4b, 0x3b, 0x1f, 0x1d, 0x79, 0x26, 0x63, 0xc3,
	0xc9, 0x4c, 0xdc, 0xe1, 0x2a, 0x11, 0x5b, 0x24, 0xbd, 0x26, 0x83, 0xc2, 0x82, 0x1a, 0xd1, 0xa1,
	0x5a, 0x32, 0x86, 0x30, 0xec, 0x65, 0x31, 0x52, 0x9e, 0x2f, 0x73, 0x83, 0x9b, 0xec, 0x1c, 0x41,
	0xaf, 0x26, 0x7a, 0x3c, 0xe1, 0xb8, 0x72, 0x3b, 0x9b, 0x03, 0xa8, 0xc5, 0x46, 0xc9, 0x5a, 0x6e,
	0x6a, 0x73, 0x80, 0x7c, 0x36, 0xd7, 0xac, 0xe4, 0xde, 0x36, 0x93, 0xf1, 0xc6, 0x31, 0x0e, 0xfd,
	0xcc, 0xb8, 0x90, 0x34, 0xdc, 0xe8, 0x1a, 0x28, 0xda, 0x18, 0x96, 0x96, 0x19, 0xdc, 0xf5, 0x66,
	0x32, 0x4e, 0xb6, 0x57, 0x38, 0xab, 0x00, 0xf5, 0xbe, 0xb6, 0x0c, 0x12, 0xae, 0xf1, 0xa5, 0xcd,
	0xf1, 0xfd, 0x4c, 0xef, 0xf2, 0x9a, 0x4a, 0xc6, 0x76, 0x5f, 0x7d, 0xd3, 0x5c, 0x73, 0x8f, 0xf4,
	0x35, 0x8c, 0x72, 0x2c, 0xdc, 0x2d, 0x27, 0x0e, 0x0f, 0x09, 0x75, 0x10, 0xf3, 0x7e, 0x7e, 0x4f,
	0xcc, 0xe3, 0xa1, 0xa1, 0x09, 0xa3, 0x3f, 0xca, 0x5d, 0xf2, 0x19, 0xb8, 0xa9, 0xcd, 0x64, 0xd4,
	0x5d, 0xe8, 0x51, 0x3c, 0x2c, 0xcc, 0x64, 0x3c, 0x9f, 0x72, 0x97, 0xe7, 0x26, 0xa3, 0x66, 0xd5,
	0x96, 0x41, 0x42, 0xfc, 0x42, 0xe3, 0x8b, 0x43, 0x8d, 0xa9, 0x2d, 0x83, 0xc4, 0xd3, 0xa6, 0xba,
	0xc8, 0xe0, 0x44, 0xd9, 0xb1, 0xce, 0x69, 0x16, 0xd8, 0x94, 0x35, 0x0c, 0xcf, 0x36, 0x35, 0xd6,
	0x8f, 0xd5, 0x18, 0x78, 0xe8, 0xe0, 0x21, 0xa0, 0x0e, 0x26, 0xbf, 0x13, 0x8f, 0x32, 0x43, 0xff,
	0xa0, 0x8c, 0x75, 0xfe, 0x26, 0xd7, 0x5e, 0xab, 0x8c, 0xe9, 0x29, 0xd1, 0x57, 0x68, 0xf1, 0x4e,
	0x78, 0xb7, 0xc1, 0xc4, 0x58, 0x3f, 0x80, 0x2c, 0x4b, 0x7f, 0x46, 0x4e, 0x34, 0x61, 0xf4, 0xc3,
	0x55, 0x02, 0x05, 0xe2, 0x09, 0xfb, 0x51, 0x03, 0xf1, 0x69, 0x20, 0xe0, 0xe8, 0x4a, 0xe9, 0x0c,
	0x0d, 0x9c, 0x73, 0xbc, 0x7f, 0x4e, 0xe7, 0x5e, 0xaa, 0x4b, 0xbe, 0x12, 0x8f, 0x09, 0x5f, 0xe2,
	0xfc, 0x53, 0xda, 0x63, 0x95, 0x1a, 0xb3, 0x59, 0xe1, 0x6b, 0xee, 0xcb, 0x11, 0xa4, 0x9f, 0x10,
	0x77, 0x0e, 0x50, 0x14, 0xaf, 0xc6, 0x1c, 0xa9, 0xbd, 0x10, 0xc5, 0x20, 0x63, 0x9d, 0x5d, 0xe8,
	0xd1, 0x91, 0xbb, 0xe4, 0x7d, 0x7e, 0xc1, 0xff, 0xdf, 0x44, 0x10, 0x32, 0x38, 0x3b, 0x99, 0xb1,
	0xcf, 0x8c, 0x08, 0x4a, 0x5e, 0x88, 0x87, 0x58, 0x58, 0xe0, 0xfc, 0x6f, 0x7b, 0x3f, 0x00, 0x5c,
	0x3a, 0xde, 0xea, 0x53, 0x62, 0x2e, 0x53, 0x51, 0x97, 0x33, 0xd7, 0xcd, 0x05, 0xdd, 0xd0, 0xe5,
	0x16, 0x34, 0xd1, 0x0e, 0x7f, 0xd1, 0xce, 0x9b, 0xea, 0x7f, 0x88, 0x5f, 0xd6, 0x76, 0x88, 0x55,
	0xf3, 0x1d, 0x6a, 0x0b, 0x3e, 0x8b, 0x77, 0xa8, 0xf1, 0xff, 0x28, 0xb6, 0x0a, 0x0b, 0xfc, 0x7f,
	0x6d, 0xfa, 0xab, 0xfd, 0xd6, 0xc1, 0x76, 0x6f, 0x2f, 0x6e, 0x85, 0xa7, 0x16, 0x8e, 0xde, 0x79,
	0xb0, 0xcc, 0xc0, 0xe6, 0x29, 0xe7, 0x0b, 0x92, 0xaf, 0xc5, 0xb6, 0x9a, 0x6b, 0xd3, 0xcf, 0x7f,
	0xd2, 0xfa, 0x78, 0x09, 0x46, 0xd0, 0xc1, 0x30, 0x4c, 0xac, 0xbf, 0xa6, 0x17, 0x7e, 0x0e, 0x74,
	0x7f, 0x5c, 0x17, 0x9b, 0x55, 0xf7, 0x4e, 0xbe, 0x16, 0x9d, 0x0b, 0xec, 0xe0, 0xa1, 0x63, 0x3f,
	0x3b, 0x5c, 0xf5, 0x53, 0xca, 0x42, 0xbf, 0x97, 0xbc, 0x30, 0xf9, 0x5e, 0xec, 0x00, 0xfd, 0xc4,
	0xc1, 0x0f, 0x61, 0xba, 0x46, 0xfe, 0x7e, 0xb9, 0xd2, 0xd0, 0xb2, 0xdf, 0x43, 0x64, 0xcd, 0x44,
	0x72, 0x26, 0xee, 0x84, 0x7f, 0x42, 0x83, 0xcd, 0x36, 0xd9, 0x3c, 0x5c, 0x69, 0x73, 0xe9, 0xbf,
	0xc1, 0xb2, 0x6e, 0x04, 0x1d, 0xe5, 0x31, 0x27, 0x18, 0x5d, 0xbf, 0xc5, 0xd1, 0x65, 0xd3, 0xbc,
	0xac, 0x99, 0x48, 0xbe, 0x15, 0xdb, 0x34, 0x20, 0x06, 0x8b, 0x1d, 0xb2, 0xf8, 0xc5, 0x4a, 0x8b,
	0x4b, 0x66, 0x24, 0x19, 0x1b, 0x40, 0x7b, 0x05, 0x8e, 0x34, 0xc1, 0xde, 0x47, 0xb7, 0xd8, 0x5b,
	0x32, 0xfe, 0xc8, 0xd8, 0x00, 0x1e, 0xf9, 0x1d, 0x0d, 0x2b, 0xc1, 0xe0, 0xc6, 0x2d, 0x47, 0x5e,
	0x36, 0xd9, 0xc8, 0x9a, 0x89, 0xee, 0xb1, 0x68, 0x0f, 0x7a, 0xfd, 0xe4, 0x95, 0xd8, 0x71, 0x81,
	0x16, 0xfd, 0x26, 0xf6, 0xe9, 0xad, 0xe9, 0x23, 0x6b, 0xcb, 0xba, 0xbf, 0x17, 0x1b, 0x12, 0xde,
	0x97, 0x3c, 0x2f, 0xb7, 0x87, 0x3d, 0x17, 0xf2, 0xf0, 0xe9, 0x4a, 0x43, 0xfd, 0xde, 0x40, 0x22,
	0xb1, 0xfb, 0xef, 0x96, 0xd8, 0x94, 0xe0, 0x0a, 0x93, 0x3b, 0x48, 0xf6, 0xc4, 0x86, 0x05, 0xfe,
	0x15, 0x83, 0x26, 0xbe, 0x3f, 0xac, 0x7f, 0xf9, 0x9b, 0x17, 0x2f, 0x64, 0x05, 0xe2, 0x5b, 0x61,
	0xc1, 0x9f, 0xb8, 0x31, 0xa5, 0xe7, 0x96, 0x0c, 0x12, 0xce, 0x0c, 0x60, 0x6d, 0xdf, 0x8c, 0x80,
	0x72, 0xac, 0x23, 0x2b, 0x11, 0xdd, 0x71, 0xbd, 0x61, 0x48, 0x92, 0xd5, 0xee, 0x0c, 0x7a, 0x7d,
	0x89, 0xc4, 0x6f, 0xfe, 0x2a, 0x1e, 0x0e, 0xcd, 0xf4, 0x10, 0xef, 0xea, 0x10, 0xdf, 0x7e, 0x55,
	0xe8, 0xc3, 0xe2, 0xe2, 0x6f, 0x47, 0x63, 0xed, 0x27, 0xe5, 0xc5, 0xe1, 0xd0, 0x4c, 0x9f, 0x3b,
	0x0f, 0xc5, 0x04, 0xf2, 0xec, 0xa6, 0x7c, 0x3e, 0x36, 0x48, 0x54, 0x85, 0x7e, 0x8e, 0x7f, 0xe9,
	0xd7, 0xc6, 0xe7, 0x2b, 0xb6, 0xf8, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa4, 0x47, 0x83, 0x05,
	0xde, 0x14, 0x00, 0x00,
}
