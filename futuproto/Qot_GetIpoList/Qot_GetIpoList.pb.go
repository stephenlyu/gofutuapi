// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Qot_GetIpoList.proto

/*
Package Qot_GetIpoList is a generated protocol buffer package.

It is generated from these files:
	Qot_GetIpoList.proto

It has these top-level messages:
	BasicIpoData
	CNIpoExData
	WinningNumData
	HKIpoExData
	USIpoExData
	IpoData
	C2S
	S2C
	Request
	Response
*/
package Qot_GetIpoList

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/stephenlyu/gofutuapi/futuproto/Common"
import Qot_Common "github.com/stephenlyu/gofutuapi/futuproto/Qot_Common"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Ipo基本数据
type BasicIpoData struct {
	Security         *Qot_Common.Security `protobuf:"bytes,1,req,name=security" json:"security,omitempty"`
	Name             *string              `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	ListTime         *string              `protobuf:"bytes,3,opt,name=listTime" json:"listTime,omitempty"`
	ListTimestamp    *float64             `protobuf:"fixed64,4,opt,name=listTimestamp" json:"listTimestamp,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *BasicIpoData) Reset()                    { *m = BasicIpoData{} }
func (m *BasicIpoData) String() string            { return proto.CompactTextString(m) }
func (*BasicIpoData) ProtoMessage()               {}
func (*BasicIpoData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BasicIpoData) GetSecurity() *Qot_Common.Security {
	if m != nil {
		return m.Security
	}
	return nil
}

func (m *BasicIpoData) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *BasicIpoData) GetListTime() string {
	if m != nil && m.ListTime != nil {
		return *m.ListTime
	}
	return ""
}

func (m *BasicIpoData) GetListTimestamp() float64 {
	if m != nil && m.ListTimestamp != nil {
		return *m.ListTimestamp
	}
	return 0
}

// A股Ipo列表额外数据
type CNIpoExData struct {
	ApplyCode              *string           `protobuf:"bytes,1,req,name=applyCode" json:"applyCode,omitempty"`
	IssueSize              *int64            `protobuf:"varint,2,req,name=issueSize" json:"issueSize,omitempty"`
	OnlineIssueSize        *int64            `protobuf:"varint,3,req,name=onlineIssueSize" json:"onlineIssueSize,omitempty"`
	ApplyUpperLimit        *int64            `protobuf:"varint,4,req,name=applyUpperLimit" json:"applyUpperLimit,omitempty"`
	ApplyLimitMarketValue  *int64            `protobuf:"varint,5,req,name=applyLimitMarketValue" json:"applyLimitMarketValue,omitempty"`
	IsEstimateIpoPrice     *bool             `protobuf:"varint,6,req,name=isEstimateIpoPrice" json:"isEstimateIpoPrice,omitempty"`
	IpoPrice               *float64          `protobuf:"fixed64,7,req,name=ipoPrice" json:"ipoPrice,omitempty"`
	IndustryPeRate         *float64          `protobuf:"fixed64,8,req,name=industryPeRate" json:"industryPeRate,omitempty"`
	IsEstimateWinningRatio *bool             `protobuf:"varint,9,req,name=isEstimateWinningRatio" json:"isEstimateWinningRatio,omitempty"`
	WinningRatio           *float64          `protobuf:"fixed64,10,req,name=winningRatio" json:"winningRatio,omitempty"`
	IssuePeRate            *float64          `protobuf:"fixed64,11,req,name=issuePeRate" json:"issuePeRate,omitempty"`
	ApplyTime              *string           `protobuf:"bytes,12,opt,name=applyTime" json:"applyTime,omitempty"`
	ApplyTimestamp         *float64          `protobuf:"fixed64,13,opt,name=applyTimestamp" json:"applyTimestamp,omitempty"`
	WinningTime            *string           `protobuf:"bytes,14,opt,name=winningTime" json:"winningTime,omitempty"`
	WinningTimestamp       *float64          `protobuf:"fixed64,15,opt,name=winningTimestamp" json:"winningTimestamp,omitempty"`
	IsHasWon               *bool             `protobuf:"varint,16,req,name=isHasWon" json:"isHasWon,omitempty"`
	WinningNumData         []*WinningNumData `protobuf:"bytes,17,rep,name=winningNumData" json:"winningNumData,omitempty"`
	XXX_unrecognized       []byte            `json:"-"`
}

func (m *CNIpoExData) Reset()                    { *m = CNIpoExData{} }
func (m *CNIpoExData) String() string            { return proto.CompactTextString(m) }
func (*CNIpoExData) ProtoMessage()               {}
func (*CNIpoExData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CNIpoExData) GetApplyCode() string {
	if m != nil && m.ApplyCode != nil {
		return *m.ApplyCode
	}
	return ""
}

func (m *CNIpoExData) GetIssueSize() int64 {
	if m != nil && m.IssueSize != nil {
		return *m.IssueSize
	}
	return 0
}

func (m *CNIpoExData) GetOnlineIssueSize() int64 {
	if m != nil && m.OnlineIssueSize != nil {
		return *m.OnlineIssueSize
	}
	return 0
}

func (m *CNIpoExData) GetApplyUpperLimit() int64 {
	if m != nil && m.ApplyUpperLimit != nil {
		return *m.ApplyUpperLimit
	}
	return 0
}

func (m *CNIpoExData) GetApplyLimitMarketValue() int64 {
	if m != nil && m.ApplyLimitMarketValue != nil {
		return *m.ApplyLimitMarketValue
	}
	return 0
}

func (m *CNIpoExData) GetIsEstimateIpoPrice() bool {
	if m != nil && m.IsEstimateIpoPrice != nil {
		return *m.IsEstimateIpoPrice
	}
	return false
}

func (m *CNIpoExData) GetIpoPrice() float64 {
	if m != nil && m.IpoPrice != nil {
		return *m.IpoPrice
	}
	return 0
}

func (m *CNIpoExData) GetIndustryPeRate() float64 {
	if m != nil && m.IndustryPeRate != nil {
		return *m.IndustryPeRate
	}
	return 0
}

func (m *CNIpoExData) GetIsEstimateWinningRatio() bool {
	if m != nil && m.IsEstimateWinningRatio != nil {
		return *m.IsEstimateWinningRatio
	}
	return false
}

func (m *CNIpoExData) GetWinningRatio() float64 {
	if m != nil && m.WinningRatio != nil {
		return *m.WinningRatio
	}
	return 0
}

func (m *CNIpoExData) GetIssuePeRate() float64 {
	if m != nil && m.IssuePeRate != nil {
		return *m.IssuePeRate
	}
	return 0
}

func (m *CNIpoExData) GetApplyTime() string {
	if m != nil && m.ApplyTime != nil {
		return *m.ApplyTime
	}
	return ""
}

func (m *CNIpoExData) GetApplyTimestamp() float64 {
	if m != nil && m.ApplyTimestamp != nil {
		return *m.ApplyTimestamp
	}
	return 0
}

func (m *CNIpoExData) GetWinningTime() string {
	if m != nil && m.WinningTime != nil {
		return *m.WinningTime
	}
	return ""
}

func (m *CNIpoExData) GetWinningTimestamp() float64 {
	if m != nil && m.WinningTimestamp != nil {
		return *m.WinningTimestamp
	}
	return 0
}

func (m *CNIpoExData) GetIsHasWon() bool {
	if m != nil && m.IsHasWon != nil {
		return *m.IsHasWon
	}
	return false
}

func (m *CNIpoExData) GetWinningNumData() []*WinningNumData {
	if m != nil {
		return m.WinningNumData
	}
	return nil
}

// 中签号数据
type WinningNumData struct {
	WinningName      *string `protobuf:"bytes,1,req,name=winningName" json:"winningName,omitempty"`
	WinningInfo      *string `protobuf:"bytes,2,req,name=winningInfo" json:"winningInfo,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *WinningNumData) Reset()                    { *m = WinningNumData{} }
func (m *WinningNumData) String() string            { return proto.CompactTextString(m) }
func (*WinningNumData) ProtoMessage()               {}
func (*WinningNumData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *WinningNumData) GetWinningName() string {
	if m != nil && m.WinningName != nil {
		return *m.WinningName
	}
	return ""
}

func (m *WinningNumData) GetWinningInfo() string {
	if m != nil && m.WinningInfo != nil {
		return *m.WinningInfo
	}
	return ""
}

// 港股Ipo列表额外数据
type HKIpoExData struct {
	IpoPriceMin       *float64 `protobuf:"fixed64,1,req,name=ipoPriceMin" json:"ipoPriceMin,omitempty"`
	IpoPriceMax       *float64 `protobuf:"fixed64,2,req,name=ipoPriceMax" json:"ipoPriceMax,omitempty"`
	ListPrice         *float64 `protobuf:"fixed64,3,req,name=listPrice" json:"listPrice,omitempty"`
	LotSize           *int32   `protobuf:"varint,4,req,name=lotSize" json:"lotSize,omitempty"`
	EntrancePrice     *float64 `protobuf:"fixed64,5,req,name=entrancePrice" json:"entrancePrice,omitempty"`
	IsSubscribeStatus *bool    `protobuf:"varint,6,req,name=isSubscribeStatus" json:"isSubscribeStatus,omitempty"`
	ApplyEndTime      *string  `protobuf:"bytes,7,opt,name=applyEndTime" json:"applyEndTime,omitempty"`
	ApplyEndTimestamp *float64 `protobuf:"fixed64,8,opt,name=applyEndTimestamp" json:"applyEndTimestamp,omitempty"`
	XXX_unrecognized  []byte   `json:"-"`
}

func (m *HKIpoExData) Reset()                    { *m = HKIpoExData{} }
func (m *HKIpoExData) String() string            { return proto.CompactTextString(m) }
func (*HKIpoExData) ProtoMessage()               {}
func (*HKIpoExData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *HKIpoExData) GetIpoPriceMin() float64 {
	if m != nil && m.IpoPriceMin != nil {
		return *m.IpoPriceMin
	}
	return 0
}

func (m *HKIpoExData) GetIpoPriceMax() float64 {
	if m != nil && m.IpoPriceMax != nil {
		return *m.IpoPriceMax
	}
	return 0
}

func (m *HKIpoExData) GetListPrice() float64 {
	if m != nil && m.ListPrice != nil {
		return *m.ListPrice
	}
	return 0
}

func (m *HKIpoExData) GetLotSize() int32 {
	if m != nil && m.LotSize != nil {
		return *m.LotSize
	}
	return 0
}

func (m *HKIpoExData) GetEntrancePrice() float64 {
	if m != nil && m.EntrancePrice != nil {
		return *m.EntrancePrice
	}
	return 0
}

func (m *HKIpoExData) GetIsSubscribeStatus() bool {
	if m != nil && m.IsSubscribeStatus != nil {
		return *m.IsSubscribeStatus
	}
	return false
}

func (m *HKIpoExData) GetApplyEndTime() string {
	if m != nil && m.ApplyEndTime != nil {
		return *m.ApplyEndTime
	}
	return ""
}

func (m *HKIpoExData) GetApplyEndTimestamp() float64 {
	if m != nil && m.ApplyEndTimestamp != nil {
		return *m.ApplyEndTimestamp
	}
	return 0
}

// 美股Ipo列表额外数据
type USIpoExData struct {
	IpoPriceMin      *float64 `protobuf:"fixed64,1,req,name=ipoPriceMin" json:"ipoPriceMin,omitempty"`
	IpoPriceMax      *float64 `protobuf:"fixed64,2,req,name=ipoPriceMax" json:"ipoPriceMax,omitempty"`
	IssueSize        *int64   `protobuf:"varint,3,req,name=issueSize" json:"issueSize,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *USIpoExData) Reset()                    { *m = USIpoExData{} }
func (m *USIpoExData) String() string            { return proto.CompactTextString(m) }
func (*USIpoExData) ProtoMessage()               {}
func (*USIpoExData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *USIpoExData) GetIpoPriceMin() float64 {
	if m != nil && m.IpoPriceMin != nil {
		return *m.IpoPriceMin
	}
	return 0
}

func (m *USIpoExData) GetIpoPriceMax() float64 {
	if m != nil && m.IpoPriceMax != nil {
		return *m.IpoPriceMax
	}
	return 0
}

func (m *USIpoExData) GetIssueSize() int64 {
	if m != nil && m.IssueSize != nil {
		return *m.IssueSize
	}
	return 0
}

// 新股Ipo数据
type IpoData struct {
	Basic            *BasicIpoData `protobuf:"bytes,1,req,name=basic" json:"basic,omitempty"`
	CnExData         *CNIpoExData  `protobuf:"bytes,2,opt,name=cnExData" json:"cnExData,omitempty"`
	HkExData         *HKIpoExData  `protobuf:"bytes,3,opt,name=hkExData" json:"hkExData,omitempty"`
	UsExData         *USIpoExData  `protobuf:"bytes,4,opt,name=usExData" json:"usExData,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *IpoData) Reset()                    { *m = IpoData{} }
func (m *IpoData) String() string            { return proto.CompactTextString(m) }
func (*IpoData) ProtoMessage()               {}
func (*IpoData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *IpoData) GetBasic() *BasicIpoData {
	if m != nil {
		return m.Basic
	}
	return nil
}

func (m *IpoData) GetCnExData() *CNIpoExData {
	if m != nil {
		return m.CnExData
	}
	return nil
}

func (m *IpoData) GetHkExData() *HKIpoExData {
	if m != nil {
		return m.HkExData
	}
	return nil
}

func (m *IpoData) GetUsExData() *USIpoExData {
	if m != nil {
		return m.UsExData
	}
	return nil
}

type C2S struct {
	Market           *int32 `protobuf:"varint,1,req,name=market" json:"market,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *C2S) Reset()                    { *m = C2S{} }
func (m *C2S) String() string            { return proto.CompactTextString(m) }
func (*C2S) ProtoMessage()               {}
func (*C2S) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *C2S) GetMarket() int32 {
	if m != nil && m.Market != nil {
		return *m.Market
	}
	return 0
}

type S2C struct {
	IpoList          []*IpoData `protobuf:"bytes,1,rep,name=ipoList" json:"ipoList,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *S2C) Reset()                    { *m = S2C{} }
func (m *S2C) String() string            { return proto.CompactTextString(m) }
func (*S2C) ProtoMessage()               {}
func (*S2C) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *S2C) GetIpoList() []*IpoData {
	if m != nil {
		return m.IpoList
	}
	return nil
}

type Request struct {
	C2S              *C2S   `protobuf:"bytes,1,req,name=c2s" json:"c2s,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Request) GetC2S() *C2S {
	if m != nil {
		return m.C2S
	}
	return nil
}

type Response struct {
	RetType          *int32  `protobuf:"varint,1,req,name=retType,def=-400" json:"retType,omitempty"`
	RetMsg           *string `protobuf:"bytes,2,opt,name=retMsg" json:"retMsg,omitempty"`
	ErrCode          *int32  `protobuf:"varint,3,opt,name=errCode" json:"errCode,omitempty"`
	S2C              *S2C    `protobuf:"bytes,4,opt,name=s2c" json:"s2c,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

const Default_Response_RetType int32 = -400

func (m *Response) GetRetType() int32 {
	if m != nil && m.RetType != nil {
		return *m.RetType
	}
	return Default_Response_RetType
}

func (m *Response) GetRetMsg() string {
	if m != nil && m.RetMsg != nil {
		return *m.RetMsg
	}
	return ""
}

func (m *Response) GetErrCode() int32 {
	if m != nil && m.ErrCode != nil {
		return *m.ErrCode
	}
	return 0
}

func (m *Response) GetS2C() *S2C {
	if m != nil {
		return m.S2C
	}
	return nil
}

func init() {
	proto.RegisterType((*BasicIpoData)(nil), "Qot_GetIpoList.BasicIpoData")
	proto.RegisterType((*CNIpoExData)(nil), "Qot_GetIpoList.CNIpoExData")
	proto.RegisterType((*WinningNumData)(nil), "Qot_GetIpoList.WinningNumData")
	proto.RegisterType((*HKIpoExData)(nil), "Qot_GetIpoList.HKIpoExData")
	proto.RegisterType((*USIpoExData)(nil), "Qot_GetIpoList.USIpoExData")
	proto.RegisterType((*IpoData)(nil), "Qot_GetIpoList.IpoData")
	proto.RegisterType((*C2S)(nil), "Qot_GetIpoList.C2S")
	proto.RegisterType((*S2C)(nil), "Qot_GetIpoList.S2C")
	proto.RegisterType((*Request)(nil), "Qot_GetIpoList.Request")
	proto.RegisterType((*Response)(nil), "Qot_GetIpoList.Response")
}

func init() { proto.RegisterFile("Qot_GetIpoList.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 858 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xdd, 0x8e, 0xdb, 0x44,
	0x14, 0x96, 0xe3, 0xa4, 0x49, 0x4e, 0xb6, 0xe9, 0x76, 0x5a, 0x8a, 0xb5, 0x94, 0xca, 0xb2, 0x00,
	0x59, 0x08, 0xb2, 0x8b, 0x55, 0x41, 0xc5, 0x65, 0xc3, 0x42, 0x23, 0xba, 0x4b, 0x19, 0x6f, 0x59,
	0x89, 0x1b, 0x34, 0xf1, 0x4e, 0x77, 0x47, 0x1b, 0xcf, 0x18, 0xcf, 0x58, 0x6c, 0xb8, 0xe5, 0x1d,
	0x78, 0x0d, 0x9e, 0x80, 0xf7, 0xe1, 0x31, 0xd0, 0x1c, 0x3b, 0x8e, 0xed, 0x84, 0x3b, 0xae, 0x92,
	0xf3, 0x9d, 0xef, 0x1c, 0x1f, 0x7f, 0xe7, 0xc7, 0xf0, 0xf8, 0x47, 0x65, 0x7e, 0xf9, 0x8e, 0x9b,
	0x45, 0xa6, 0x5e, 0x0b, 0x6d, 0x66, 0x59, 0xae, 0x8c, 0x22, 0xd3, 0x36, 0x7a, 0x74, 0x30, 0x57,
	0x69, 0xaa, 0x64, 0xe9, 0x3d, 0x3a, 0xb4, 0xde, 0x26, 0x12, 0xfc, 0xe9, 0xc0, 0xc1, 0x4b, 0xa6,
	0x45, 0xb2, 0xc8, 0xd4, 0x37, 0xcc, 0x30, 0x72, 0x02, 0x23, 0xcd, 0x93, 0x22, 0x17, 0x66, 0xed,
	0x39, 0x7e, 0x2f, 0x9c, 0x44, 0x8f, 0x67, 0x8d, 0xa8, 0xb8, 0xf2, 0xd1, 0x9a, 0x45, 0x08, 0xf4,
	0x25, 0x4b, 0xb9, 0xd7, 0xf3, 0x7b, 0xe1, 0x98, 0xe2, 0x7f, 0x72, 0x04, 0xa3, 0x95, 0xd0, 0xe6,
	0x42, 0xa4, 0xdc, 0x73, 0x7d, 0x27, 0x1c, 0xd3, 0xda, 0x26, 0x1f, 0xc1, 0xfd, 0xcd, 0x7f, 0x6d,
	0x58, 0x9a, 0x79, 0x7d, 0xdf, 0x09, 0x1d, 0xda, 0x06, 0x83, 0xbf, 0x07, 0x30, 0x99, 0x9f, 0x2f,
	0x32, 0x75, 0x7a, 0x87, 0x75, 0x3d, 0x85, 0x31, 0xcb, 0xb2, 0xd5, 0x7a, 0xae, 0xae, 0x38, 0x16,
	0x36, 0xa6, 0x5b, 0xc0, 0x7a, 0x85, 0xd6, 0x05, 0x8f, 0xc5, 0xef, 0x65, 0x21, 0x2e, 0xdd, 0x02,
	0x24, 0x84, 0x07, 0x4a, 0xae, 0x84, 0xe4, 0x8b, 0x9a, 0xe3, 0x22, 0xa7, 0x0b, 0x5b, 0x26, 0x26,
	0x7d, 0x9b, 0x65, 0x3c, 0x7f, 0x2d, 0x52, 0x61, 0xbc, 0x7e, 0xc9, 0xec, 0xc0, 0xe4, 0x39, 0xbc,
	0x87, 0x10, 0x5a, 0x67, 0x2c, 0xbf, 0xe5, 0xe6, 0x27, 0xb6, 0x2a, 0xb8, 0x37, 0x40, 0xfe, 0x7e,
	0x27, 0x99, 0x01, 0x11, 0xfa, 0x54, 0x1b, 0x91, 0x32, 0xc3, 0x17, 0x99, 0x7a, 0x93, 0x8b, 0x84,
	0x7b, 0xf7, 0xfc, 0x5e, 0x38, 0xa2, 0x7b, 0x3c, 0x56, 0x47, 0xb1, 0x61, 0x0d, 0xfd, 0x5e, 0xe8,
	0xd0, 0xda, 0x26, 0x9f, 0xc0, 0x54, 0xc8, 0xab, 0x42, 0x9b, 0x7c, 0xfd, 0x86, 0x53, 0x66, 0xb8,
	0x37, 0x42, 0x46, 0x07, 0x25, 0x5f, 0xc2, 0x93, 0x6d, 0xe6, 0x4b, 0x21, 0xa5, 0x90, 0xd7, 0x94,
	0x19, 0xa1, 0xbc, 0x31, 0x3e, 0xf7, 0x3f, 0xbc, 0x24, 0x80, 0x83, 0xdf, 0x9a, 0x6c, 0xc0, 0xec,
	0x2d, 0x8c, 0xf8, 0x30, 0x41, 0x99, 0xab, 0x02, 0x26, 0x48, 0x69, 0x42, 0x75, 0xdf, 0x70, 0x14,
	0x0e, 0x70, 0x14, 0xb6, 0x80, 0x7d, 0x87, 0xda, 0x28, 0x87, 0xe1, 0x3e, 0x0e, 0x43, 0x07, 0xb5,
	0xcf, 0xa9, 0x9e, 0x8b, 0x79, 0xa6, 0x98, 0xa7, 0x09, 0x91, 0x4f, 0xe1, 0xb0, 0x61, 0x96, 0xb9,
	0x1e, 0x60, 0xae, 0x1d, 0x1c, 0x55, 0xd5, 0xaf, 0x98, 0xbe, 0x54, 0xd2, 0x3b, 0x44, 0x0d, 0x6a,
	0x9b, 0x7c, 0x0b, 0xd3, 0x8a, 0x7f, 0x5e, 0xa4, 0x76, 0xf2, 0xbc, 0x87, 0xbe, 0x1b, 0x4e, 0xa2,
	0x67, 0xb3, 0xce, 0xbe, 0x5d, 0xb6, 0x58, 0xb4, 0x13, 0x15, 0x5c, 0xc0, 0xb4, 0xcd, 0x68, 0xbc,
	0xc3, 0xb9, 0x5d, 0x97, 0x72, 0x86, 0x9b, 0x50, 0x83, 0xb1, 0x90, 0xef, 0x54, 0xb5, 0x50, 0x4d,
	0x28, 0xf8, 0xab, 0x07, 0x93, 0x57, 0xdf, 0x6f, 0xb7, 0xc2, 0xea, 0x5f, 0xcd, 0xc3, 0x99, 0x90,
	0x98, 0xd3, 0xea, 0xbf, 0x85, 0x5a, 0x0c, 0x76, 0x87, 0x39, 0x9b, 0x0c, 0x76, 0x67, 0x3b, 0x64,
	0x57, 0xaf, 0x1c, 0x32, 0x17, 0xfd, 0x5b, 0x80, 0x78, 0x30, 0x5c, 0x29, 0x83, 0x3b, 0x63, 0x37,
	0x61, 0x40, 0x37, 0xa6, 0xdd, 0x63, 0x2e, 0x4d, 0xce, 0x64, 0xc2, 0xcb, 0xd8, 0x01, 0xc6, 0xb6,
	0x41, 0xf2, 0x19, 0x3c, 0x14, 0x3a, 0x2e, 0x96, 0x3a, 0xc9, 0xc5, 0x92, 0xc7, 0x86, 0x99, 0x42,
	0x57, 0x03, 0xbf, 0xeb, 0xb0, 0x33, 0x87, 0x9d, 0x3f, 0x95, 0x57, 0xd8, 0xe8, 0x21, 0x36, 0xba,
	0x85, 0xd9, 0x8c, 0x4d, 0xbb, 0x6c, 0xf5, 0x08, 0x5b, 0xbd, 0xeb, 0x08, 0x14, 0x4c, 0xde, 0xc6,
	0xff, 0xbb, 0x60, 0xa2, 0x73, 0x48, 0xb6, 0x40, 0xf0, 0x8f, 0x03, 0xc3, 0xcd, 0x31, 0x8d, 0x60,
	0xb0, 0xb4, 0xc7, 0xb5, 0xba, 0xa4, 0x4f, 0xbb, 0x33, 0xd4, 0xbc, 0xbc, 0xb4, 0xa4, 0x92, 0xaf,
	0x60, 0x94, 0xc8, 0xb2, 0x5a, 0xaf, 0xe7, 0x3b, 0xe1, 0x24, 0xfa, 0xa0, 0x1b, 0xd6, 0xb8, 0x8b,
	0xb4, 0x26, 0xdb, 0xc0, 0x9b, 0xdb, 0x2a, 0xd0, 0xdd, 0x1f, 0xd8, 0x18, 0x1d, 0x5a, 0x93, 0x6d,
	0x60, 0xa1, 0xab, 0xc0, 0xfe, 0xfe, 0xc0, 0x86, 0x84, 0xb4, 0x26, 0x07, 0x1f, 0x82, 0x3b, 0x8f,
	0x62, 0xf2, 0x04, 0xee, 0xa5, 0x78, 0xe3, 0xf0, 0x35, 0x07, 0xb4, 0xb2, 0x82, 0x17, 0xe0, 0xc6,
	0xd1, 0x9c, 0x7c, 0x01, 0x43, 0x51, 0xa6, 0xf1, 0x1c, 0x5c, 0xa5, 0xf7, 0xbb, 0xd9, 0x37, 0x0a,
	0x6c, 0x78, 0xc1, 0x09, 0x0c, 0x29, 0xff, 0xb5, 0xe0, 0xda, 0x90, 0x8f, 0xc1, 0x4d, 0x22, 0x5d,
	0x09, 0xf8, 0x68, 0x47, 0x89, 0x28, 0xa6, 0xd6, 0x1f, 0xfc, 0xe1, 0xc0, 0x88, 0x72, 0x9d, 0x29,
	0xa9, 0x39, 0x79, 0x06, 0xc3, 0x9c, 0x9b, 0x8b, 0x75, 0x56, 0x6e, 0xd9, 0xe0, 0xeb, 0xfe, 0xe7,
	0xcf, 0x4f, 0x4e, 0xe8, 0x06, 0xb4, 0x05, 0xe7, 0xdc, 0x9c, 0xe9, 0x6b, 0x14, 0x78, 0x4c, 0x2b,
	0xcb, 0xce, 0x3a, 0xcf, 0x73, 0xfc, 0xc2, 0x58, 0x01, 0x07, 0x74, 0x63, 0xda, 0x2a, 0x74, 0x94,
	0x54, 0xea, 0xec, 0x54, 0x11, 0x47, 0x73, 0x6a, 0xfd, 0x2f, 0x7f, 0x80, 0x47, 0x89, 0x4a, 0x67,
	0xef, 0x0a, 0x53, 0xcc, 0x54, 0xc6, 0x25, 0xcb, 0xc4, 0x2c, 0x5b, 0xfe, 0xfc, 0xe2, 0x5a, 0x98,
	0x9b, 0x62, 0x39, 0x4b, 0x54, 0x7a, 0xac, 0x0d, 0xcf, 0x6e, 0xb8, 0x5c, 0xad, 0x8b, 0xe3, 0x6b,
	0x65, 0x89, 0x2c, 0x13, 0xc7, 0xf6, 0x17, 0xbf, 0xc7, 0xc7, 0xed, 0xcc, 0xff, 0x06, 0x00, 0x00,
	0xff, 0xff, 0x1a, 0x88, 0xd2, 0x95, 0xe5, 0x07, 0x00, 0x00,
}
