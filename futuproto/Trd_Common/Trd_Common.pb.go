// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Trd_Common.proto

/*
Package Trd_Common is a generated protocol buffer package.

It is generated from these files:
	Trd_Common.proto

It has these top-level messages:
	AccCashInfo
	TrdHeader
	TrdAcc
	Funds
	Position
	Order
	OrderFill
	MaxTrdQtys
	TrdFilterConditions
*/
package Trd_Common

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/stephenlyu/gofutuapi/futuproto/Common"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 交易环境
type TrdEnv int32

const (
	TrdEnv_TrdEnv_Simulate TrdEnv = 0
	TrdEnv_TrdEnv_Real     TrdEnv = 1
)

var TrdEnv_name = map[int32]string{
	0: "TrdEnv_Simulate",
	1: "TrdEnv_Real",
}
var TrdEnv_value = map[string]int32{
	"TrdEnv_Simulate": 0,
	"TrdEnv_Real":     1,
}

func (x TrdEnv) Enum() *TrdEnv {
	p := new(TrdEnv)
	*p = x
	return p
}
func (x TrdEnv) String() string {
	return proto.EnumName(TrdEnv_name, int32(x))
}
func (x *TrdEnv) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TrdEnv_value, data, "TrdEnv")
	if err != nil {
		return err
	}
	*x = TrdEnv(value)
	return nil
}
func (TrdEnv) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// 交易市场，是大的市场，不是具体品种
type TrdMarket int32

const (
	TrdMarket_TrdMarket_Unknown TrdMarket = 0
	TrdMarket_TrdMarket_HK      TrdMarket = 1
	TrdMarket_TrdMarket_US      TrdMarket = 2
	TrdMarket_TrdMarket_CN      TrdMarket = 3
	TrdMarket_TrdMarket_HKCC    TrdMarket = 4
	TrdMarket_TrdMarket_Futures TrdMarket = 5
)

var TrdMarket_name = map[int32]string{
	0: "TrdMarket_Unknown",
	1: "TrdMarket_HK",
	2: "TrdMarket_US",
	3: "TrdMarket_CN",
	4: "TrdMarket_HKCC",
	5: "TrdMarket_Futures",
}
var TrdMarket_value = map[string]int32{
	"TrdMarket_Unknown": 0,
	"TrdMarket_HK":      1,
	"TrdMarket_US":      2,
	"TrdMarket_CN":      3,
	"TrdMarket_HKCC":    4,
	"TrdMarket_Futures": 5,
}

func (x TrdMarket) Enum() *TrdMarket {
	p := new(TrdMarket)
	*p = x
	return p
}
func (x TrdMarket) String() string {
	return proto.EnumName(TrdMarket_name, int32(x))
}
func (x *TrdMarket) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TrdMarket_value, data, "TrdMarket")
	if err != nil {
		return err
	}
	*x = TrdMarket(value)
	return nil
}
func (TrdMarket) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// 可交易证券所属市场，目前主要是区分A股的沪市和深市，香港和美国暂不需要细分
type TrdSecMarket int32

const (
	TrdSecMarket_TrdSecMarket_Unknown TrdSecMarket = 0
	TrdSecMarket_TrdSecMarket_HK      TrdSecMarket = 1
	TrdSecMarket_TrdSecMarket_US      TrdSecMarket = 2
	TrdSecMarket_TrdSecMarket_CN_SH   TrdSecMarket = 31
	TrdSecMarket_TrdSecMarket_CN_SZ   TrdSecMarket = 32
)

var TrdSecMarket_name = map[int32]string{
	0:  "TrdSecMarket_Unknown",
	1:  "TrdSecMarket_HK",
	2:  "TrdSecMarket_US",
	31: "TrdSecMarket_CN_SH",
	32: "TrdSecMarket_CN_SZ",
}
var TrdSecMarket_value = map[string]int32{
	"TrdSecMarket_Unknown": 0,
	"TrdSecMarket_HK":      1,
	"TrdSecMarket_US":      2,
	"TrdSecMarket_CN_SH":   31,
	"TrdSecMarket_CN_SZ":   32,
}

func (x TrdSecMarket) Enum() *TrdSecMarket {
	p := new(TrdSecMarket)
	*p = x
	return p
}
func (x TrdSecMarket) String() string {
	return proto.EnumName(TrdSecMarket_name, int32(x))
}
func (x *TrdSecMarket) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TrdSecMarket_value, data, "TrdSecMarket")
	if err != nil {
		return err
	}
	*x = TrdSecMarket(value)
	return nil
}
func (TrdSecMarket) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// 交易方向
type TrdSide int32

const (
	// 客户端下单只传Buy或Sell即可，SellShort是美股订单时服务器返回有此方向，BuyBack目前不存在，但也不排除服务器会传
	TrdSide_TrdSide_Unknown   TrdSide = 0
	TrdSide_TrdSide_Buy       TrdSide = 1
	TrdSide_TrdSide_Sell      TrdSide = 2
	TrdSide_TrdSide_SellShort TrdSide = 3
	TrdSide_TrdSide_BuyBack   TrdSide = 4
)

var TrdSide_name = map[int32]string{
	0: "TrdSide_Unknown",
	1: "TrdSide_Buy",
	2: "TrdSide_Sell",
	3: "TrdSide_SellShort",
	4: "TrdSide_BuyBack",
}
var TrdSide_value = map[string]int32{
	"TrdSide_Unknown":   0,
	"TrdSide_Buy":       1,
	"TrdSide_Sell":      2,
	"TrdSide_SellShort": 3,
	"TrdSide_BuyBack":   4,
}

func (x TrdSide) Enum() *TrdSide {
	p := new(TrdSide)
	*p = x
	return p
}
func (x TrdSide) String() string {
	return proto.EnumName(TrdSide_name, int32(x))
}
func (x *TrdSide) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TrdSide_value, data, "TrdSide")
	if err != nil {
		return err
	}
	*x = TrdSide(value)
	return nil
}
func (TrdSide) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// 订单类型
type OrderType int32

const (
	OrderType_OrderType_Unknown          OrderType = 0
	OrderType_OrderType_Normal           OrderType = 1
	OrderType_OrderType_Market           OrderType = 2
	OrderType_OrderType_AbsoluteLimit    OrderType = 5
	OrderType_OrderType_Auction          OrderType = 6
	OrderType_OrderType_AuctionLimit     OrderType = 7
	OrderType_OrderType_SpecialLimit     OrderType = 8
	OrderType_OrderType_SpecialLimit_All OrderType = 9
)

var OrderType_name = map[int32]string{
	0: "OrderType_Unknown",
	1: "OrderType_Normal",
	2: "OrderType_Market",
	5: "OrderType_AbsoluteLimit",
	6: "OrderType_Auction",
	7: "OrderType_AuctionLimit",
	8: "OrderType_SpecialLimit",
	9: "OrderType_SpecialLimit_All",
}
var OrderType_value = map[string]int32{
	"OrderType_Unknown":          0,
	"OrderType_Normal":           1,
	"OrderType_Market":           2,
	"OrderType_AbsoluteLimit":    5,
	"OrderType_Auction":          6,
	"OrderType_AuctionLimit":     7,
	"OrderType_SpecialLimit":     8,
	"OrderType_SpecialLimit_All": 9,
}

func (x OrderType) Enum() *OrderType {
	p := new(OrderType)
	*p = x
	return p
}
func (x OrderType) String() string {
	return proto.EnumName(OrderType_name, int32(x))
}
func (x *OrderType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OrderType_value, data, "OrderType")
	if err != nil {
		return err
	}
	*x = OrderType(value)
	return nil
}
func (OrderType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// 订单状态
type OrderStatus int32

const (
	OrderStatus_OrderStatus_Unsubmitted     OrderStatus = 0
	OrderStatus_OrderStatus_Unknown         OrderStatus = -1
	OrderStatus_OrderStatus_WaitingSubmit   OrderStatus = 1
	OrderStatus_OrderStatus_Submitting      OrderStatus = 2
	OrderStatus_OrderStatus_SubmitFailed    OrderStatus = 3
	OrderStatus_OrderStatus_TimeOut         OrderStatus = 4
	OrderStatus_OrderStatus_Submitted       OrderStatus = 5
	OrderStatus_OrderStatus_Filled_Part     OrderStatus = 10
	OrderStatus_OrderStatus_Filled_All      OrderStatus = 11
	OrderStatus_OrderStatus_Cancelling_Part OrderStatus = 12
	OrderStatus_OrderStatus_Cancelling_All  OrderStatus = 13
	OrderStatus_OrderStatus_Cancelled_Part  OrderStatus = 14
	OrderStatus_OrderStatus_Cancelled_All   OrderStatus = 15
	OrderStatus_OrderStatus_Failed          OrderStatus = 21
	OrderStatus_OrderStatus_Disabled        OrderStatus = 22
	OrderStatus_OrderStatus_Deleted         OrderStatus = 23
	OrderStatus_OrderStatus_FillCancelled   OrderStatus = 24
)

var OrderStatus_name = map[int32]string{
	0:  "OrderStatus_Unsubmitted",
	-1: "OrderStatus_Unknown",
	1:  "OrderStatus_WaitingSubmit",
	2:  "OrderStatus_Submitting",
	3:  "OrderStatus_SubmitFailed",
	4:  "OrderStatus_TimeOut",
	5:  "OrderStatus_Submitted",
	10: "OrderStatus_Filled_Part",
	11: "OrderStatus_Filled_All",
	12: "OrderStatus_Cancelling_Part",
	13: "OrderStatus_Cancelling_All",
	14: "OrderStatus_Cancelled_Part",
	15: "OrderStatus_Cancelled_All",
	21: "OrderStatus_Failed",
	22: "OrderStatus_Disabled",
	23: "OrderStatus_Deleted",
	24: "OrderStatus_FillCancelled",
}
var OrderStatus_value = map[string]int32{
	"OrderStatus_Unsubmitted":     0,
	"OrderStatus_Unknown":         -1,
	"OrderStatus_WaitingSubmit":   1,
	"OrderStatus_Submitting":      2,
	"OrderStatus_SubmitFailed":    3,
	"OrderStatus_TimeOut":         4,
	"OrderStatus_Submitted":       5,
	"OrderStatus_Filled_Part":     10,
	"OrderStatus_Filled_All":      11,
	"OrderStatus_Cancelling_Part": 12,
	"OrderStatus_Cancelling_All":  13,
	"OrderStatus_Cancelled_Part":  14,
	"OrderStatus_Cancelled_All":   15,
	"OrderStatus_Failed":          21,
	"OrderStatus_Disabled":        22,
	"OrderStatus_Deleted":         23,
	"OrderStatus_FillCancelled":   24,
}

func (x OrderStatus) Enum() *OrderStatus {
	p := new(OrderStatus)
	*p = x
	return p
}
func (x OrderStatus) String() string {
	return proto.EnumName(OrderStatus_name, int32(x))
}
func (x *OrderStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OrderStatus_value, data, "OrderStatus")
	if err != nil {
		return err
	}
	*x = OrderStatus(value)
	return nil
}
func (OrderStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// 一笔成交的状态
type OrderFillStatus int32

const (
	OrderFillStatus_OrderFillStatus_OK        OrderFillStatus = 0
	OrderFillStatus_OrderFillStatus_Cancelled OrderFillStatus = 1
	OrderFillStatus_OrderFillStatus_Changed   OrderFillStatus = 2
)

var OrderFillStatus_name = map[int32]string{
	0: "OrderFillStatus_OK",
	1: "OrderFillStatus_Cancelled",
	2: "OrderFillStatus_Changed",
}
var OrderFillStatus_value = map[string]int32{
	"OrderFillStatus_OK":        0,
	"OrderFillStatus_Cancelled": 1,
	"OrderFillStatus_Changed":   2,
}

func (x OrderFillStatus) Enum() *OrderFillStatus {
	p := new(OrderFillStatus)
	*p = x
	return p
}
func (x OrderFillStatus) String() string {
	return proto.EnumName(OrderFillStatus_name, int32(x))
}
func (x *OrderFillStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OrderFillStatus_value, data, "OrderFillStatus")
	if err != nil {
		return err
	}
	*x = OrderFillStatus(value)
	return nil
}
func (OrderFillStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

// 持仓方向类型
type PositionSide int32

const (
	PositionSide_PositionSide_Long    PositionSide = 0
	PositionSide_PositionSide_Unknown PositionSide = -1
	PositionSide_PositionSide_Short   PositionSide = 1
)

var PositionSide_name = map[int32]string{
	0:  "PositionSide_Long",
	-1: "PositionSide_Unknown",
	1:  "PositionSide_Short",
}
var PositionSide_value = map[string]int32{
	"PositionSide_Long":    0,
	"PositionSide_Unknown": -1,
	"PositionSide_Short":   1,
}

func (x PositionSide) Enum() *PositionSide {
	p := new(PositionSide)
	*p = x
	return p
}
func (x PositionSide) String() string {
	return proto.EnumName(PositionSide_name, int32(x))
}
func (x *PositionSide) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PositionSide_value, data, "PositionSide")
	if err != nil {
		return err
	}
	*x = PositionSide(value)
	return nil
}
func (PositionSide) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

// 修改订单的操作类型
type ModifyOrderOp int32

const (
	// 港股支持全部操作，美股目前仅支持ModifyOrderOp_Normal和ModifyOrderOp_Cancel
	ModifyOrderOp_ModifyOrderOp_Unknown ModifyOrderOp = 0
	ModifyOrderOp_ModifyOrderOp_Normal  ModifyOrderOp = 1
	ModifyOrderOp_ModifyOrderOp_Cancel  ModifyOrderOp = 2
	ModifyOrderOp_ModifyOrderOp_Disable ModifyOrderOp = 3
	ModifyOrderOp_ModifyOrderOp_Enable  ModifyOrderOp = 4
	ModifyOrderOp_ModifyOrderOp_Delete  ModifyOrderOp = 5
)

var ModifyOrderOp_name = map[int32]string{
	0: "ModifyOrderOp_Unknown",
	1: "ModifyOrderOp_Normal",
	2: "ModifyOrderOp_Cancel",
	3: "ModifyOrderOp_Disable",
	4: "ModifyOrderOp_Enable",
	5: "ModifyOrderOp_Delete",
}
var ModifyOrderOp_value = map[string]int32{
	"ModifyOrderOp_Unknown": 0,
	"ModifyOrderOp_Normal":  1,
	"ModifyOrderOp_Cancel":  2,
	"ModifyOrderOp_Disable": 3,
	"ModifyOrderOp_Enable":  4,
	"ModifyOrderOp_Delete":  5,
}

func (x ModifyOrderOp) Enum() *ModifyOrderOp {
	p := new(ModifyOrderOp)
	*p = x
	return p
}
func (x ModifyOrderOp) String() string {
	return proto.EnumName(ModifyOrderOp_name, int32(x))
}
func (x *ModifyOrderOp) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ModifyOrderOp_value, data, "ModifyOrderOp")
	if err != nil {
		return err
	}
	*x = ModifyOrderOp(value)
	return nil
}
func (ModifyOrderOp) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

// 交易账户类型
type TrdAccType int32

const (
	TrdAccType_TrdAccType_Unknown TrdAccType = 0
	TrdAccType_TrdAccType_Cash    TrdAccType = 1
	TrdAccType_TrdAccType_Margin  TrdAccType = 2
)

var TrdAccType_name = map[int32]string{
	0: "TrdAccType_Unknown",
	1: "TrdAccType_Cash",
	2: "TrdAccType_Margin",
}
var TrdAccType_value = map[string]int32{
	"TrdAccType_Unknown": 0,
	"TrdAccType_Cash":    1,
	"TrdAccType_Margin":  2,
}

func (x TrdAccType) Enum() *TrdAccType {
	p := new(TrdAccType)
	*p = x
	return p
}
func (x TrdAccType) String() string {
	return proto.EnumName(TrdAccType_name, int32(x))
}
func (x *TrdAccType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TrdAccType_value, data, "TrdAccType")
	if err != nil {
		return err
	}
	*x = TrdAccType(value)
	return nil
}
func (TrdAccType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

// 货币种类
type Currency int32

const (
	Currency_Currency_Unknown Currency = 0
	Currency_Currency_HKD     Currency = 1
	Currency_Currency_USD     Currency = 2
	Currency_Currency_CNH     Currency = 3
)

var Currency_name = map[int32]string{
	0: "Currency_Unknown",
	1: "Currency_HKD",
	2: "Currency_USD",
	3: "Currency_CNH",
}
var Currency_value = map[string]int32{
	"Currency_Unknown": 0,
	"Currency_HKD":     1,
	"Currency_USD":     2,
	"Currency_CNH":     3,
}

func (x Currency) Enum() *Currency {
	p := new(Currency)
	*p = x
	return p
}
func (x Currency) String() string {
	return proto.EnumName(Currency_name, int32(x))
}
func (x *Currency) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Currency_value, data, "Currency")
	if err != nil {
		return err
	}
	*x = Currency(value)
	return nil
}
func (Currency) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

// 账户风险控制等级
type CltRiskLevel int32

const (
	CltRiskLevel_CltRiskLevel_Unknown      CltRiskLevel = -1
	CltRiskLevel_CltRiskLevel_Safe         CltRiskLevel = 0
	CltRiskLevel_CltRiskLevel_Warning      CltRiskLevel = 1
	CltRiskLevel_CltRiskLevel_Danger       CltRiskLevel = 2
	CltRiskLevel_CltRiskLevel_AbsoluteSafe CltRiskLevel = 3
	CltRiskLevel_CltRiskLevel_OptDanger    CltRiskLevel = 4
)

var CltRiskLevel_name = map[int32]string{
	-1: "CltRiskLevel_Unknown",
	0:  "CltRiskLevel_Safe",
	1:  "CltRiskLevel_Warning",
	2:  "CltRiskLevel_Danger",
	3:  "CltRiskLevel_AbsoluteSafe",
	4:  "CltRiskLevel_OptDanger",
}
var CltRiskLevel_value = map[string]int32{
	"CltRiskLevel_Unknown":      -1,
	"CltRiskLevel_Safe":         0,
	"CltRiskLevel_Warning":      1,
	"CltRiskLevel_Danger":       2,
	"CltRiskLevel_AbsoluteSafe": 3,
	"CltRiskLevel_OptDanger":    4,
}

func (x CltRiskLevel) Enum() *CltRiskLevel {
	p := new(CltRiskLevel)
	*p = x
	return p
}
func (x CltRiskLevel) String() string {
	return proto.EnumName(CltRiskLevel_name, int32(x))
}
func (x *CltRiskLevel) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CltRiskLevel_value, data, "CltRiskLevel")
	if err != nil {
		return err
	}
	*x = CltRiskLevel(value)
	return nil
}
func (CltRiskLevel) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

// 账户现金信息，目前仅用于期货账户
type AccCashInfo struct {
	Currency         *int32   `protobuf:"varint,1,opt,name=currency" json:"currency,omitempty"`
	Cash             *float64 `protobuf:"fixed64,2,opt,name=cash" json:"cash,omitempty"`
	AvailableBalance *float64 `protobuf:"fixed64,3,opt,name=availableBalance" json:"availableBalance,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *AccCashInfo) Reset()                    { *m = AccCashInfo{} }
func (m *AccCashInfo) String() string            { return proto.CompactTextString(m) }
func (*AccCashInfo) ProtoMessage()               {}
func (*AccCashInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AccCashInfo) GetCurrency() int32 {
	if m != nil && m.Currency != nil {
		return *m.Currency
	}
	return 0
}

func (m *AccCashInfo) GetCash() float64 {
	if m != nil && m.Cash != nil {
		return *m.Cash
	}
	return 0
}

func (m *AccCashInfo) GetAvailableBalance() float64 {
	if m != nil && m.AvailableBalance != nil {
		return *m.AvailableBalance
	}
	return 0
}

// 交易协议公共参数头
type TrdHeader struct {
	TrdEnv           *int32  `protobuf:"varint,1,req,name=trdEnv" json:"trdEnv,omitempty"`
	AccID            *uint64 `protobuf:"varint,2,req,name=accID" json:"accID,omitempty"`
	TrdMarket        *int32  `protobuf:"varint,3,req,name=trdMarket" json:"trdMarket,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TrdHeader) Reset()                    { *m = TrdHeader{} }
func (m *TrdHeader) String() string            { return proto.CompactTextString(m) }
func (*TrdHeader) ProtoMessage()               {}
func (*TrdHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TrdHeader) GetTrdEnv() int32 {
	if m != nil && m.TrdEnv != nil {
		return *m.TrdEnv
	}
	return 0
}

func (m *TrdHeader) GetAccID() uint64 {
	if m != nil && m.AccID != nil {
		return *m.AccID
	}
	return 0
}

func (m *TrdHeader) GetTrdMarket() int32 {
	if m != nil && m.TrdMarket != nil {
		return *m.TrdMarket
	}
	return 0
}

// 交易业务账户结构
type TrdAcc struct {
	TrdEnv            *int32  `protobuf:"varint,1,req,name=trdEnv" json:"trdEnv,omitempty"`
	AccID             *uint64 `protobuf:"varint,2,req,name=accID" json:"accID,omitempty"`
	TrdMarketAuthList []int32 `protobuf:"varint,3,rep,name=trdMarketAuthList" json:"trdMarketAuthList,omitempty"`
	AccType           *int32  `protobuf:"varint,4,opt,name=accType" json:"accType,omitempty"`
	CardNum           *string `protobuf:"bytes,5,opt,name=cardNum" json:"cardNum,omitempty"`
	XXX_unrecognized  []byte  `json:"-"`
}

func (m *TrdAcc) Reset()                    { *m = TrdAcc{} }
func (m *TrdAcc) String() string            { return proto.CompactTextString(m) }
func (*TrdAcc) ProtoMessage()               {}
func (*TrdAcc) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TrdAcc) GetTrdEnv() int32 {
	if m != nil && m.TrdEnv != nil {
		return *m.TrdEnv
	}
	return 0
}

func (m *TrdAcc) GetAccID() uint64 {
	if m != nil && m.AccID != nil {
		return *m.AccID
	}
	return 0
}

func (m *TrdAcc) GetTrdMarketAuthList() []int32 {
	if m != nil {
		return m.TrdMarketAuthList
	}
	return nil
}

func (m *TrdAcc) GetAccType() int32 {
	if m != nil && m.AccType != nil {
		return *m.AccType
	}
	return 0
}

func (m *TrdAcc) GetCardNum() string {
	if m != nil && m.CardNum != nil {
		return *m.CardNum
	}
	return ""
}

// 账户资金结构
type Funds struct {
	Power             *float64       `protobuf:"fixed64,1,req,name=power" json:"power,omitempty"`
	TotalAssets       *float64       `protobuf:"fixed64,2,req,name=totalAssets" json:"totalAssets,omitempty"`
	Cash              *float64       `protobuf:"fixed64,3,req,name=cash" json:"cash,omitempty"`
	MarketVal         *float64       `protobuf:"fixed64,4,req,name=marketVal" json:"marketVal,omitempty"`
	FrozenCash        *float64       `protobuf:"fixed64,5,req,name=frozenCash" json:"frozenCash,omitempty"`
	DebtCash          *float64       `protobuf:"fixed64,6,req,name=debtCash" json:"debtCash,omitempty"`
	AvlWithdrawalCash *float64       `protobuf:"fixed64,7,req,name=avlWithdrawalCash" json:"avlWithdrawalCash,omitempty"`
	Currency          *int32         `protobuf:"varint,8,opt,name=currency" json:"currency,omitempty"`
	AvailableFunds    *float64       `protobuf:"fixed64,9,opt,name=availableFunds" json:"availableFunds,omitempty"`
	UnrealizedPL      *float64       `protobuf:"fixed64,10,opt,name=unrealizedPL" json:"unrealizedPL,omitempty"`
	RealizedPL        *float64       `protobuf:"fixed64,11,opt,name=realizedPL" json:"realizedPL,omitempty"`
	RiskLevel         *int32         `protobuf:"varint,12,opt,name=riskLevel" json:"riskLevel,omitempty"`
	InitialMargin     *float64       `protobuf:"fixed64,13,opt,name=initialMargin" json:"initialMargin,omitempty"`
	MaintenanceMargin *float64       `protobuf:"fixed64,14,opt,name=maintenanceMargin" json:"maintenanceMargin,omitempty"`
	CashInfoList      []*AccCashInfo `protobuf:"bytes,15,rep,name=cashInfoList" json:"cashInfoList,omitempty"`
	XXX_unrecognized  []byte         `json:"-"`
}

func (m *Funds) Reset()                    { *m = Funds{} }
func (m *Funds) String() string            { return proto.CompactTextString(m) }
func (*Funds) ProtoMessage()               {}
func (*Funds) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Funds) GetPower() float64 {
	if m != nil && m.Power != nil {
		return *m.Power
	}
	return 0
}

func (m *Funds) GetTotalAssets() float64 {
	if m != nil && m.TotalAssets != nil {
		return *m.TotalAssets
	}
	return 0
}

func (m *Funds) GetCash() float64 {
	if m != nil && m.Cash != nil {
		return *m.Cash
	}
	return 0
}

func (m *Funds) GetMarketVal() float64 {
	if m != nil && m.MarketVal != nil {
		return *m.MarketVal
	}
	return 0
}

func (m *Funds) GetFrozenCash() float64 {
	if m != nil && m.FrozenCash != nil {
		return *m.FrozenCash
	}
	return 0
}

func (m *Funds) GetDebtCash() float64 {
	if m != nil && m.DebtCash != nil {
		return *m.DebtCash
	}
	return 0
}

func (m *Funds) GetAvlWithdrawalCash() float64 {
	if m != nil && m.AvlWithdrawalCash != nil {
		return *m.AvlWithdrawalCash
	}
	return 0
}

func (m *Funds) GetCurrency() int32 {
	if m != nil && m.Currency != nil {
		return *m.Currency
	}
	return 0
}

func (m *Funds) GetAvailableFunds() float64 {
	if m != nil && m.AvailableFunds != nil {
		return *m.AvailableFunds
	}
	return 0
}

func (m *Funds) GetUnrealizedPL() float64 {
	if m != nil && m.UnrealizedPL != nil {
		return *m.UnrealizedPL
	}
	return 0
}

func (m *Funds) GetRealizedPL() float64 {
	if m != nil && m.RealizedPL != nil {
		return *m.RealizedPL
	}
	return 0
}

func (m *Funds) GetRiskLevel() int32 {
	if m != nil && m.RiskLevel != nil {
		return *m.RiskLevel
	}
	return 0
}

func (m *Funds) GetInitialMargin() float64 {
	if m != nil && m.InitialMargin != nil {
		return *m.InitialMargin
	}
	return 0
}

func (m *Funds) GetMaintenanceMargin() float64 {
	if m != nil && m.MaintenanceMargin != nil {
		return *m.MaintenanceMargin
	}
	return 0
}

func (m *Funds) GetCashInfoList() []*AccCashInfo {
	if m != nil {
		return m.CashInfoList
	}
	return nil
}

// 账户持仓结构
type Position struct {
	PositionID   *uint64  `protobuf:"varint,1,req,name=positionID" json:"positionID,omitempty"`
	PositionSide *int32   `protobuf:"varint,2,req,name=positionSide" json:"positionSide,omitempty"`
	Code         *string  `protobuf:"bytes,3,req,name=code" json:"code,omitempty"`
	Name         *string  `protobuf:"bytes,4,req,name=name" json:"name,omitempty"`
	Qty          *float64 `protobuf:"fixed64,5,req,name=qty" json:"qty,omitempty"`
	CanSellQty   *float64 `protobuf:"fixed64,6,req,name=canSellQty" json:"canSellQty,omitempty"`
	Price        *float64 `protobuf:"fixed64,7,req,name=price" json:"price,omitempty"`
	CostPrice    *float64 `protobuf:"fixed64,8,opt,name=costPrice" json:"costPrice,omitempty"`
	Val          *float64 `protobuf:"fixed64,9,req,name=val" json:"val,omitempty"`
	PlVal        *float64 `protobuf:"fixed64,10,req,name=plVal" json:"plVal,omitempty"`
	PlRatio      *float64 `protobuf:"fixed64,11,opt,name=plRatio" json:"plRatio,omitempty"`
	SecMarket    *int32   `protobuf:"varint,12,opt,name=secMarket" json:"secMarket,omitempty"`
	// 以下是此持仓今日统计
	TdPlVal          *float64 `protobuf:"fixed64,21,opt,name=td_plVal,json=tdPlVal" json:"td_plVal,omitempty"`
	TdTrdVal         *float64 `protobuf:"fixed64,22,opt,name=td_trdVal,json=tdTrdVal" json:"td_trdVal,omitempty"`
	TdBuyVal         *float64 `protobuf:"fixed64,23,opt,name=td_buyVal,json=tdBuyVal" json:"td_buyVal,omitempty"`
	TdBuyQty         *float64 `protobuf:"fixed64,24,opt,name=td_buyQty,json=tdBuyQty" json:"td_buyQty,omitempty"`
	TdSellVal        *float64 `protobuf:"fixed64,25,opt,name=td_sellVal,json=tdSellVal" json:"td_sellVal,omitempty"`
	TdSellQty        *float64 `protobuf:"fixed64,26,opt,name=td_sellQty,json=tdSellQty" json:"td_sellQty,omitempty"`
	UnrealizedPL     *float64 `protobuf:"fixed64,28,opt,name=unrealizedPL" json:"unrealizedPL,omitempty"`
	RealizedPL       *float64 `protobuf:"fixed64,29,opt,name=realizedPL" json:"realizedPL,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Position) Reset()                    { *m = Position{} }
func (m *Position) String() string            { return proto.CompactTextString(m) }
func (*Position) ProtoMessage()               {}
func (*Position) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Position) GetPositionID() uint64 {
	if m != nil && m.PositionID != nil {
		return *m.PositionID
	}
	return 0
}

func (m *Position) GetPositionSide() int32 {
	if m != nil && m.PositionSide != nil {
		return *m.PositionSide
	}
	return 0
}

func (m *Position) GetCode() string {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return ""
}

func (m *Position) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Position) GetQty() float64 {
	if m != nil && m.Qty != nil {
		return *m.Qty
	}
	return 0
}

func (m *Position) GetCanSellQty() float64 {
	if m != nil && m.CanSellQty != nil {
		return *m.CanSellQty
	}
	return 0
}

func (m *Position) GetPrice() float64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *Position) GetCostPrice() float64 {
	if m != nil && m.CostPrice != nil {
		return *m.CostPrice
	}
	return 0
}

func (m *Position) GetVal() float64 {
	if m != nil && m.Val != nil {
		return *m.Val
	}
	return 0
}

func (m *Position) GetPlVal() float64 {
	if m != nil && m.PlVal != nil {
		return *m.PlVal
	}
	return 0
}

func (m *Position) GetPlRatio() float64 {
	if m != nil && m.PlRatio != nil {
		return *m.PlRatio
	}
	return 0
}

func (m *Position) GetSecMarket() int32 {
	if m != nil && m.SecMarket != nil {
		return *m.SecMarket
	}
	return 0
}

func (m *Position) GetTdPlVal() float64 {
	if m != nil && m.TdPlVal != nil {
		return *m.TdPlVal
	}
	return 0
}

func (m *Position) GetTdTrdVal() float64 {
	if m != nil && m.TdTrdVal != nil {
		return *m.TdTrdVal
	}
	return 0
}

func (m *Position) GetTdBuyVal() float64 {
	if m != nil && m.TdBuyVal != nil {
		return *m.TdBuyVal
	}
	return 0
}

func (m *Position) GetTdBuyQty() float64 {
	if m != nil && m.TdBuyQty != nil {
		return *m.TdBuyQty
	}
	return 0
}

func (m *Position) GetTdSellVal() float64 {
	if m != nil && m.TdSellVal != nil {
		return *m.TdSellVal
	}
	return 0
}

func (m *Position) GetTdSellQty() float64 {
	if m != nil && m.TdSellQty != nil {
		return *m.TdSellQty
	}
	return 0
}

func (m *Position) GetUnrealizedPL() float64 {
	if m != nil && m.UnrealizedPL != nil {
		return *m.UnrealizedPL
	}
	return 0
}

func (m *Position) GetRealizedPL() float64 {
	if m != nil && m.RealizedPL != nil {
		return *m.RealizedPL
	}
	return 0
}

// 订单结构
type Order struct {
	TrdSide          *int32   `protobuf:"varint,1,req,name=trdSide" json:"trdSide,omitempty"`
	OrderType        *int32   `protobuf:"varint,2,req,name=orderType" json:"orderType,omitempty"`
	OrderStatus      *int32   `protobuf:"varint,3,req,name=orderStatus" json:"orderStatus,omitempty"`
	OrderID          *uint64  `protobuf:"varint,4,req,name=orderID" json:"orderID,omitempty"`
	OrderIDEx        *string  `protobuf:"bytes,5,req,name=orderIDEx" json:"orderIDEx,omitempty"`
	Code             *string  `protobuf:"bytes,6,req,name=code" json:"code,omitempty"`
	Name             *string  `protobuf:"bytes,7,req,name=name" json:"name,omitempty"`
	Qty              *float64 `protobuf:"fixed64,8,req,name=qty" json:"qty,omitempty"`
	Price            *float64 `protobuf:"fixed64,9,opt,name=price" json:"price,omitempty"`
	CreateTime       *string  `protobuf:"bytes,10,req,name=createTime" json:"createTime,omitempty"`
	UpdateTime       *string  `protobuf:"bytes,11,req,name=updateTime" json:"updateTime,omitempty"`
	FillQty          *float64 `protobuf:"fixed64,12,opt,name=fillQty" json:"fillQty,omitempty"`
	FillAvgPrice     *float64 `protobuf:"fixed64,13,opt,name=fillAvgPrice" json:"fillAvgPrice,omitempty"`
	LastErrMsg       *string  `protobuf:"bytes,14,opt,name=lastErrMsg" json:"lastErrMsg,omitempty"`
	SecMarket        *int32   `protobuf:"varint,15,opt,name=secMarket" json:"secMarket,omitempty"`
	CreateTimestamp  *float64 `protobuf:"fixed64,16,opt,name=createTimestamp" json:"createTimestamp,omitempty"`
	UpdateTimestamp  *float64 `protobuf:"fixed64,17,opt,name=updateTimestamp" json:"updateTimestamp,omitempty"`
	Remark           *string  `protobuf:"bytes,18,opt,name=remark" json:"remark,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Order) Reset()                    { *m = Order{} }
func (m *Order) String() string            { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()               {}
func (*Order) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Order) GetTrdSide() int32 {
	if m != nil && m.TrdSide != nil {
		return *m.TrdSide
	}
	return 0
}

func (m *Order) GetOrderType() int32 {
	if m != nil && m.OrderType != nil {
		return *m.OrderType
	}
	return 0
}

func (m *Order) GetOrderStatus() int32 {
	if m != nil && m.OrderStatus != nil {
		return *m.OrderStatus
	}
	return 0
}

func (m *Order) GetOrderID() uint64 {
	if m != nil && m.OrderID != nil {
		return *m.OrderID
	}
	return 0
}

func (m *Order) GetOrderIDEx() string {
	if m != nil && m.OrderIDEx != nil {
		return *m.OrderIDEx
	}
	return ""
}

func (m *Order) GetCode() string {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return ""
}

func (m *Order) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Order) GetQty() float64 {
	if m != nil && m.Qty != nil {
		return *m.Qty
	}
	return 0
}

func (m *Order) GetPrice() float64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *Order) GetCreateTime() string {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return ""
}

func (m *Order) GetUpdateTime() string {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return ""
}

func (m *Order) GetFillQty() float64 {
	if m != nil && m.FillQty != nil {
		return *m.FillQty
	}
	return 0
}

func (m *Order) GetFillAvgPrice() float64 {
	if m != nil && m.FillAvgPrice != nil {
		return *m.FillAvgPrice
	}
	return 0
}

func (m *Order) GetLastErrMsg() string {
	if m != nil && m.LastErrMsg != nil {
		return *m.LastErrMsg
	}
	return ""
}

func (m *Order) GetSecMarket() int32 {
	if m != nil && m.SecMarket != nil {
		return *m.SecMarket
	}
	return 0
}

func (m *Order) GetCreateTimestamp() float64 {
	if m != nil && m.CreateTimestamp != nil {
		return *m.CreateTimestamp
	}
	return 0
}

func (m *Order) GetUpdateTimestamp() float64 {
	if m != nil && m.UpdateTimestamp != nil {
		return *m.UpdateTimestamp
	}
	return 0
}

func (m *Order) GetRemark() string {
	if m != nil && m.Remark != nil {
		return *m.Remark
	}
	return ""
}

// 成交结构
type OrderFill struct {
	TrdSide           *int32   `protobuf:"varint,1,req,name=trdSide" json:"trdSide,omitempty"`
	FillID            *uint64  `protobuf:"varint,2,req,name=fillID" json:"fillID,omitempty"`
	FillIDEx          *string  `protobuf:"bytes,3,req,name=fillIDEx" json:"fillIDEx,omitempty"`
	OrderID           *uint64  `protobuf:"varint,4,opt,name=orderID" json:"orderID,omitempty"`
	OrderIDEx         *string  `protobuf:"bytes,5,opt,name=orderIDEx" json:"orderIDEx,omitempty"`
	Code              *string  `protobuf:"bytes,6,req,name=code" json:"code,omitempty"`
	Name              *string  `protobuf:"bytes,7,req,name=name" json:"name,omitempty"`
	Qty               *float64 `protobuf:"fixed64,8,req,name=qty" json:"qty,omitempty"`
	Price             *float64 `protobuf:"fixed64,9,req,name=price" json:"price,omitempty"`
	CreateTime        *string  `protobuf:"bytes,10,req,name=createTime" json:"createTime,omitempty"`
	CounterBrokerID   *int32   `protobuf:"varint,11,opt,name=counterBrokerID" json:"counterBrokerID,omitempty"`
	CounterBrokerName *string  `protobuf:"bytes,12,opt,name=counterBrokerName" json:"counterBrokerName,omitempty"`
	SecMarket         *int32   `protobuf:"varint,13,opt,name=secMarket" json:"secMarket,omitempty"`
	CreateTimestamp   *float64 `protobuf:"fixed64,14,opt,name=createTimestamp" json:"createTimestamp,omitempty"`
	UpdateTimestamp   *float64 `protobuf:"fixed64,15,opt,name=updateTimestamp" json:"updateTimestamp,omitempty"`
	Status            *int32   `protobuf:"varint,16,opt,name=status" json:"status,omitempty"`
	XXX_unrecognized  []byte   `json:"-"`
}

func (m *OrderFill) Reset()                    { *m = OrderFill{} }
func (m *OrderFill) String() string            { return proto.CompactTextString(m) }
func (*OrderFill) ProtoMessage()               {}
func (*OrderFill) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *OrderFill) GetTrdSide() int32 {
	if m != nil && m.TrdSide != nil {
		return *m.TrdSide
	}
	return 0
}

func (m *OrderFill) GetFillID() uint64 {
	if m != nil && m.FillID != nil {
		return *m.FillID
	}
	return 0
}

func (m *OrderFill) GetFillIDEx() string {
	if m != nil && m.FillIDEx != nil {
		return *m.FillIDEx
	}
	return ""
}

func (m *OrderFill) GetOrderID() uint64 {
	if m != nil && m.OrderID != nil {
		return *m.OrderID
	}
	return 0
}

func (m *OrderFill) GetOrderIDEx() string {
	if m != nil && m.OrderIDEx != nil {
		return *m.OrderIDEx
	}
	return ""
}

func (m *OrderFill) GetCode() string {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return ""
}

func (m *OrderFill) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *OrderFill) GetQty() float64 {
	if m != nil && m.Qty != nil {
		return *m.Qty
	}
	return 0
}

func (m *OrderFill) GetPrice() float64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *OrderFill) GetCreateTime() string {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return ""
}

func (m *OrderFill) GetCounterBrokerID() int32 {
	if m != nil && m.CounterBrokerID != nil {
		return *m.CounterBrokerID
	}
	return 0
}

func (m *OrderFill) GetCounterBrokerName() string {
	if m != nil && m.CounterBrokerName != nil {
		return *m.CounterBrokerName
	}
	return ""
}

func (m *OrderFill) GetSecMarket() int32 {
	if m != nil && m.SecMarket != nil {
		return *m.SecMarket
	}
	return 0
}

func (m *OrderFill) GetCreateTimestamp() float64 {
	if m != nil && m.CreateTimestamp != nil {
		return *m.CreateTimestamp
	}
	return 0
}

func (m *OrderFill) GetUpdateTimestamp() float64 {
	if m != nil && m.UpdateTimestamp != nil {
		return *m.UpdateTimestamp
	}
	return 0
}

func (m *OrderFill) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

// 最大可交易数量
type MaxTrdQtys struct {
	// 因目前服务器实现的问题，卖空需要先卖掉持仓才能再卖空，是分开两步卖的，买回来同样是逆向两步；而看多的买是可以现金加融资一起一步买的，请注意这个差异
	MaxCashBuy          *float64 `protobuf:"fixed64,1,req,name=maxCashBuy" json:"maxCashBuy,omitempty"`
	MaxCashAndMarginBuy *float64 `protobuf:"fixed64,2,opt,name=maxCashAndMarginBuy" json:"maxCashAndMarginBuy,omitempty"`
	MaxPositionSell     *float64 `protobuf:"fixed64,3,req,name=maxPositionSell" json:"maxPositionSell,omitempty"`
	MaxSellShort        *float64 `protobuf:"fixed64,4,opt,name=maxSellShort" json:"maxSellShort,omitempty"`
	MaxBuyBack          *float64 `protobuf:"fixed64,5,opt,name=maxBuyBack" json:"maxBuyBack,omitempty"`
	XXX_unrecognized    []byte   `json:"-"`
}

func (m *MaxTrdQtys) Reset()                    { *m = MaxTrdQtys{} }
func (m *MaxTrdQtys) String() string            { return proto.CompactTextString(m) }
func (*MaxTrdQtys) ProtoMessage()               {}
func (*MaxTrdQtys) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *MaxTrdQtys) GetMaxCashBuy() float64 {
	if m != nil && m.MaxCashBuy != nil {
		return *m.MaxCashBuy
	}
	return 0
}

func (m *MaxTrdQtys) GetMaxCashAndMarginBuy() float64 {
	if m != nil && m.MaxCashAndMarginBuy != nil {
		return *m.MaxCashAndMarginBuy
	}
	return 0
}

func (m *MaxTrdQtys) GetMaxPositionSell() float64 {
	if m != nil && m.MaxPositionSell != nil {
		return *m.MaxPositionSell
	}
	return 0
}

func (m *MaxTrdQtys) GetMaxSellShort() float64 {
	if m != nil && m.MaxSellShort != nil {
		return *m.MaxSellShort
	}
	return 0
}

func (m *MaxTrdQtys) GetMaxBuyBack() float64 {
	if m != nil && m.MaxBuyBack != nil {
		return *m.MaxBuyBack
	}
	return 0
}

// 过滤条件，条件组合是"与"不是"或"，用于获取订单、成交、持仓等时二次过滤
type TrdFilterConditions struct {
	CodeList         []string `protobuf:"bytes,1,rep,name=codeList" json:"codeList,omitempty"`
	IdList           []uint64 `protobuf:"varint,2,rep,name=idList" json:"idList,omitempty"`
	BeginTime        *string  `protobuf:"bytes,3,opt,name=beginTime" json:"beginTime,omitempty"`
	EndTime          *string  `protobuf:"bytes,4,opt,name=endTime" json:"endTime,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *TrdFilterConditions) Reset()                    { *m = TrdFilterConditions{} }
func (m *TrdFilterConditions) String() string            { return proto.CompactTextString(m) }
func (*TrdFilterConditions) ProtoMessage()               {}
func (*TrdFilterConditions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *TrdFilterConditions) GetCodeList() []string {
	if m != nil {
		return m.CodeList
	}
	return nil
}

func (m *TrdFilterConditions) GetIdList() []uint64 {
	if m != nil {
		return m.IdList
	}
	return nil
}

func (m *TrdFilterConditions) GetBeginTime() string {
	if m != nil && m.BeginTime != nil {
		return *m.BeginTime
	}
	return ""
}

func (m *TrdFilterConditions) GetEndTime() string {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return ""
}

func init() {
	proto.RegisterType((*AccCashInfo)(nil), "Trd_Common.AccCashInfo")
	proto.RegisterType((*TrdHeader)(nil), "Trd_Common.TrdHeader")
	proto.RegisterType((*TrdAcc)(nil), "Trd_Common.TrdAcc")
	proto.RegisterType((*Funds)(nil), "Trd_Common.Funds")
	proto.RegisterType((*Position)(nil), "Trd_Common.Position")
	proto.RegisterType((*Order)(nil), "Trd_Common.Order")
	proto.RegisterType((*OrderFill)(nil), "Trd_Common.OrderFill")
	proto.RegisterType((*MaxTrdQtys)(nil), "Trd_Common.MaxTrdQtys")
	proto.RegisterType((*TrdFilterConditions)(nil), "Trd_Common.TrdFilterConditions")
	proto.RegisterEnum("Trd_Common.TrdEnv", TrdEnv_name, TrdEnv_value)
	proto.RegisterEnum("Trd_Common.TrdMarket", TrdMarket_name, TrdMarket_value)
	proto.RegisterEnum("Trd_Common.TrdSecMarket", TrdSecMarket_name, TrdSecMarket_value)
	proto.RegisterEnum("Trd_Common.TrdSide", TrdSide_name, TrdSide_value)
	proto.RegisterEnum("Trd_Common.OrderType", OrderType_name, OrderType_value)
	proto.RegisterEnum("Trd_Common.OrderStatus", OrderStatus_name, OrderStatus_value)
	proto.RegisterEnum("Trd_Common.OrderFillStatus", OrderFillStatus_name, OrderFillStatus_value)
	proto.RegisterEnum("Trd_Common.PositionSide", PositionSide_name, PositionSide_value)
	proto.RegisterEnum("Trd_Common.ModifyOrderOp", ModifyOrderOp_name, ModifyOrderOp_value)
	proto.RegisterEnum("Trd_Common.TrdAccType", TrdAccType_name, TrdAccType_value)
	proto.RegisterEnum("Trd_Common.Currency", Currency_name, Currency_value)
	proto.RegisterEnum("Trd_Common.CltRiskLevel", CltRiskLevel_name, CltRiskLevel_value)
}

func init() { proto.RegisterFile("Trd_Common.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1835 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0xcd, 0x4e, 0x24, 0xc9,
	0x11, 0xa6, 0xfa, 0x07, 0xe8, 0xa0, 0x81, 0xa4, 0xf8, 0xab, 0x61, 0x66, 0x76, 0x7b, 0x5b, 0x96,
	0x85, 0x5a, 0x16, 0x63, 0x59, 0xbe, 0xf9, 0x04, 0x0d, 0x08, 0x34, 0xfc, 0x6d, 0x35, 0xb3, 0x23,
	0xed, 0xa5, 0x9d, 0x54, 0x25, 0x4d, 0x8a, 0xea, 0xaa, 0x76, 0x55, 0x16, 0x43, 0xef, 0xcd, 0xf6,
	0x13, 0xd8, 0x27, 0xbf, 0x84, 0x25, 0x9f, 0xfc, 0x14, 0x7e, 0x02, 0x5f, 0xfd, 0x1a, 0x96, 0x6c,
	0x45, 0x64, 0xd6, 0x5f, 0x37, 0x3b, 0x1e, 0x1f, 0x76, 0x2e, 0x93, 0xf1, 0x7d, 0x91, 0x91, 0x91,
	0x91, 0x5f, 0x46, 0x56, 0x03, 0xec, 0x36, 0xf6, 0x87, 0xfd, 0x68, 0x3c, 0x8e, 0xc2, 0x83, 0x49,
	0x1c, 0xa9, 0xc8, 0x86, 0x02, 0xd9, 0x6b, 0x97, 0x99, 0xae, 0x84, 0x95, 0x43, 0xcf, 0xeb, 0xf3,
	0xe4, 0xe1, 0x3c, 0xbc, 0x8f, 0xec, 0x3d, 0x58, 0xf6, 0xd2, 0x38, 0x16, 0xa1, 0x37, 0x75, 0xac,
	0x8e, 0xb5, 0xdf, 0x74, 0x73, 0xdb, 0xb6, 0xa1, 0xe1, 0xf1, 0xe4, 0xc1, 0xa9, 0x75, 0xac, 0x7d,
	0xcb, 0xa5, 0xb1, 0xdd, 0x03, 0xc6, 0x9f, 0xb8, 0x0c, 0xf8, 0x5d, 0x20, 0x8e, 0x78, 0xc0, 0x43,
	0x4f, 0x38, 0x75, 0xe2, 0xe7, 0xf0, 0xee, 0x47, 0x68, 0xdd, 0xc6, 0xfe, 0x99, 0xe0, 0xbe, 0x88,
	0xed, 0x1d, 0x58, 0x54, 0xb1, 0x7f, 0x12, 0x3e, 0x39, 0x56, 0xa7, 0xb6, 0xdf, 0x74, 0x8d, 0x65,
	0x6f, 0x41, 0x93, 0x7b, 0xde, 0xf9, 0xb1, 0x53, 0xeb, 0xd4, 0xf6, 0x1b, 0xae, 0x36, 0xec, 0x37,
	0xd0, 0x52, 0xb1, 0x7f, 0xc9, 0xe3, 0x47, 0xa1, 0x9c, 0x3a, 0x4d, 0x28, 0x80, 0xee, 0x5f, 0x2c,
	0x58, 0xbc, 0x8d, 0xfd, 0x43, 0xcf, 0xfb, 0x3f, 0xc3, 0xfe, 0x02, 0x36, 0xf2, 0x28, 0x87, 0xa9,
	0x7a, 0xb8, 0x90, 0x09, 0x86, 0xaf, 0xef, 0x37, 0xdd, 0x79, 0xc2, 0x76, 0x60, 0x89, 0x7b, 0xde,
	0xed, 0x74, 0x22, 0x9c, 0x06, 0x95, 0x26, 0x33, 0x91, 0xf1, 0x78, 0xec, 0x5f, 0xa5, 0x63, 0xa7,
	0xd9, 0xb1, 0xf6, 0x5b, 0x6e, 0x66, 0x76, 0xff, 0xdc, 0x80, 0xe6, 0x69, 0x1a, 0xfa, 0x09, 0x66,
	0x30, 0x89, 0x3e, 0x89, 0x98, 0x12, 0xb3, 0x5c, 0x6d, 0xd8, 0x1d, 0x58, 0x51, 0x91, 0xe2, 0xc1,
	0x61, 0x92, 0x08, 0x95, 0x50, 0x76, 0x96, 0x5b, 0x86, 0xf2, 0xaa, 0xd7, 0x89, 0xd2, 0x55, 0x7f,
	0x03, 0xad, 0x31, 0xe5, 0xf6, 0x1d, 0x0f, 0x9c, 0x06, 0x11, 0x05, 0x60, 0x7f, 0x05, 0x70, 0x1f,
	0x47, 0x3f, 0x88, 0x10, 0x4f, 0xd5, 0x69, 0x12, 0x5d, 0x42, 0xf0, 0x8c, 0x7d, 0x71, 0xa7, 0x88,
	0x5d, 0x24, 0x36, 0xb7, 0xb1, 0x22, 0xfc, 0x29, 0xf8, 0x28, 0xd5, 0x83, 0x1f, 0xf3, 0x4f, 0x3c,
	0x20, 0xa7, 0x25, 0x72, 0x9a, 0x27, 0x2a, 0x6a, 0x59, 0x9e, 0x51, 0xcb, 0xcf, 0x61, 0x2d, 0x57,
	0x00, 0x55, 0xc0, 0x69, 0x91, 0x2e, 0x66, 0x50, 0xbb, 0x0b, 0xed, 0x34, 0x8c, 0x05, 0x0f, 0xe4,
	0x0f, 0xc2, 0xbf, 0xb9, 0x70, 0x80, 0xbc, 0x2a, 0x18, 0xee, 0xa8, 0xe4, 0xb1, 0x42, 0x1e, 0x25,
	0x04, 0xeb, 0x11, 0xcb, 0xe4, 0xf1, 0x42, 0x3c, 0x89, 0xc0, 0x69, 0x53, 0x22, 0x05, 0x60, 0xff,
	0x0c, 0x56, 0x65, 0x28, 0x95, 0xe4, 0xc1, 0x25, 0x8f, 0x47, 0x32, 0x74, 0x56, 0x29, 0x40, 0x15,
	0xc4, 0x9d, 0x8f, 0xb9, 0x0c, 0x95, 0x08, 0x51, 0xac, 0xc6, 0x73, 0x8d, 0x3c, 0xe7, 0x09, 0xfb,
	0x37, 0xd0, 0xf6, 0xcc, 0x9d, 0x21, 0xd1, 0xac, 0x77, 0xea, 0xfb, 0x2b, 0xbf, 0xda, 0x3d, 0x28,
	0xdd, 0xbc, 0xd2, 0xb5, 0x72, 0x2b, 0xce, 0xdd, 0xbf, 0x35, 0x60, 0xf9, 0x26, 0x4a, 0xa4, 0x92,
	0x51, 0x88, 0x7b, 0x9b, 0x98, 0xf1, 0xf9, 0x31, 0x89, 0xa3, 0xe1, 0x96, 0x10, 0xac, 0x4f, 0x66,
	0x0d, 0xa4, 0x2f, 0x48, 0x22, 0x4d, 0xb7, 0x82, 0x91, 0x46, 0x22, 0x5f, 0x90, 0x46, 0x5a, 0x2e,
	0x8d, 0x11, 0x0b, 0xf9, 0x58, 0x90, 0x3c, 0x5a, 0x2e, 0x8d, 0x6d, 0x06, 0xf5, 0xdf, 0xa9, 0xa9,
	0x91, 0x04, 0x0e, 0x71, 0x75, 0x8f, 0x87, 0x03, 0x11, 0x04, 0xdf, 0xaa, 0xa9, 0x51, 0x43, 0x09,
	0x21, 0xd5, 0xc6, 0xd2, 0x13, 0x46, 0x03, 0xda, 0xc0, 0x7a, 0x7b, 0x51, 0xa2, 0x6e, 0x88, 0x59,
	0xa6, 0x1a, 0x15, 0x00, 0xae, 0xf2, 0xc4, 0x03, 0xa7, 0xa5, 0x57, 0x79, 0xe2, 0x01, 0x45, 0x09,
	0x50, 0xab, 0x60, 0xa2, 0xa0, 0x81, 0xb7, 0x66, 0x12, 0xb8, 0x5c, 0xc9, 0xc8, 0x1c, 0x69, 0x66,
	0x62, 0xfc, 0x44, 0x78, 0xe6, 0xba, 0x9b, 0xf3, 0xcc, 0x01, 0xfb, 0x15, 0x2c, 0x2b, 0x7f, 0xa8,
	0x03, 0x6e, 0xeb, 0x89, 0xca, 0xbf, 0xa1, 0x90, 0xaf, 0xa1, 0xa5, 0xfc, 0xa1, 0x8a, 0x7d, 0xe4,
	0x76, 0x88, 0x5b, 0x56, 0xfe, 0x2d, 0xd9, 0x86, 0xbc, 0x4b, 0xa7, 0x48, 0xee, 0x66, 0xe4, 0x11,
	0xd9, 0x05, 0x89, 0x75, 0x70, 0x4a, 0x24, 0x56, 0xe1, 0x2d, 0x80, 0xf2, 0x87, 0x89, 0x08, 0x68,
	0xcd, 0x57, 0x7a, 0xc3, 0xca, 0x1f, 0x68, 0xa0, 0x44, 0xe3, 0xe4, 0xbd, 0x32, 0x8d, 0xb3, 0x67,
	0x15, 0xfe, 0xe6, 0x7f, 0x2a, 0xfc, 0xed, 0xac, 0xc2, 0xbb, 0x7f, 0x6a, 0x40, 0xf3, 0x3a, 0xc6,
	0xc6, 0xe9, 0xc0, 0x92, 0x8a, 0x7d, 0x92, 0x82, 0x6e, 0x71, 0x99, 0x89, 0x55, 0x8b, 0xd0, 0x85,
	0x3a, 0x94, 0x96, 0x49, 0x01, 0x60, 0xa7, 0x21, 0x63, 0xa0, 0xb8, 0x4a, 0x13, 0xd3, 0x44, 0xcb,
	0x10, 0x46, 0x26, 0xf3, 0xfc, 0x98, 0x44, 0xd3, 0x70, 0x33, 0x33, 0x8f, 0x7c, 0x7e, 0x7c, 0xf2,
	0x4c, 0xea, 0x69, 0xb9, 0x05, 0x90, 0xab, 0x6f, 0xf1, 0x05, 0xf5, 0x2d, 0xcd, 0xab, 0x6f, 0xb9,
	0x50, 0x5f, 0xae, 0x2e, 0xdd, 0x1a, 0x8c, 0xba, 0x50, 0x93, 0xb1, 0xe0, 0x4a, 0xdc, 0xca, 0xb1,
	0x20, 0xc9, 0xb4, 0xdc, 0x12, 0x82, 0x7c, 0x3a, 0xf1, 0x33, 0x7e, 0x45, 0xf3, 0x05, 0x82, 0xfb,
	0xb8, 0x97, 0xfa, 0x2c, 0xda, 0x5a, 0x1e, 0xc6, 0xc4, 0x93, 0xc0, 0xe1, 0xe1, 0xd3, 0x48, 0x4b,
	0x57, 0x37, 0x82, 0x0a, 0x86, 0xd1, 0x03, 0x9e, 0xa8, 0x93, 0x38, 0xbe, 0x4c, 0x46, 0xd4, 0x00,
	0x5a, 0x6e, 0x09, 0xa9, 0x6a, 0x73, 0x7d, 0x56, 0x9b, 0xfb, 0xb0, 0x5e, 0x64, 0x9a, 0x28, 0x3e,
	0x9e, 0x38, 0x8c, 0x16, 0x99, 0x85, 0xd1, 0xb3, 0xc8, 0x59, 0x7b, 0x6e, 0x68, 0xcf, 0x19, 0x18,
	0xdf, 0xb4, 0x58, 0x60, 0x7b, 0x77, 0x6c, 0xca, 0xc6, 0x58, 0xdd, 0x7f, 0xd5, 0xa1, 0x45, 0x9a,
	0x38, 0x95, 0x41, 0xf0, 0x19, 0x5d, 0xec, 0xc0, 0x22, 0xee, 0x30, 0x7f, 0xfc, 0x8c, 0x85, 0xdd,
	0x5b, 0x8f, 0x4e, 0x9e, 0x4d, 0xe7, 0xc8, 0xed, 0xaa, 0x16, 0xac, 0xcf, 0x68, 0xc1, 0xfa, 0x09,
	0xb4, 0x50, 0xfb, 0x72, 0x2d, 0x60, 0xbd, 0xa3, 0x34, 0x54, 0x22, 0x3e, 0x8a, 0xa3, 0x47, 0xca,
	0x77, 0x85, 0xce, 0x64, 0x16, 0xc6, 0xfe, 0x5e, 0x81, 0xae, 0x30, 0xa5, 0x36, 0xe5, 0x3f, 0x4f,
	0x54, 0x4f, 0x79, 0xf5, 0x0b, 0x4e, 0x79, 0xed, 0x8b, 0x4f, 0x79, 0xfd, 0x47, 0x4f, 0x39, 0xd1,
	0x57, 0x93, 0xd1, 0x72, 0xc6, 0xea, 0xfe, 0xc3, 0x02, 0xb8, 0xe4, 0xcf, 0xb7, 0xb1, 0xff, 0xad,
	0x9a, 0x26, 0x58, 0x90, 0x31, 0x7f, 0xc6, 0x87, 0xe5, 0x28, 0x9d, 0x9a, 0x6f, 0x89, 0x12, 0x62,
	0xff, 0x12, 0x36, 0x8d, 0x75, 0x18, 0xfa, 0xfa, 0xb1, 0x42, 0x47, 0xfd, 0xcd, 0xf6, 0x12, 0x85,
	0x29, 0x8e, 0xf9, 0x73, 0xf6, 0x1e, 0x61, 0xd3, 0x32, 0xdf, 0x1a, 0xb3, 0x30, 0x5e, 0x9f, 0x31,
	0x7f, 0xc6, 0xe1, 0xe0, 0x21, 0x8a, 0x15, 0x29, 0xc3, 0x72, 0x2b, 0x98, 0xc9, 0xef, 0x28, 0x9d,
	0x1e, 0x71, 0xef, 0x91, 0xf4, 0xa1, 0xf3, 0x33, 0x48, 0xf7, 0xf7, 0x16, 0x6c, 0xde, 0xc6, 0xfe,
	0xa9, 0x0c, 0x94, 0x88, 0xfb, 0x51, 0xe8, 0x53, 0xf8, 0x84, 0x3e, 0x25, 0x22, 0x5f, 0xd0, 0x63,
	0x6a, 0x75, 0xea, 0x28, 0xc6, 0xcc, 0xc6, 0xd2, 0x48, 0x9f, 0x98, 0x5a, 0xa7, 0x8e, 0x02, 0xd6,
	0x16, 0x1e, 0xd2, 0x9d, 0x18, 0xc9, 0x90, 0xb4, 0x51, 0xd7, 0x52, 0xcc, 0x01, 0x94, 0xb0, 0x08,
	0x7d, 0xe2, 0x1a, 0xfa, 0xa3, 0xcc, 0x98, 0xbd, 0x03, 0xfa, 0x5c, 0xc4, 0xcf, 0xc2, 0x4d, 0x58,
	0xd7, 0xa3, 0xe1, 0x40, 0x8e, 0xd3, 0x80, 0x2b, 0xc1, 0x16, 0xec, 0x75, 0x58, 0x31, 0xa0, 0x2b,
	0x78, 0xc0, 0xac, 0xde, 0x1f, 0x2d, 0xfa, 0x72, 0x35, 0x87, 0xbf, 0x0d, 0x1b, 0xb9, 0x31, 0xfc,
	0x10, 0x3e, 0x86, 0xd1, 0xa7, 0x90, 0x2d, 0xd8, 0x0c, 0xda, 0x05, 0x7c, 0xf6, 0x9e, 0x59, 0x55,
	0xe4, 0xc3, 0x80, 0xd5, 0xaa, 0x48, 0xff, 0x8a, 0xd5, 0x6d, 0x1b, 0xd6, 0xca, 0xb3, 0xfa, 0x7d,
	0xd6, 0xa8, 0x2e, 0x70, 0x9a, 0xaa, 0x34, 0x16, 0x09, 0x6b, 0xf6, 0xfe, 0x60, 0xd1, 0xec, 0x41,
	0xae, 0x42, 0x07, 0xb6, 0xca, 0x76, 0x29, 0x17, 0xbd, 0xad, 0x82, 0xa1, 0x74, 0x66, 0x41, 0xca,
	0x68, 0x07, 0xec, 0x0a, 0xd8, 0xbf, 0x1a, 0x0e, 0xce, 0xd8, 0xd7, 0x2f, 0xe2, 0xdf, 0xb3, 0x4e,
	0x6f, 0x0c, 0x4b, 0xb7, 0xa6, 0xad, 0x98, 0x78, 0xd2, 0x17, 0xa5, 0x95, 0x75, 0xed, 0x08, 0x3c,
	0x4a, 0xa7, 0x79, 0x11, 0x08, 0x40, 0x91, 0xb0, 0x9a, 0xd9, 0x5e, 0x8e, 0x90, 0x6c, 0x58, 0xbd,
	0x1c, 0xce, 0x68, 0x85, 0x35, 0x7a, 0xff, 0xb4, 0x4c, 0x8b, 0xa3, 0x27, 0x6c, 0x1b, 0x36, 0x72,
	0xa3, 0xb4, 0xe6, 0x16, 0xb0, 0x02, 0xbe, 0x8a, 0xe2, 0x31, 0x1e, 0x5a, 0x15, 0xd5, 0xbb, 0x60,
	0x35, 0xfb, 0x35, 0xec, 0x16, 0xe8, 0xe1, 0x5d, 0x12, 0x05, 0xa9, 0x12, 0x17, 0x72, 0x2c, 0x15,
	0x6b, 0x56, 0xe3, 0x1f, 0xa6, 0x1e, 0x2a, 0x93, 0x2d, 0xda, 0x7b, 0xb0, 0x33, 0x07, 0xeb, 0x29,
	0x4b, 0x55, 0x6e, 0x30, 0x11, 0x9e, 0xe4, 0x81, 0xe6, 0x96, 0xed, 0xaf, 0x60, 0xef, 0x65, 0x6e,
	0x78, 0x18, 0x04, 0xac, 0xd5, 0xfb, 0x77, 0x1d, 0x56, 0xae, 0x4b, 0xef, 0x6f, 0x96, 0x9b, 0x36,
	0x87, 0x1f, 0xc2, 0x24, 0xbd, 0x1b, 0x4b, 0xa5, 0x84, 0xcf, 0x16, 0xec, 0x0e, 0x6c, 0x56, 0x49,
	0xbd, 0xfb, 0xff, 0x64, 0xff, 0x2c, 0xfb, 0x2d, 0xbc, 0x2a, 0x7b, 0x7c, 0xe4, 0x52, 0xc9, 0x70,
	0x34, 0xa0, 0x18, 0xcc, 0xca, 0x33, 0x35, 0xb4, 0xc6, 0xd1, 0x83, 0xd5, 0xec, 0x37, 0xe0, 0xcc,
	0x73, 0xa7, 0x5c, 0x06, 0xc2, 0x67, 0x75, 0x7b, 0xb7, 0xba, 0x34, 0x5e, 0xa1, 0xeb, 0x54, 0xb1,
	0x86, 0xfd, 0x0a, 0xb6, 0x5f, 0x08, 0x29, 0x7c, 0xd6, 0x9c, 0xdd, 0x0b, 0xbe, 0x50, 0xc2, 0x1f,
	0xde, 0xf0, 0x58, 0x31, 0x98, 0x4d, 0xc5, 0x90, 0x58, 0x94, 0x15, 0xfb, 0x6b, 0x78, 0x5d, 0xe6,
	0xfa, 0xf8, 0xcd, 0x1d, 0x04, 0x32, 0x1c, 0xe9, 0xc9, 0xed, 0xbc, 0xaa, 0xf3, 0x0e, 0x18, 0x60,
	0xf5, 0x47, 0xf8, 0x6c, 0xf1, 0xb5, 0xd9, 0x32, 0x15, 0x3c, 0x4e, 0x5f, 0x47, 0xe1, 0x57, 0x72,
	0xd3, 0x45, 0xd8, 0xc6, 0xcb, 0x56, 0xc6, 0x8f, 0x65, 0x82, 0x3f, 0x61, 0x7c, 0xb6, 0x33, 0x5b,
	0x9e, 0x63, 0x11, 0x08, 0xac, 0xc1, 0xee, 0xec, 0x4a, 0xb8, 0xcd, 0x7c, 0x35, 0xe6, 0xf4, 0x04,
	0xac, 0xe7, 0xaf, 0xb7, 0x51, 0x40, 0xb6, 0x78, 0x01, 0x0d, 0xaf, 0xdf, 0xb3, 0x85, 0x3c, 0x52,
	0x09, 0x2f, 0x22, 0x59, 0x79, 0xb1, 0xcb, 0xf4, 0x03, 0x0f, 0x47, 0xc2, 0x67, 0xb5, 0xde, 0x6f,
	0xa1, 0x7d, 0x53, 0xfe, 0xad, 0xb0, 0x0d, 0x1b, 0x65, 0x7b, 0x78, 0x11, 0x85, 0x23, 0xb6, 0x60,
	0x7f, 0x03, 0x5b, 0x15, 0xf8, 0x05, 0x81, 0xed, 0x80, 0x5d, 0x71, 0xd1, 0x37, 0xd7, 0xea, 0xfd,
	0xd5, 0x82, 0xd5, 0xcb, 0xc8, 0x97, 0xf7, 0x53, 0xca, 0xe2, 0x7a, 0x82, 0xc2, 0xa8, 0x00, 0xa5,
	0xcb, 0xea, 0xc0, 0x56, 0x95, 0xca, 0x2f, 0xec, 0x1c, 0xa3, 0xb7, 0xc8, 0x6a, 0xf3, 0xe1, 0x4c,
	0xf5, 0x59, 0x7d, 0x7e, 0xd2, 0x49, 0x48, 0x4c, 0x63, 0x9e, 0xd1, 0x07, 0xc3, 0x9a, 0xbd, 0x1b,
	0x00, 0xfd, 0xd7, 0x02, 0x6a, 0x2a, 0xba, 0xd3, 0x19, 0x6b, 0xae, 0x87, 0x66, 0x38, 0xbe, 0x9a,
	0xcc, 0x32, 0xbd, 0x2b, 0x03, 0xf5, 0x1b, 0xca, 0x6a, 0xbd, 0xef, 0x60, 0xb9, 0x9f, 0xfd, 0xee,
	0xdd, 0x02, 0x96, 0x8d, 0xab, 0xaf, 0x43, 0x8e, 0x9e, 0xbd, 0x3f, 0xd6, 0x8d, 0xb1, 0xf0, 0x1b,
	0x1c, 0xeb, 0xd7, 0x21, 0x47, 0xfa, 0x57, 0x67, 0xac, 0xde, 0xfb, 0xbb, 0x05, 0xed, 0x7e, 0xa0,
	0xdc, 0xfc, 0xa7, 0xec, 0x37, 0xb0, 0x55, 0xb6, 0x5f, 0x3a, 0xa5, 0x6d, 0xd8, 0xa8, 0xb8, 0x0c,
	0xf8, 0xbd, 0xd0, 0x75, 0xaf, 0xc0, 0x1f, 0x79, 0x1c, 0xe2, 0xe5, 0xb7, 0x50, 0xbf, 0x15, 0xe6,
	0x18, 0x95, 0x13, 0xb3, 0x1a, 0xaa, 0xae, 0x42, 0x64, 0xed, 0x92, 0x22, 0xd6, 0xf1, 0x16, 0x57,
	0xe8, 0xeb, 0x89, 0x32, 0x53, 0x1b, 0x47, 0xef, 0x61, 0xd3, 0x8b, 0xc6, 0x07, 0xf7, 0xa9, 0x4a,
	0x0f, 0xa2, 0x89, 0x08, 0xf9, 0x44, 0x1e, 0x4c, 0xee, 0xbe, 0xff, 0xf5, 0x48, 0xaa, 0x87, 0xf4,
	0xee, 0xc0, 0x8b, 0xc6, 0xef, 0x12, 0x25, 0x26, 0x0f, 0x22, 0x0c, 0xa6, 0xe9, 0xbb, 0x51, 0x84,
	0x8e, 0x7c, 0x22, 0xdf, 0xe1, 0xff, 0xf4, 0x77, 0xa9, 0x77, 0xc5, 0x0f, 0xe9, 0xff, 0x06, 0x00,
	0x00, 0xff, 0xff, 0x95, 0xba, 0x8c, 0x86, 0xcf, 0x12, 0x00, 0x00,
}
