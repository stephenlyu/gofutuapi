// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Qot_StockFilter.proto

/*
Package Qot_StockFilter is a generated protocol buffer package.

It is generated from these files:
	Qot_StockFilter.proto

It has these top-level messages:
	BaseFilter
	AccumulateFilter
	FinancialFilter
	BaseData
	AccumulateData
	FinancialData
	StockData
	C2S
	S2C
	Request
	Response
*/
package Qot_StockFilter

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/stephenlyu/gofutuapi/futuproto/Common"
import Qot_Common "github.com/stephenlyu/gofutuapi/futuproto/Qot_Common"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 简单属性
type StockField int32

const (
	StockField_StockField_Unknown                        StockField = 0
	StockField_StockField_StockCode                      StockField = 1
	StockField_StockField_StockName                      StockField = 2
	StockField_StockField_CurPrice                       StockField = 3
	StockField_StockField_CurPriceToHighest52WeeksRatio  StockField = 4
	StockField_StockField_CurPriceToLowest52WeeksRatio   StockField = 5
	StockField_StockField_HighPriceToHighest52WeeksRatio StockField = 6
	StockField_StockField_LowPriceToLowest52WeeksRatio   StockField = 7
	StockField_StockField_VolumeRatio                    StockField = 8
	StockField_StockField_BidAskRatio                    StockField = 9
	StockField_StockField_LotPrice                       StockField = 10
	StockField_StockField_MarketVal                      StockField = 11
	StockField_StockField_PeAnnual                       StockField = 12
	StockField_StockField_PeTTM                          StockField = 13
	StockField_StockField_PbRate                         StockField = 14
	StockField_StockField_ChangeRate5min                 StockField = 15
	StockField_StockField_ChangeRateBeginYear            StockField = 16
)

var StockField_name = map[int32]string{
	0:  "StockField_Unknown",
	1:  "StockField_StockCode",
	2:  "StockField_StockName",
	3:  "StockField_CurPrice",
	4:  "StockField_CurPriceToHighest52WeeksRatio",
	5:  "StockField_CurPriceToLowest52WeeksRatio",
	6:  "StockField_HighPriceToHighest52WeeksRatio",
	7:  "StockField_LowPriceToLowest52WeeksRatio",
	8:  "StockField_VolumeRatio",
	9:  "StockField_BidAskRatio",
	10: "StockField_LotPrice",
	11: "StockField_MarketVal",
	12: "StockField_PeAnnual",
	13: "StockField_PeTTM",
	14: "StockField_PbRate",
	15: "StockField_ChangeRate5min",
	16: "StockField_ChangeRateBeginYear",
}
var StockField_value = map[string]int32{
	"StockField_Unknown":                        0,
	"StockField_StockCode":                      1,
	"StockField_StockName":                      2,
	"StockField_CurPrice":                       3,
	"StockField_CurPriceToHighest52WeeksRatio":  4,
	"StockField_CurPriceToLowest52WeeksRatio":   5,
	"StockField_HighPriceToHighest52WeeksRatio": 6,
	"StockField_LowPriceToLowest52WeeksRatio":   7,
	"StockField_VolumeRatio":                    8,
	"StockField_BidAskRatio":                    9,
	"StockField_LotPrice":                       10,
	"StockField_MarketVal":                      11,
	"StockField_PeAnnual":                       12,
	"StockField_PeTTM":                          13,
	"StockField_PbRate":                         14,
	"StockField_ChangeRate5min":                 15,
	"StockField_ChangeRateBeginYear":            16,
}

func (x StockField) Enum() *StockField {
	p := new(StockField)
	*p = x
	return p
}
func (x StockField) String() string {
	return proto.EnumName(StockField_name, int32(x))
}
func (x *StockField) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StockField_value, data, "StockField")
	if err != nil {
		return err
	}
	*x = StockField(value)
	return nil
}
func (StockField) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// 累积属性
type AccumulateField int32

const (
	AccumulateField_AccumulateField_Unknown      AccumulateField = 0
	AccumulateField_AccumulateField_ChangeRate   AccumulateField = 1
	AccumulateField_AccumulateField_Amplitude    AccumulateField = 2
	AccumulateField_AccumulateField_Volume       AccumulateField = 3
	AccumulateField_AccumulateField_Turnover     AccumulateField = 4
	AccumulateField_AccumulateField_TurnoverRate AccumulateField = 5
)

var AccumulateField_name = map[int32]string{
	0: "AccumulateField_Unknown",
	1: "AccumulateField_ChangeRate",
	2: "AccumulateField_Amplitude",
	3: "AccumulateField_Volume",
	4: "AccumulateField_Turnover",
	5: "AccumulateField_TurnoverRate",
}
var AccumulateField_value = map[string]int32{
	"AccumulateField_Unknown":      0,
	"AccumulateField_ChangeRate":   1,
	"AccumulateField_Amplitude":    2,
	"AccumulateField_Volume":       3,
	"AccumulateField_Turnover":     4,
	"AccumulateField_TurnoverRate": 5,
}

func (x AccumulateField) Enum() *AccumulateField {
	p := new(AccumulateField)
	*p = x
	return p
}
func (x AccumulateField) String() string {
	return proto.EnumName(AccumulateField_name, int32(x))
}
func (x *AccumulateField) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AccumulateField_value, data, "AccumulateField")
	if err != nil {
		return err
	}
	*x = AccumulateField(value)
	return nil
}
func (AccumulateField) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// 财务属性
type FinancialField int32

const (
	FinancialField_FinancialField_Unknown             FinancialField = 0
	FinancialField_FinancialField_NetProfit           FinancialField = 1
	FinancialField_FinancialField_NetProfitGrowth     FinancialField = 2
	FinancialField_FinancialField_SumOfBusiness       FinancialField = 3
	FinancialField_FinancialField_SumOfBusinessGrowth FinancialField = 4
	FinancialField_FinancialField_NetProfitRate       FinancialField = 5
	FinancialField_FinancialField_GrossProfitRate     FinancialField = 6
	FinancialField_FinancialField_DebtAssetRate       FinancialField = 7
	FinancialField_FinancialField_ReturnOnEquityRate  FinancialField = 8
)

var FinancialField_name = map[int32]string{
	0: "FinancialField_Unknown",
	1: "FinancialField_NetProfit",
	2: "FinancialField_NetProfitGrowth",
	3: "FinancialField_SumOfBusiness",
	4: "FinancialField_SumOfBusinessGrowth",
	5: "FinancialField_NetProfitRate",
	6: "FinancialField_GrossProfitRate",
	7: "FinancialField_DebtAssetRate",
	8: "FinancialField_ReturnOnEquityRate",
}
var FinancialField_value = map[string]int32{
	"FinancialField_Unknown":             0,
	"FinancialField_NetProfit":           1,
	"FinancialField_NetProfitGrowth":     2,
	"FinancialField_SumOfBusiness":       3,
	"FinancialField_SumOfBusinessGrowth": 4,
	"FinancialField_NetProfitRate":       5,
	"FinancialField_GrossProfitRate":     6,
	"FinancialField_DebtAssetRate":       7,
	"FinancialField_ReturnOnEquityRate":  8,
}

func (x FinancialField) Enum() *FinancialField {
	p := new(FinancialField)
	*p = x
	return p
}
func (x FinancialField) String() string {
	return proto.EnumName(FinancialField_name, int32(x))
}
func (x *FinancialField) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FinancialField_value, data, "FinancialField")
	if err != nil {
		return err
	}
	*x = FinancialField(value)
	return nil
}
func (FinancialField) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// 财报时间
type FinancialQuarter int32

const (
	FinancialQuarter_FinancialQuarter_Unknown           FinancialQuarter = 0
	FinancialQuarter_FinancialQuarter_Annual            FinancialQuarter = 1
	FinancialQuarter_FinancialQuarter_FirstQuarter      FinancialQuarter = 2
	FinancialQuarter_FinancialQuarter_Interim           FinancialQuarter = 3
	FinancialQuarter_FinancialQuarter_ThirdQuarter      FinancialQuarter = 4
	FinancialQuarter_FinancialQuarter_MostRecentQuarter FinancialQuarter = 5
)

var FinancialQuarter_name = map[int32]string{
	0: "FinancialQuarter_Unknown",
	1: "FinancialQuarter_Annual",
	2: "FinancialQuarter_FirstQuarter",
	3: "FinancialQuarter_Interim",
	4: "FinancialQuarter_ThirdQuarter",
	5: "FinancialQuarter_MostRecentQuarter",
}
var FinancialQuarter_value = map[string]int32{
	"FinancialQuarter_Unknown":           0,
	"FinancialQuarter_Annual":            1,
	"FinancialQuarter_FirstQuarter":      2,
	"FinancialQuarter_Interim":           3,
	"FinancialQuarter_ThirdQuarter":      4,
	"FinancialQuarter_MostRecentQuarter": 5,
}

func (x FinancialQuarter) Enum() *FinancialQuarter {
	p := new(FinancialQuarter)
	*p = x
	return p
}
func (x FinancialQuarter) String() string {
	return proto.EnumName(FinancialQuarter_name, int32(x))
}
func (x *FinancialQuarter) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FinancialQuarter_value, data, "FinancialQuarter")
	if err != nil {
		return err
	}
	*x = FinancialQuarter(value)
	return nil
}
func (FinancialQuarter) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// 排序方向
type SortDir int32

const (
	SortDir_SortDir_No      SortDir = 0
	SortDir_SortDir_Ascend  SortDir = 1
	SortDir_SortDir_Descend SortDir = 2
)

var SortDir_name = map[int32]string{
	0: "SortDir_No",
	1: "SortDir_Ascend",
	2: "SortDir_Descend",
}
var SortDir_value = map[string]int32{
	"SortDir_No":      0,
	"SortDir_Ascend":  1,
	"SortDir_Descend": 2,
}

func (x SortDir) Enum() *SortDir {
	p := new(SortDir)
	*p = x
	return p
}
func (x SortDir) String() string {
	return proto.EnumName(SortDir_name, int32(x))
}
func (x *SortDir) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SortDir_value, data, "SortDir")
	if err != nil {
		return err
	}
	*x = SortDir(value)
	return nil
}
func (SortDir) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// 简单属性筛选
type BaseFilter struct {
	Field            *int32   `protobuf:"varint,1,req,name=field" json:"field,omitempty"`
	FilterMin        *float64 `protobuf:"fixed64,2,opt,name=filterMin" json:"filterMin,omitempty"`
	FilterMax        *float64 `protobuf:"fixed64,3,opt,name=filterMax" json:"filterMax,omitempty"`
	IsNoFilter       *bool    `protobuf:"varint,4,opt,name=isNoFilter" json:"isNoFilter,omitempty"`
	SortDir          *int32   `protobuf:"varint,5,opt,name=sortDir" json:"sortDir,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *BaseFilter) Reset()                    { *m = BaseFilter{} }
func (m *BaseFilter) String() string            { return proto.CompactTextString(m) }
func (*BaseFilter) ProtoMessage()               {}
func (*BaseFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BaseFilter) GetField() int32 {
	if m != nil && m.Field != nil {
		return *m.Field
	}
	return 0
}

func (m *BaseFilter) GetFilterMin() float64 {
	if m != nil && m.FilterMin != nil {
		return *m.FilterMin
	}
	return 0
}

func (m *BaseFilter) GetFilterMax() float64 {
	if m != nil && m.FilterMax != nil {
		return *m.FilterMax
	}
	return 0
}

func (m *BaseFilter) GetIsNoFilter() bool {
	if m != nil && m.IsNoFilter != nil {
		return *m.IsNoFilter
	}
	return false
}

func (m *BaseFilter) GetSortDir() int32 {
	if m != nil && m.SortDir != nil {
		return *m.SortDir
	}
	return 0
}

// 累积属性筛选
type AccumulateFilter struct {
	Field            *int32   `protobuf:"varint,1,req,name=field" json:"field,omitempty"`
	FilterMin        *float64 `protobuf:"fixed64,2,opt,name=filterMin" json:"filterMin,omitempty"`
	FilterMax        *float64 `protobuf:"fixed64,3,opt,name=filterMax" json:"filterMax,omitempty"`
	IsNoFilter       *bool    `protobuf:"varint,4,opt,name=isNoFilter" json:"isNoFilter,omitempty"`
	SortDir          *int32   `protobuf:"varint,5,opt,name=sortDir" json:"sortDir,omitempty"`
	Days             *int32   `protobuf:"varint,6,req,name=days" json:"days,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *AccumulateFilter) Reset()                    { *m = AccumulateFilter{} }
func (m *AccumulateFilter) String() string            { return proto.CompactTextString(m) }
func (*AccumulateFilter) ProtoMessage()               {}
func (*AccumulateFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AccumulateFilter) GetField() int32 {
	if m != nil && m.Field != nil {
		return *m.Field
	}
	return 0
}

func (m *AccumulateFilter) GetFilterMin() float64 {
	if m != nil && m.FilterMin != nil {
		return *m.FilterMin
	}
	return 0
}

func (m *AccumulateFilter) GetFilterMax() float64 {
	if m != nil && m.FilterMax != nil {
		return *m.FilterMax
	}
	return 0
}

func (m *AccumulateFilter) GetIsNoFilter() bool {
	if m != nil && m.IsNoFilter != nil {
		return *m.IsNoFilter
	}
	return false
}

func (m *AccumulateFilter) GetSortDir() int32 {
	if m != nil && m.SortDir != nil {
		return *m.SortDir
	}
	return 0
}

func (m *AccumulateFilter) GetDays() int32 {
	if m != nil && m.Days != nil {
		return *m.Days
	}
	return 0
}

// 财务属性筛选
type FinancialFilter struct {
	Field            *int32   `protobuf:"varint,1,req,name=field" json:"field,omitempty"`
	FilterMin        *float64 `protobuf:"fixed64,2,opt,name=filterMin" json:"filterMin,omitempty"`
	FilterMax        *float64 `protobuf:"fixed64,3,opt,name=filterMax" json:"filterMax,omitempty"`
	IsNoFilter       *bool    `protobuf:"varint,4,opt,name=isNoFilter" json:"isNoFilter,omitempty"`
	SortDir          *int32   `protobuf:"varint,5,opt,name=sortDir" json:"sortDir,omitempty"`
	Quarter          *int32   `protobuf:"varint,6,req,name=quarter" json:"quarter,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *FinancialFilter) Reset()                    { *m = FinancialFilter{} }
func (m *FinancialFilter) String() string            { return proto.CompactTextString(m) }
func (*FinancialFilter) ProtoMessage()               {}
func (*FinancialFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FinancialFilter) GetField() int32 {
	if m != nil && m.Field != nil {
		return *m.Field
	}
	return 0
}

func (m *FinancialFilter) GetFilterMin() float64 {
	if m != nil && m.FilterMin != nil {
		return *m.FilterMin
	}
	return 0
}

func (m *FinancialFilter) GetFilterMax() float64 {
	if m != nil && m.FilterMax != nil {
		return *m.FilterMax
	}
	return 0
}

func (m *FinancialFilter) GetIsNoFilter() bool {
	if m != nil && m.IsNoFilter != nil {
		return *m.IsNoFilter
	}
	return false
}

func (m *FinancialFilter) GetSortDir() int32 {
	if m != nil && m.SortDir != nil {
		return *m.SortDir
	}
	return 0
}

func (m *FinancialFilter) GetQuarter() int32 {
	if m != nil && m.Quarter != nil {
		return *m.Quarter
	}
	return 0
}

// 简单属性数据
type BaseData struct {
	Field            *int32   `protobuf:"varint,1,req,name=field" json:"field,omitempty"`
	Value            *float64 `protobuf:"fixed64,2,req,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *BaseData) Reset()                    { *m = BaseData{} }
func (m *BaseData) String() string            { return proto.CompactTextString(m) }
func (*BaseData) ProtoMessage()               {}
func (*BaseData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *BaseData) GetField() int32 {
	if m != nil && m.Field != nil {
		return *m.Field
	}
	return 0
}

func (m *BaseData) GetValue() float64 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

// 累积指标数据
type AccumulateData struct {
	Field            *int32   `protobuf:"varint,1,req,name=field" json:"field,omitempty"`
	Value            *float64 `protobuf:"fixed64,2,req,name=value" json:"value,omitempty"`
	Days             *int32   `protobuf:"varint,3,req,name=days" json:"days,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *AccumulateData) Reset()                    { *m = AccumulateData{} }
func (m *AccumulateData) String() string            { return proto.CompactTextString(m) }
func (*AccumulateData) ProtoMessage()               {}
func (*AccumulateData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AccumulateData) GetField() int32 {
	if m != nil && m.Field != nil {
		return *m.Field
	}
	return 0
}

func (m *AccumulateData) GetValue() float64 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *AccumulateData) GetDays() int32 {
	if m != nil && m.Days != nil {
		return *m.Days
	}
	return 0
}

// 财务属性数据
type FinancialData struct {
	Field            *int32   `protobuf:"varint,1,req,name=field" json:"field,omitempty"`
	Value            *float64 `protobuf:"fixed64,2,req,name=value" json:"value,omitempty"`
	Quarter          *int32   `protobuf:"varint,3,req,name=quarter" json:"quarter,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *FinancialData) Reset()                    { *m = FinancialData{} }
func (m *FinancialData) String() string            { return proto.CompactTextString(m) }
func (*FinancialData) ProtoMessage()               {}
func (*FinancialData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *FinancialData) GetField() int32 {
	if m != nil && m.Field != nil {
		return *m.Field
	}
	return 0
}

func (m *FinancialData) GetValue() float64 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *FinancialData) GetQuarter() int32 {
	if m != nil && m.Quarter != nil {
		return *m.Quarter
	}
	return 0
}

// 返回的股票数据
type StockData struct {
	Security           *Qot_Common.Security `protobuf:"bytes,1,req,name=security" json:"security,omitempty"`
	Name               *string              `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	BaseDataList       []*BaseData          `protobuf:"bytes,3,rep,name=baseDataList" json:"baseDataList,omitempty"`
	AccumulateDataList []*AccumulateData    `protobuf:"bytes,4,rep,name=accumulateDataList" json:"accumulateDataList,omitempty"`
	FinancialDataList  []*FinancialData     `protobuf:"bytes,5,rep,name=financialDataList" json:"financialDataList,omitempty"`
	XXX_unrecognized   []byte               `json:"-"`
}

func (m *StockData) Reset()                    { *m = StockData{} }
func (m *StockData) String() string            { return proto.CompactTextString(m) }
func (*StockData) ProtoMessage()               {}
func (*StockData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *StockData) GetSecurity() *Qot_Common.Security {
	if m != nil {
		return m.Security
	}
	return nil
}

func (m *StockData) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *StockData) GetBaseDataList() []*BaseData {
	if m != nil {
		return m.BaseDataList
	}
	return nil
}

func (m *StockData) GetAccumulateDataList() []*AccumulateData {
	if m != nil {
		return m.AccumulateDataList
	}
	return nil
}

func (m *StockData) GetFinancialDataList() []*FinancialData {
	if m != nil {
		return m.FinancialDataList
	}
	return nil
}

type C2S struct {
	Begin  *int32 `protobuf:"varint,1,req,name=begin" json:"begin,omitempty"`
	Num    *int32 `protobuf:"varint,2,req,name=num" json:"num,omitempty"`
	Market *int32 `protobuf:"varint,3,req,name=market" json:"market,omitempty"`
	// 以下为筛选条件，可选字段，不填表示不过滤
	Plate                *Qot_Common.Security `protobuf:"bytes,4,opt,name=plate" json:"plate,omitempty"`
	BaseFilterList       []*BaseFilter        `protobuf:"bytes,5,rep,name=baseFilterList" json:"baseFilterList,omitempty"`
	AccumulateFilterList []*AccumulateFilter  `protobuf:"bytes,6,rep,name=accumulateFilterList" json:"accumulateFilterList,omitempty"`
	FinancialFilterList  []*FinancialFilter   `protobuf:"bytes,7,rep,name=financialFilterList" json:"financialFilterList,omitempty"`
	XXX_unrecognized     []byte               `json:"-"`
}

func (m *C2S) Reset()                    { *m = C2S{} }
func (m *C2S) String() string            { return proto.CompactTextString(m) }
func (*C2S) ProtoMessage()               {}
func (*C2S) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *C2S) GetBegin() int32 {
	if m != nil && m.Begin != nil {
		return *m.Begin
	}
	return 0
}

func (m *C2S) GetNum() int32 {
	if m != nil && m.Num != nil {
		return *m.Num
	}
	return 0
}

func (m *C2S) GetMarket() int32 {
	if m != nil && m.Market != nil {
		return *m.Market
	}
	return 0
}

func (m *C2S) GetPlate() *Qot_Common.Security {
	if m != nil {
		return m.Plate
	}
	return nil
}

func (m *C2S) GetBaseFilterList() []*BaseFilter {
	if m != nil {
		return m.BaseFilterList
	}
	return nil
}

func (m *C2S) GetAccumulateFilterList() []*AccumulateFilter {
	if m != nil {
		return m.AccumulateFilterList
	}
	return nil
}

func (m *C2S) GetFinancialFilterList() []*FinancialFilter {
	if m != nil {
		return m.FinancialFilterList
	}
	return nil
}

type S2C struct {
	LastPage         *bool        `protobuf:"varint,1,req,name=lastPage" json:"lastPage,omitempty"`
	AllCount         *int32       `protobuf:"varint,2,req,name=allCount" json:"allCount,omitempty"`
	DataList         []*StockData `protobuf:"bytes,3,rep,name=dataList" json:"dataList,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *S2C) Reset()                    { *m = S2C{} }
func (m *S2C) String() string            { return proto.CompactTextString(m) }
func (*S2C) ProtoMessage()               {}
func (*S2C) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *S2C) GetLastPage() bool {
	if m != nil && m.LastPage != nil {
		return *m.LastPage
	}
	return false
}

func (m *S2C) GetAllCount() int32 {
	if m != nil && m.AllCount != nil {
		return *m.AllCount
	}
	return 0
}

func (m *S2C) GetDataList() []*StockData {
	if m != nil {
		return m.DataList
	}
	return nil
}

type Request struct {
	C2S              *C2S   `protobuf:"bytes,1,req,name=c2s" json:"c2s,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Request) GetC2S() *C2S {
	if m != nil {
		return m.C2S
	}
	return nil
}

type Response struct {
	RetType          *int32  `protobuf:"varint,1,req,name=retType,def=-400" json:"retType,omitempty"`
	RetMsg           *string `protobuf:"bytes,2,opt,name=retMsg" json:"retMsg,omitempty"`
	ErrCode          *int32  `protobuf:"varint,3,opt,name=errCode" json:"errCode,omitempty"`
	S2C              *S2C    `protobuf:"bytes,4,opt,name=s2c" json:"s2c,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

const Default_Response_RetType int32 = -400

func (m *Response) GetRetType() int32 {
	if m != nil && m.RetType != nil {
		return *m.RetType
	}
	return Default_Response_RetType
}

func (m *Response) GetRetMsg() string {
	if m != nil && m.RetMsg != nil {
		return *m.RetMsg
	}
	return ""
}

func (m *Response) GetErrCode() int32 {
	if m != nil && m.ErrCode != nil {
		return *m.ErrCode
	}
	return 0
}

func (m *Response) GetS2C() *S2C {
	if m != nil {
		return m.S2C
	}
	return nil
}

func init() {
	proto.RegisterType((*BaseFilter)(nil), "Qot_StockFilter.BaseFilter")
	proto.RegisterType((*AccumulateFilter)(nil), "Qot_StockFilter.AccumulateFilter")
	proto.RegisterType((*FinancialFilter)(nil), "Qot_StockFilter.FinancialFilter")
	proto.RegisterType((*BaseData)(nil), "Qot_StockFilter.BaseData")
	proto.RegisterType((*AccumulateData)(nil), "Qot_StockFilter.AccumulateData")
	proto.RegisterType((*FinancialData)(nil), "Qot_StockFilter.FinancialData")
	proto.RegisterType((*StockData)(nil), "Qot_StockFilter.StockData")
	proto.RegisterType((*C2S)(nil), "Qot_StockFilter.C2S")
	proto.RegisterType((*S2C)(nil), "Qot_StockFilter.S2C")
	proto.RegisterType((*Request)(nil), "Qot_StockFilter.Request")
	proto.RegisterType((*Response)(nil), "Qot_StockFilter.Response")
	proto.RegisterEnum("Qot_StockFilter.StockField", StockField_name, StockField_value)
	proto.RegisterEnum("Qot_StockFilter.AccumulateField", AccumulateField_name, AccumulateField_value)
	proto.RegisterEnum("Qot_StockFilter.FinancialField", FinancialField_name, FinancialField_value)
	proto.RegisterEnum("Qot_StockFilter.FinancialQuarter", FinancialQuarter_name, FinancialQuarter_value)
	proto.RegisterEnum("Qot_StockFilter.SortDir", SortDir_name, SortDir_value)
}

func init() { proto.RegisterFile("Qot_StockFilter.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1168 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xd1, 0x6e, 0xdb, 0x36,
	0x14, 0xad, 0x2c, 0x2b, 0x76, 0x6e, 0xdb, 0x84, 0x65, 0xd2, 0x54, 0x75, 0xd3, 0xcc, 0x35, 0xb0,
	0xce, 0xcb, 0x56, 0xa7, 0x33, 0xd6, 0x02, 0x1b, 0xb0, 0x87, 0xc4, 0x59, 0xbb, 0x01, 0x49, 0x9a,
	0xd2, 0x69, 0x87, 0xed, 0xa5, 0xa0, 0x6d, 0xda, 0x21, 0x22, 0x91, 0xae, 0x48, 0x35, 0xcd, 0xfb,
	0x3e, 0x62, 0x0f, 0xfb, 0x87, 0x01, 0x7b, 0xd9, 0x27, 0x0c, 0xfb, 0x84, 0x3d, 0xee, 0x4f, 0x06,
	0x52, 0xb2, 0x23, 0x29, 0x4a, 0x80, 0xbe, 0xf5, 0x29, 0xbc, 0xf7, 0x9c, 0x7b, 0x78, 0x79, 0x72,
	0xc9, 0x28, 0x70, 0xfb, 0xa5, 0xd4, 0x6f, 0xfa, 0x5a, 0x0e, 0x4f, 0x9e, 0xf1, 0x40, 0xb3, 0xa8,
	0x33, 0x8d, 0xa4, 0x96, 0x78, 0xb9, 0x90, 0x6e, 0xdc, 0xe8, 0xc9, 0x30, 0x94, 0x22, 0x81, 0x1b,
	0xc8, 0xc0, 0xd9, 0x4c, 0xeb, 0x37, 0x07, 0x60, 0x87, 0x2a, 0x96, 0xd0, 0xf1, 0x2a, 0x78, 0x63,
	0xce, 0x82, 0x91, 0xef, 0x34, 0x2b, 0x6d, 0x8f, 0x24, 0x01, 0x5e, 0x87, 0xc5, 0xb1, 0xc5, 0xf7,
	0xb9, 0xf0, 0x2b, 0x4d, 0xa7, 0xed, 0x90, 0xf3, 0x44, 0x06, 0xa5, 0xef, 0x7d, 0x37, 0x87, 0xd2,
	0xf7, 0x78, 0x03, 0x80, 0xab, 0x03, 0x99, 0xe8, 0xfb, 0xd5, 0xa6, 0xd3, 0xae, 0x93, 0x4c, 0x06,
	0xfb, 0x50, 0x53, 0x32, 0xd2, 0xbb, 0x3c, 0xf2, 0xbd, 0xa6, 0xd3, 0xf6, 0xc8, 0x2c, 0x6c, 0xfd,
	0xe9, 0x00, 0xda, 0x1e, 0x0e, 0xe3, 0x30, 0x0e, 0xa8, 0xfe, 0x08, 0x1b, 0xc4, 0x18, 0xaa, 0x23,
	0x7a, 0xa6, 0xfc, 0x05, 0xdb, 0x8a, 0x5d, 0xb7, 0xfe, 0x72, 0x60, 0xf9, 0x19, 0x17, 0x54, 0x0c,
	0x39, 0x0d, 0x3e, 0xc2, 0x9e, 0x7d, 0xa8, 0xbd, 0x8d, 0x69, 0x64, 0xca, 0x92, 0xb6, 0x67, 0x61,
	0xeb, 0x29, 0xd4, 0xcd, 0x20, 0xec, 0x52, 0x4d, 0x2f, 0xe9, 0x78, 0x15, 0xbc, 0x77, 0x34, 0x88,
	0x99, 0x5f, 0x69, 0x56, 0xda, 0x0e, 0x49, 0x82, 0xd6, 0x21, 0x2c, 0x9d, 0xff, 0x96, 0x3e, 0xb4,
	0x7a, 0xee, 0xa1, 0x9b, 0xf1, 0xf0, 0x15, 0xdc, 0x9c, 0x5b, 0xf8, 0xc1, 0x82, 0x99, 0x03, 0xba,
	0xf9, 0x03, 0xfe, 0x51, 0x81, 0x45, 0x7b, 0x35, 0xac, 0xe6, 0x63, 0xa8, 0x2b, 0x36, 0x8c, 0x23,
	0xae, 0xcf, 0xac, 0xec, 0xf5, 0xee, 0x6a, 0x27, 0x73, 0x3b, 0xfa, 0x29, 0x46, 0xe6, 0x2c, 0xd3,
	0xaa, 0xa0, 0x61, 0xb2, 0xdd, 0x22, 0xb1, 0x6b, 0xfc, 0x1d, 0xdc, 0x18, 0xa4, 0xa6, 0xed, 0x71,
	0xa5, 0x7d, 0xb7, 0xe9, 0xb6, 0xaf, 0x77, 0xef, 0x76, 0x8a, 0xb7, 0x73, 0xe6, 0x2c, 0xc9, 0xd1,
	0xf1, 0x0b, 0xc0, 0x34, 0xe7, 0x9d, 0x15, 0xa9, 0x5a, 0x91, 0x4f, 0x2e, 0x88, 0xe4, 0x6d, 0x26,
	0x25, 0xa5, 0x78, 0x0f, 0x6e, 0x8d, 0xb3, 0xd6, 0x59, 0x3d, 0xcf, 0xea, 0x6d, 0x5c, 0xd0, 0xcb,
	0x99, 0x4c, 0x2e, 0x16, 0xb6, 0xfe, 0xab, 0x80, 0xdb, 0xeb, 0xf6, 0x8d, 0xd3, 0x03, 0x36, 0xe1,
	0x62, 0xe6, 0xbf, 0x0d, 0x30, 0x02, 0x57, 0xc4, 0xa1, 0xb5, 0xc3, 0x23, 0x66, 0x89, 0xd7, 0x60,
	0x21, 0xa4, 0xd1, 0x09, 0xd3, 0xa9, 0xf5, 0x69, 0x84, 0x37, 0xc1, 0x9b, 0x9a, 0x36, 0xed, 0xa4,
	0x5e, 0x66, 0x74, 0x42, 0xc1, 0x3d, 0x58, 0x1a, 0xcc, 0xdf, 0xa3, 0x4c, 0xfb, 0xf7, 0x4a, 0x3d,
	0x4d, 0x96, 0xa4, 0x50, 0x82, 0x5f, 0xc1, 0x2a, 0x2d, 0xbc, 0x1c, 0x56, 0x6a, 0xc1, 0x4a, 0x3d,
	0xb8, 0xc2, 0xd9, 0x54, 0xb0, 0xb4, 0x1c, 0x13, 0x58, 0x19, 0xe7, 0xef, 0xb6, 0x55, 0xad, 0x59,
	0xd5, 0xe6, 0xe5, 0xfe, 0xa6, 0xa2, 0x65, 0xc5, 0xad, 0x18, 0xdc, 0x7e, 0xb7, 0x87, 0x1b, 0x50,
	0x0f, 0xa8, 0xd2, 0x87, 0x74, 0xc2, 0xac, 0xcb, 0x75, 0x32, 0x8f, 0x0d, 0x46, 0x83, 0xa0, 0x27,
	0x63, 0xa1, 0x53, 0xb7, 0xe7, 0x31, 0x7e, 0x0a, 0xf5, 0x51, 0x7e, 0xf8, 0x1a, 0x17, 0xfa, 0x98,
	0x0f, 0x3d, 0x99, 0x73, 0x5b, 0x5f, 0x41, 0x8d, 0xb0, 0xb7, 0x31, 0x53, 0x1a, 0x3f, 0x04, 0x77,
	0xd8, 0x55, 0xb9, 0x4b, 0x90, 0xad, 0xee, 0x75, 0xfb, 0xc4, 0x10, 0x5a, 0xbf, 0x3a, 0x50, 0x27,
	0x4c, 0x4d, 0xa5, 0x50, 0x0c, 0x6f, 0x40, 0x2d, 0x62, 0xfa, 0xe8, 0x6c, 0x9a, 0xb4, 0xeb, 0x7d,
	0x5b, 0x7d, 0xf4, 0xf5, 0xe3, 0xc7, 0x64, 0x96, 0x34, 0xa3, 0x10, 0x31, 0xbd, 0xaf, 0x26, 0xf6,
	0x69, 0x5b, 0x24, 0x69, 0x64, 0xae, 0x27, 0x8b, 0xa2, 0x9e, 0x1c, 0x31, 0xfb, 0xaa, 0x79, 0x64,
	0x16, 0x9a, 0x36, 0x54, 0x77, 0x98, 0x1b, 0x91, 0xdc, 0x21, 0xba, 0x3d, 0x62, 0x08, 0x9b, 0xbf,
	0x57, 0x01, 0x52, 0xc0, 0xbc, 0x02, 0x6b, 0x80, 0xcf, 0xa3, 0x37, 0xaf, 0xc4, 0x89, 0x90, 0xa7,
	0x02, 0x5d, 0xc3, 0x3e, 0xac, 0x66, 0xf2, 0x76, 0x69, 0xb6, 0x41, 0x4e, 0x19, 0x72, 0x40, 0x43,
	0x86, 0x2a, 0xf8, 0x0e, 0xac, 0x64, 0x90, 0x5e, 0x1c, 0x1d, 0x46, 0x7c, 0xc8, 0x90, 0x8b, 0xbf,
	0x84, 0x76, 0x09, 0x70, 0x24, 0x7f, 0xe0, 0x93, 0x63, 0xa6, 0xf4, 0x93, 0xee, 0x4f, 0x8c, 0x9d,
	0x28, 0x42, 0x35, 0x97, 0xa8, 0x8a, 0xbf, 0x80, 0xcf, 0x4a, 0xd9, 0x7b, 0xf2, 0xb4, 0x48, 0xf6,
	0xf0, 0x23, 0xf8, 0x3c, 0x43, 0x36, 0x82, 0x57, 0x68, 0x2f, 0x14, 0xb4, 0xf7, 0xe4, 0xe9, 0xe5,
	0xda, 0x35, 0xdc, 0x80, 0xb5, 0x0c, 0xf9, 0xb5, 0x0c, 0xe2, 0x90, 0x25, 0x58, 0xbd, 0x80, 0xed,
	0xf0, 0xd1, 0xb6, 0x3a, 0x49, 0xb0, 0xc5, 0x82, 0x0f, 0x7b, 0x52, 0x27, 0x3e, 0x40, 0xc1, 0xba,
	0x7d, 0x7b, 0xbb, 0x5f, 0xd3, 0x00, 0x5d, 0x2f, 0x94, 0x1c, 0xb2, 0x6d, 0x21, 0x62, 0x1a, 0xa0,
	0x1b, 0x78, 0x15, 0x50, 0x0e, 0x38, 0x3a, 0xda, 0x47, 0x37, 0xf1, 0x6d, 0xb8, 0x95, 0xcd, 0x0e,
	0x08, 0xd5, 0x0c, 0x2d, 0xe1, 0xfb, 0x70, 0x37, 0xeb, 0xdc, 0x31, 0x15, 0x13, 0xd3, 0x30, 0x7b,
	0x12, 0x72, 0x81, 0x96, 0x71, 0x0b, 0x36, 0x4a, 0xe1, 0x1d, 0xf3, 0x1e, 0xfd, 0xcc, 0x68, 0x84,
	0xd0, 0xe6, 0x3f, 0x0e, 0x2c, 0x67, 0xaf, 0xb3, 0x99, 0x91, 0x7b, 0x70, 0xa7, 0x90, 0xca, 0x0c,
	0xca, 0x06, 0x34, 0x8a, 0xe0, 0xb9, 0x32, 0x72, 0x4c, 0x4f, 0x45, 0x7c, 0x3b, 0x9c, 0x06, 0x5c,
	0xc7, 0x23, 0x33, 0x33, 0x0d, 0x58, 0x2b, 0xc2, 0x89, 0xd1, 0xc8, 0xc5, 0xeb, 0xe0, 0x17, 0xb1,
	0xa3, 0x38, 0x12, 0xf2, 0x1d, 0x8b, 0x50, 0x15, 0x37, 0x61, 0xfd, 0x32, 0xd4, 0x6e, 0xed, 0x6d,
	0xfe, 0x5d, 0x81, 0xa5, 0xcc, 0x23, 0x62, 0x8e, 0xd2, 0x80, 0xb5, 0x7c, 0x26, 0x73, 0x92, 0x75,
	0xf0, 0x0b, 0xd8, 0x01, 0xd3, 0x87, 0x91, 0x1c, 0x73, 0x8d, 0x1c, 0x63, 0xde, 0x65, 0xe8, 0xf3,
	0x48, 0x9e, 0xea, 0x63, 0x54, 0x31, 0x2d, 0x15, 0x38, 0xfd, 0x38, 0x7c, 0x31, 0xde, 0x89, 0x15,
	0x17, 0x4c, 0x29, 0xe4, 0xe2, 0x87, 0xd0, 0xba, 0x8a, 0x91, 0x2a, 0x55, 0x4b, 0x94, 0xe6, 0xbb,
	0x25, 0x87, 0x2b, 0xe9, 0xe7, 0x79, 0x24, 0x95, 0xca, 0x70, 0x16, 0x4a, 0x54, 0x76, 0xd9, 0x40,
	0x6f, 0x2b, 0xc5, 0x12, 0x46, 0x0d, 0x7f, 0x0a, 0x0f, 0x0a, 0x0c, 0xc2, 0x74, 0x1c, 0x89, 0x17,
	0xe2, 0xfb, 0xb7, 0xb1, 0xf9, 0xb3, 0x62, 0x68, 0xf5, 0xcd, 0x7f, 0x1d, 0x40, 0x73, 0xde, 0xcb,
	0xe4, 0x83, 0x20, 0xe7, 0x57, 0x9a, 0xcb, 0xb8, 0x79, 0x0f, 0xee, 0x5c, 0x40, 0xd3, 0xa9, 0x76,
	0xf0, 0x03, 0xb8, 0x7f, 0x01, 0x7c, 0xc6, 0x23, 0xa5, 0xd3, 0x00, 0x55, 0x4a, 0xd5, 0x7f, 0x14,
	0x9a, 0x45, 0x3c, 0x44, 0x6e, 0xa9, 0xc0, 0xd1, 0x31, 0x8f, 0x46, 0x33, 0x81, 0x6a, 0xce, 0xea,
	0x19, 0x65, 0x5f, 0x2a, 0x4d, 0xd8, 0x90, 0x89, 0xf9, 0x46, 0xde, 0xe6, 0x0e, 0xd4, 0xfa, 0xe9,
	0xd7, 0xdd, 0x12, 0x40, 0xba, 0x7c, 0x73, 0x20, 0xd1, 0x35, 0x8c, 0x61, 0x69, 0x16, 0x6f, 0xab,
	0x21, 0x13, 0x23, 0xe4, 0xe0, 0x15, 0x58, 0x9e, 0xe5, 0x76, 0x59, 0x92, 0xac, 0xec, 0x1c, 0xc2,
	0xca, 0x50, 0x86, 0x9d, 0x71, 0xac, 0xe3, 0x8e, 0x9c, 0x32, 0x41, 0xa7, 0xbc, 0x33, 0x1d, 0xfc,
	0xf2, 0xcd, 0x84, 0xeb, 0xe3, 0x78, 0xd0, 0x19, 0xca, 0x70, 0x4b, 0x69, 0x36, 0x3d, 0x66, 0x22,
	0x38, 0x8b, 0xb7, 0x26, 0xd2, 0x10, 0xe9, 0x94, 0x6f, 0x99, 0x9f, 0xf6, 0x1f, 0x89, 0xad, 0xc2,
	0x7b, 0xfd, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe0, 0x1d, 0xe6, 0xb6, 0xa1, 0x0c, 0x00, 0x00,
}
